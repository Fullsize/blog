<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>中高级前端常见面试题</title>
      <link href="/2025/01/10/code/chang-jian-mian-shi-ti/"/>
      <url>/2025/01/10/code/chang-jian-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<p>总结常见的中高级面试题</p><h2 id="javascipt"><a href="#javascipt" class="headerlink" title="javascipt"></a>javascipt</h2><h3 id="什么是作用域"><a href="#什么是作用域" class="headerlink" title="什么是作用域?"></a>什么是作用域?</h3><p>在 JavaScript 中，<strong>作用域（Scope）</strong> 是指代码中变量、函数和对象的可访问范围。作用域定义了代码中哪些部分可以访问和操作某些变量。了解作用域有助于更好地管理变量，避免命名冲突，并理解代码的执行流程。</p><h4 id="作用域分类"><a href="#作用域分类" class="headerlink" title="作用域分类"></a>作用域分类</h4><h5 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h5><ul><li>在代码的任何地方都可以访问的作用域</li><li>全局作用域中的变量会成为全局对象（如浏览器中的 window）的属性。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> globalVar <span class="token operator">=</span> <span class="token string">"I am global"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">showVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "I am global"</span><span class="token punctuation">&#125;</span><span class="token function">showVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>globalVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 浏览器中："I am global"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h5 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h5><ul><li>在函数内部声明的变量，只能在该函数内访问。</li><li>使用 var、let 或 const 定义的变量具有函数作用域。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">exampleFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> localVar <span class="token operator">=</span> <span class="token string">"I am local"</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "I am local"</span><span class="token punctuation">&#125;</span><span class="token function">exampleFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错：localVar 未定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h5><ul><li>使用 let 或 const 定义的变量具有块级作用域（{} 内部）。</li><li>块级作用域限制了变量只能在声明它的代码块中访问。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> blockVar <span class="token operator">=</span> <span class="token string">"I am block-scoped"</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> anotherBlockVar <span class="token operator">=</span> <span class="token string">"I am also block-scoped"</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blockVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "I am block-scoped"</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blockVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错：blockVar 未定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="模块作用域"><a href="#模块作用域" class="headerlink" title="模块作用域"></a>模块作用域</h5><ul><li>模块（ES6 的 import 和 export）内部的变量默认是模块作用域，只能在该模块内访问</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// moduleA.js</span><span class="token keyword">const</span> moduleVar <span class="token operator">=</span> <span class="token string">"I am module-scoped"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> moduleVar<span class="token punctuation">;</span><span class="token comment">// main.js</span><span class="token keyword">import</span> moduleVar <span class="token keyword">from</span> <span class="token string">"./moduleA.js"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moduleVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "I am module-scoped"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><ul><li>当 JavaScript 代码访问一个变量时，会按照作用域链逐层查找变量。</li><li>查找顺序是：<strong>当前作用域 → 外层作用域 → 全局作用域</strong>。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> globalVar <span class="token operator">=</span> <span class="token string">"global"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> outerVar <span class="token operator">=</span> <span class="token string">"outer"</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> innerVar <span class="token operator">=</span> <span class="token string">"inner"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>innerVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "inner"</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>outerVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "outer"</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "global"</span>  <span class="token punctuation">&#125;</span>  <span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p><strong>闭包</strong>是由捆绑起来（封闭的）的函数和函数周围状态（词法环境）的引用组合而成。换言之，闭包让函数能访问它的外部作用域。在 JavaScript 中，闭包会随着函数的创建而同时创建。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// a 是一个被 foo 创建的局部变量</span>  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// bar 是一个内部函数，是一个闭包</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用了父函数中声明的变量</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li><strong>数据持久化（记住变量的值）</strong><br>闭包可以让函数“记住”外部作用域的变量，即使外部函数执行结束后，变量仍然不会被销毁。<ul><li>适合用于状态管理和累加器等场景。</li></ul></li><li><strong>实现封装与私有化</strong><br>闭包可以隐藏函数内部的变量或逻辑，对外只暴露需要的接口。<ul><li>增强模块化设计，避免全局变量污染。</li></ul></li><li><strong>动态创建函数</strong><br>闭包可以根据参数动态生成特定功能的函数，从而提高代码复用性和灵活性。</li><li><strong>实现模块化</strong><br>闭包可以用于实现模块化的代码结构，通过将一些函数和变量封装在闭包中，可以减少全局命名空间的污染，提高代码的可重用性和可维护性。</li></ol><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ol><li><strong>内存泄漏：</strong> 闭包会持有对其所在作用域的引用，如果闭包中包含对大量对象的引用，并且闭包没有被正确释放，就可能导致内存泄漏的问题，使得不再需要的对象无法被垃圾回收。</li><li><strong>性能开销：</strong> 由于闭包需要捕获外部作用域的状态，因此在创建和执行闭包时可能会产生一些额外的性能开销，特别是在嵌套的闭包中或者捕获大量变量时。</li><li><strong>作用域链的影响：</strong> 闭包的作用域链可能会影响代码的性能和可读性，尤其是在处理嵌套闭包时，需要小心避免作用域链过长导致的性能问题。</li></ol><h3 id="箭头函数和普通函数的区别"><a href="#箭头函数和普通函数的区别" class="headerlink" title="箭头函数和普通函数的区别"></a>箭头函数和普通函数的区别</h3><ol><li>箭头函数不绑定 arguments ，可以使用 …args 代替;</li><li>箭头函数可以进行隐式返回；</li><li>箭头函数内的 this 是词法绑定的，与外层函数保持一致；</li><li>箭头函数没有 prototype 属性，不能进行 new 实例化，亦不能通过 call、apply 等绑定 this;</li><li>在定义类的方法时，箭头函数不需要在 constructor 中绑定 this。</li></ol><h3 id="class-的作用和描述"><a href="#class-的作用和描述" class="headerlink" title="class 的作用和描述"></a>class 的作用和描述</h3><p>类是用于创建对象的模板。它们用代码封装数据以对其进行处理。<br>类实际上是“特殊的函数”，就像你能够定义的函数表达式和函数声明一样，类也有两种定义方式：类表达式和类声明。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 类声明</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">height<span class="token punctuation">,</span> width</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 类表达式；类是匿名的，但是它被赋值给了变量</span><span class="token keyword">const</span> Rectangle <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">height<span class="token punctuation">,</span> width</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 类表达式；类有它自己的名字</span><span class="token keyword">const</span> Rectangle <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle2</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">height<span class="token punctuation">,</span> width</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类是对象的模板，封装了对象的属性和方法。</li><li>它支持面向对象编程的特性，如封装、继承、多态。</li><li>类提高了代码的可读性和模块化程度，简化了原型链操作。</li><li>使用类，可以轻松组织和维护复杂的代码结构，适用于现代 JavaScript 项目开发。</li></ul><h3 id="class-的出现是为了解决什么问题"><a href="#class-的出现是为了解决什么问题" class="headerlink" title="class 的出现是为了解决什么问题"></a>class 的出现是为了解决什么问题</h3><ol><li><p><strong>更清晰的面向对象编程语法</strong><br>在 ES6 之前，JavaScript 使用构造函数和原型链来实现面向对象编程。虽然功能强大，但这种方式语法较为复杂且不直观<br><strong>传统构造函数写法</strong>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用 class 的写法：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>统一和简化继承机制</strong><br>在旧的原型继承中，开发者需要手动处理原型链和继承逻辑，这可能导致复杂和易错的代码：<br><strong>传统继承写法：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">speak</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> makes a sound</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> breed</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父构造函数</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>breed <span class="token operator">=</span> breed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Dog<span class="token punctuation">;</span><span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">speak</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> barks</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用 class 的继承写法：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> makes a sound</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> breed</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类构造函数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>breed <span class="token operator">=</span> breed<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> barks</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 class 的 extends 和 super 关键字，继承变得更加简单和规范，避免手动操作原型链的复杂性。</p></li><li><p>提高代码可维护性和可读性<br>class 的模块化结构使得代码更加清晰和可维护。每个类封装了特定的行为和属性，可以轻松扩展或复用。</p></li><li><p>向开发者传递意图<br>引入 class 强调了对象的类型和结构，向开发者明确表达了“这是一个类”的意图，减少了学习曲线，尤其对熟悉其他 OOP 语言的开发者更为友好。</p></li><li><p>支持更高级的功能<br>ES6 的 class 为 JavaScript 引入了更多高级功能，例如：</p></li></ol><ul><li>私有字段（通过 # 表示，ES2022 引入）</li><li>getter 和 setter</li><li>静态字段和静态块</li><li>类装饰器（实验性）<br>这些功能增强了 JavaScript 的面向对象能力。</li></ul><h3 id="构造函数和普通函数的区别"><a href="#构造函数和普通函数的区别" class="headerlink" title="构造函数和普通函数的区别"></a>构造函数和普通函数的区别</h3><ol><li>调用方式不一样</li><li>作用也不一样（构造函数用来新建实例对象）</li><li>首字母大小写习惯</li><li>构造函数默认返回新对象,普通函数默认返回函数的结果</li><li>构造函数用于创建对象,普通函数执行逻辑或计算操作</li></ol><h3 id="new-操作符做了什么"><a href="#new-操作符做了什么" class="headerlink" title="new 操作符做了什么"></a>new 操作符做了什么</h3><ol><li>创建一个新的空对象</li><li>将新对象的 [[Prototype]] 设置为构造函数的 prototype 属性。</li><li>调用构造函数，并将 this 绑定到这个新对象。</li><li>如果构造函数没有显式返回值，返回这个新对象。</li></ol><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><p>Promise 对象表示异步操作最终的完成（或失败）以及其结果值。<br><strong>Promise 是一个状态机,只有 pending(进行中),fulfilled(已完成),rejected(已拒绝)</strong></p><p><strong>Promise 可以链式调用</strong></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>对象的状态不受外界影响。</li><li>一旦从等待状态变成为其他状态就永远不能更改状态了。</li><li>一旦新建 Promise 就会立即执行，无法中途取消。</li><li>如果不设置回调函数 callback，Promise 内部抛出的错误，就不会反应到外部。</li><li>当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 18 更新内容</title>
      <link href="/2024/12/27/code/react/react18-d/"/>
      <url>/2024/12/27/code/react/react18-d/</url>
      
        <content type="html"><![CDATA[<p>React 18 是 React 框架的一个重要版本更新，为开发者带来了诸多新的功能和优化，特别是在并发渲染、性能提升和用户体验方面的改进。本文将为您全面解析 React 18 的更新要点，包括并发特性、新的 API、服务端渲染增强以及性能改进，帮助您更好地理解并使用这些新特性。</p><hr><h3 id="1-并发特性：提升渲染体验和性能"><a href="#1-并发特性：提升渲染体验和性能" class="headerlink" title="1. 并发特性：提升渲染体验和性能"></a>1. 并发特性：提升渲染体验和性能</h3><p>React 18 引入了并发特性（Concurrent Features），使得 React 能够更智能地处理 UI 更新，避免阻塞主线程，实现更顺畅的用户体验。</p><ul><li><strong>自动批量更新</strong>：在 React 18 中，所有的状态更新都会自动进行批量处理，无论是事件处理器内部还是异步回调函数中的更新。这项改进能够减少渲染次数，从而提升性能。例如，以前在异步代码中更新多个状态会触发多次渲染，而现在这些更新将合并成一次渲染。</li><li><strong><code>startTransition</code> API</strong>：这个新 API 使开发者能够区分“紧急”和“非紧急”更新。在不需要立刻完成的更新（如页面内容加载等）中，可以使用 <code>startTransition</code> 将其标记为非紧急，允许 React 在有空闲时间时再执行这些更新，从而避免阻塞用户操作。</li></ul><h3 id="2-新的-useId-Hook"><a href="#2-新的-useId-Hook" class="headerlink" title="2. 新的 useId Hook"></a>2. 新的 <code>useId</code> Hook</h3><p>React 18 引入了一个新的 Hook：<code>useId</code>，用于生成唯一的 ID。该功能尤其适用于在 SSR 和客户端渲染中保持 ID 的一致性，比如表单元素的 <code>id</code> 属性、ARIA 属性等场景。通过 <code>useId</code>，开发者可以避免手动管理 ID，减少冲突风险，增强代码的可维护性。</p><h3 id="3-Suspense-的服务端渲染改进"><a href="#3-Suspense-的服务端渲染改进" class="headerlink" title="3. Suspense 的服务端渲染改进"></a>3. <code>Suspense</code> 的服务端渲染改进</h3><p><code>Suspense</code> 是 React 中实现异步组件加载的重要工具，而在 React 18 中，其功能得到了进一步增强：</p><ul><li><strong>服务端渲染支持</strong>：React 18 允许 <code>Suspense</code> 在服务端渲染（SSR）时处理异步数据。这意味着开发者可以使用 <code>Suspense</code> 直接控制组件的数据加载和显示顺序，服务器将自动生成更流畅的内容加载体验。这一改进能够显著减少白屏时间，提高页面响应速度。</li></ul><h3 id="4-新的流式服务器端渲染-API（Streaming-Server-Rendering）"><a href="#4-新的流式服务器端渲染-API（Streaming-Server-Rendering）" class="headerlink" title="4. 新的流式服务器端渲染 API（Streaming Server Rendering）"></a>4. 新的流式服务器端渲染 API（Streaming Server Rendering）</h3><p>React 18 提供了新的流式服务器端渲染方法。通过分块传输内容，服务器可以在部分内容渲染完毕后就将其发送到客户端，使得应用可以更早地展示内容。相比之前的 SSR 模式，这种流式渲染方式能够提升初始加载速度，为用户带来更加流畅的浏览体验。</p><h3 id="5-新的-Hooks：useTransition-和-useDeferredValue"><a href="#5-新的-Hooks：useTransition-和-useDeferredValue" class="headerlink" title="5. 新的 Hooks：useTransition 和 useDeferredValue"></a>5. 新的 Hooks：<code>useTransition</code> 和 <code>useDeferredValue</code></h3><ul><li>**<code>useTransition</code>**：这是 React 18 中另一个用于处理并发更新的 Hook，可以搭配 <code>startTransition</code> 使用。通过将一些低优先级的更新（如数据加载）放入 <code>useTransition</code> 中，React 可以推迟这些更新的执行，从而保证页面的流畅性，特别适合在复杂交互场景下使用。</li><li>**<code>useDeferredValue</code>**：此 Hook 允许将某些更新延迟到后续的空闲时间再处理。对于那些需要频繁交互的组件（例如输入框、搜索框等），<code>useDeferredValue</code> 能够有效减少重新渲染的次数，避免卡顿。</li></ul><h3 id="6-严格模式中的双重渲染"><a href="#6-严格模式中的双重渲染" class="headerlink" title="6. 严格模式中的双重渲染"></a>6. 严格模式中的双重渲染</h3><p>React 18 加强了开发环境下的严格模式（Strict Mode），在首次渲染组件时会触发两次渲染。这一机制帮助开发者更容易检测副作用，确保组件的行为稳定。虽然双重渲染仅在开发模式下启用，但它能有效帮助开发者找到隐藏的依赖和潜在问题，提高代码质量。</p><h3 id="7-全新的-createRoot-API"><a href="#7-全新的-createRoot-API" class="headerlink" title="7. 全新的 createRoot API"></a>7. 全新的 <code>createRoot</code> API</h3><p>在 React 18 中，<code>createRoot</code> API 取代了 <code>ReactDOM.render</code>。使用 <code>createRoot</code> 可以启用并发特性，进一步提升渲染性能。开发者需要注意，React 18 的 <code>createRoot</code> 是启用并发渲染的必要步骤，在挂载根组件时必须使用。例如：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRoot <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-dom/client"</span><span class="token punctuation">;</span><span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-全局错误处理与新的错误恢复机制"><a href="#8-全局错误处理与新的错误恢复机制" class="headerlink" title="8. 全局错误处理与新的错误恢复机制"></a>8. 全局错误处理与新的错误恢复机制</h3><p>React 18 中改进了全局错误处理和恢复机制，增强了应用的稳定性。例如，部分组件在遇到错误时会自动重新渲染，而无需刷新整个应用，这样的增强使得应用在面对意外错误时可以更平稳地恢复。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> react </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tailwind CSS 介绍</title>
      <link href="/2024/12/27/code/tailwind-css-jie-shao/"/>
      <url>/2024/12/27/code/tailwind-css-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="Tailwind-CSS-介绍"><a href="#Tailwind-CSS-介绍" class="headerlink" title="Tailwind CSS 介绍"></a>Tailwind CSS 介绍</h1><h3 id="什么是-Tailwind-CSS"><a href="#什么是-Tailwind-CSS" class="headerlink" title="什么是 Tailwind CSS?"></a>什么是 Tailwind CSS?</h3><p>Tailwind CSS 是一个功能强大的实用工具优先（utility-first）的 CSS 框架，允许开发者通过使用预定义的 CSS 类来快速构建自定义的用户界面。与传统的 CSS 框架不同，Tailwind 并没有预设的组件，而是提供了一套全面的、低级的实用工具类，可以直接在 HTML 中使用来构建任何设计。</p><h3 id="Tailwind-CSS-的核心概念"><a href="#Tailwind-CSS-的核心概念" class="headerlink" title="Tailwind CSS 的核心概念"></a>Tailwind CSS 的核心概念</h3><ol><li><strong>实用工具优先（Utility-First）</strong>:<br>Tailwind 提供大量的低级实用工具类，如 <code>flex</code>、<code>pt-4</code>、<code>text-center</code> 和 <code>rotate-90</code>，这些类可以组合起来，直接在 HTML 中构建复杂的设计，而不需要编写自定义的 CSS。</li><li><strong>配置驱动（Configuration-Driven）</strong>:<br>通过 <code>tailwind.config.js</code> 文件，开发者可以完全自定义 Tailwind 的默认主题、颜色、间距等。这样可以保证设计的一致性，同时允许灵活的定制。</li><li><strong>响应式设计（Responsive Design）</strong>:<br>Tailwind 内置了对响应式设计的支持，使用诸如 <code>sm:</code>, <code>md:</code>, <code>lg:</code>, <code>xl:</code> 和 <code>2xl:</code> 前缀，开发者可以轻松地为不同屏幕尺寸定义不同的样式。</li><li><strong>状态变体（State Variants）</strong>:<br>Tailwind 提供诸如 <code>hover:</code>, <code>focus:</code>, <code>active:</code>, <code>disabled:</code> 等状态变体，帮助开发者轻松地处理用户交互状态。</li><li><strong>即用即弃（PurgeCSS）</strong>:<br>Tailwind 与 PurgeCSS 集成，允许开发者在生产环境中删除未使用的 CSS 类，从而减少最终 CSS 文件的大小，提高性能。</li></ol><h3 id="为什么选择-Tailwind-CSS？"><a href="#为什么选择-Tailwind-CSS？" class="headerlink" title="为什么选择 Tailwind CSS？"></a>为什么选择 Tailwind CSS？</h3><ol><li><strong>快速开发</strong>:<br>使用 Tailwind，开发者可以显著减少编写 CSS 的时间，通过组合现有的实用工具类，快速实现设计。</li><li><strong>高度可定制</strong>:<br>Tailwind 的配置文件使得定制变得简单，开发者可以根据项目需求，轻松调整默认设置，以符合品牌或设计规范。</li><li><strong>一致性</strong>:<br>Tailwind 强调在整个项目中使用一致的设计语言，避免了传统 CSS 中的命名冲突和样式覆盖问题。</li><li><strong>维护简单</strong>:<br>由于所有样式都是由类名直接定义在 HTML 中，Tailwind 使得项目的样式更加直观和易于维护。</li></ol><h3 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h3><ol><li><strong>安装 Tailwind CSS</strong>:<br>使用 npm 安装 Tailwind：<br><code>bash npm install tailwindcss npx tailwindcss init </code></li><li><strong>配置 Tailwind</strong>:<br>在 <code>tailwind.config.js</code> 文件中，可以定义自定义配置：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/**/*.&#123;html,js&#125;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p><strong>使用 Tailwind 类</strong>:<br>在 HTML 文件中直接使用 Tailwind 提供的类：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-blue-500 text-white p-4 rounded-lg shadow-lg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  你好，Tailwind CSS!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Tailwind-CSS-的实战应用"><a href="#Tailwind-CSS-的实战应用" class="headerlink" title="Tailwind CSS 的实战应用"></a>Tailwind CSS 的实战应用</h3><p>以下是一个使用 Tailwind CSS 构建的简单页面示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Tailwind CSS 示例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>      <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css<span class="token punctuation">"</span></span>      <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-gray-100 flex items-center justify-center h-screen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-white p-6 rounded-lg shadow-lg max-w-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-2xl font-bold mb-4 text-gray-800<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        欢迎使用 Tailwind CSS      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-gray-600 mb-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        这是一个使用 Tailwind CSS        构建的简单示例。它展示了如何使用实用工具类来快速构建美观的 UI。      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>        点击我      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Tailwind CSS 是一个现代、高效的 CSS 框架，它通过提供丰富的实用工具类，使得开发者可以快速构建响应式和一致的用户界面。通过学习和使用 Tailwind CSS，您将能够显著提高开发效率，减少样式冲突，并创造出高度可定制和维护的设计。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 库 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发的项目流程</title>
      <link href="/2024/11/17/code/qian-duan-xiang-mu-li-xiang-liu-cheng/"/>
      <url>/2024/11/17/code/qian-duan-xiang-mu-li-xiang-liu-cheng/</url>
      
        <content type="html"><![CDATA[<p>之前面试问过，所以记录下来以免忘记</p><h2 id="1-确认项目需求"><a href="#1-确认项目需求" class="headerlink" title="1. 确认项目需求"></a>1. 确认项目需求</h2><ul><li><strong>需求调研</strong>：与需求方（客户、产品经理、业务部门）沟通，明确项目目标、核心功能、技术要求。</li><li><strong>竞品分析</strong>：研究同类产品的特点，了解用户需求与痛点。</li><li><strong>需求文档</strong>：整理需求清单，输出需求规格说明书（SRS）。<br><strong>产出</strong>:需求规格说明书（SRS）、功能清单、初步时间计划。</li></ul><h2 id="2-可行性分析"><a href="#2-可行性分析" class="headerlink" title="2. 可行性分析"></a>2. 可行性分析</h2><ul><li><strong>技术评估</strong>：评估实现需求的技术难度，选择合适的技术栈（如框架、工具、库）。</li><li><strong>资源评估</strong>：确定所需人力、时间、预算，识别潜在风险。</li><li><strong>业务评估</strong>：判断项目的商业价值，评估投入产出比。<br><strong>产出</strong>:可行性分析报告、技术选型文档。</li></ul><h2 id="3-前期设计"><a href="#3-前期设计" class="headerlink" title="3. 前期设计"></a>3. 前期设计</h2><ul><li><strong>架构设计</strong>：<ul><li>选择前端框架（如 React、Vue、Svelte 等）。</li><li>确定状态管理（如 Zustand、Redux、Pinia）。</li><li>确定构建工具（如 Webpack、Vite）。</li><li>设计目录结构、路由规则、组件划分。</li></ul></li><li><strong>UI&#x2F;UX 设计</strong>：<ul><li>确定设计风格（如扁平化、极简风）。</li><li>输出低保真或高保真原型图（如使用 Figma、Sketch）。</li></ul></li><li><strong>接口设计</strong>：与后端团队协作，定义 API 接口规范（RESTful 或 GraphQL）。<br><strong>产出</strong>:架构设计文档、UI 原型图、接口文档。</li></ul><h2 id="4-项目立项"><a href="#4-项目立项" class="headerlink" title="4. 项目立项"></a>4. 项目立项</h2><ul><li><strong>立项评审</strong>：组织团队成员（技术负责人、产品经理、项目经理）对项目需求、技术方案、资源分配进行评审。</li><li><strong>项目审批</strong>：获得高层管理或客户的正式批准。<br><strong>产出</strong>:项目立项报告、项目计划书。</li></ul><h2 id="5-项目计划"><a href="#5-项目计划" class="headerlink" title="5. 项目计划"></a>5. 项目计划</h2><ul><li><strong>任务拆解</strong>：将需求拆解为可执行的任务，并优先排序。</li><li><strong>时间估算</strong>：为每个任务分配合理时间。</li><li><strong>团队分工</strong>：确定各成员的职责。</li><li><strong>开发工具准备</strong>：配置代码仓库（Git）、CI&#x2F;CD 流水线、开发环境。<br><strong>产出</strong>:甘特图或 Sprint 计划、任务清单。</li></ul><h2 id="6-项目启动"><a href="#6-项目启动" class="headerlink" title="6. 项目启动"></a>6. 项目启动</h2><ul><li><strong>启动会议</strong>：确认目标、时间节点，明确沟通方式（如会议频率、汇报机制）。</li><li><strong>版本管理</strong>：制定分支管理策略（如 Git Flow）。</li><li><strong>研发流程</strong>：定义开发标准和代码规范。<br><strong>产出</strong>:项目启动记录、开发流程文档。</li></ul><h2 id="7-后续跟踪与迭代"><a href="#7-后续跟踪与迭代" class="headerlink" title="7. 后续跟踪与迭代"></a>7. 后续跟踪与迭代</h2><p>立项完成后，根据 Agile 或其他开发模式进入项目实施阶段，定期检查进度，及时解决问题，确保交付质量。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是开发项目的基本流程了</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>说说对React中类组件和函数组件的理解？有什么区别？</title>
      <link href="/2024/11/17/code/react/class-zu-jian-he-han-shu-zu-jian-de-qu-bie/"/>
      <url>/2024/11/17/code/react/class-zu-jian-he-han-shu-zu-jian-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h2 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h2><p>顾名思义，使用<code>es6</code>类的方式去编写组件,该类必须继承<code>React.Component</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h2><p>通过函数编写的形式去实现一个 <code>React</code> 组件，是 <code>React</code> 中定义组件最简单的方式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><table><thead><tr><th>类别</th><th>类组件</th><th>函数组件</th></tr></thead><tbody><tr><td>定义方式</td><td>使用 ES6 类语法</td><td>使用函数表达式</td></tr><tr><td>生命周期</td><td>支持生命周期,如 <code>componentDidMount</code>, <code>componentDidUpdate</code>, <code>componentWillUnmount</code> 等</td><td>没有直接的生命周期<br />通常使用 <code>useEffect</code> 和 <code>useReducer</code> 等 React Hooks 来代替类组件中的生命周期钩子</td></tr><tr><td>状态管理</td><td>可以使用 <code>this.state</code> 来管理内部状态。更适合需要复杂状态管理或需要对生命周期有更细粒度控制的场景</td><td>使用 <code>useState</code> 和 <code>useReducer</code> 等 React Hooks 来管理内部状态。</td></tr><tr><td>其他</td><td>类组件有更好继承性和扩展性的</td><td>函数组件是更简洁、更轻量的实现方式<br />优化了性能，因为它们本质上是无状态的。 <br /><br /> 函数组件可以直接使用 React Hooks，使得状态管理和副作用处理变得更加简洁和灵活。</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>类组件</strong>：更适合复杂状态管理或需要使用生命周期钩子的场景。<br><strong>函数组件</strong>：简洁、无状态，更推荐用于简单组件和现代 React 应用。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> react </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表</title>
      <link href="/2024/08/16/code/haxi/index/"/>
      <url>/2024/08/16/code/haxi/index/</url>
      
        <content type="html"><![CDATA[<p>哈希表（hash table），又称散列表，它通过建立键  <code>key</code>  与值  <code>value</code>  之间的映射，实现高效的元素查询。具体而言，我们向哈希表中输入一个键  <code>key</code> ，则可以在  O(1)  时间内获取对应的值  <code>value</code> 。</p><p>如图 6-1 所示，给定  n  个学生，每个学生都有“姓名”和“学号”两项数据。假如我们希望实现“输入一个学号，返回对应的姓名”的查询功能</p><p><img src="/images/haxi.png" alt="haxi.png"></p><h2 id="哈希表简单实现"><a href="#哈希表简单实现" class="headerlink" title="哈希表简单实现"></a><strong>哈希表简单实现</strong></h2><h3 id="除留余数法（Modulo-Method）"><a href="#除留余数法（Modulo-Method）" class="headerlink" title="除留余数法（Modulo Method）"></a>除留余数法（Modulo Method）</h3><ul><li>哈希值通过将键除以哈希表的大小，然后取余数得到。</li><li>哈希函数形式：<code>hash(key) = key % table_size</code></li><li>简单但容易产生冲突，尤其是在键的分布不均匀时。</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Pair</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ArrayHashMap</span> <span class="token punctuation">&#123;</span>  buckets<span class="token punctuation">;</span>  len<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">len <span class="token operator">=</span> <span class="token number">100</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>len <span class="token operator">=</span> len<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">hashFunc</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> key <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>len<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>buckets<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> pair <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pair <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pair<span class="token punctuation">.</span>val<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">delect</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> pair <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pair <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pair<span class="token punctuation">.</span>val<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buckets<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buckets<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buckets<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> pair <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pair <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>buckets<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态实现"><a href="#动态实现" class="headerlink" title="动态实现"></a>动态实现</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Pair</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HashMapChaining</span> <span class="token punctuation">&#123;</span>  size<span class="token punctuation">;</span> <span class="token comment">// 键值对数量</span>  capacity<span class="token punctuation">;</span> <span class="token comment">// 容量</span>  loadThres<span class="token punctuation">;</span> <span class="token comment">// 触发扩容的负载因子阈值</span>  extendRatio<span class="token punctuation">;</span> <span class="token comment">// 扩容倍数</span>  buckets<span class="token punctuation">;</span> <span class="token comment">// 桶数组</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadThres <span class="token operator">=</span> <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token number">3.0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>extendRatio <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">hashFunc</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> stringKey <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stringKey<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      hash <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">+</span> stringKey<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> hash<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">loadFactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadFactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadThres<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> pair <span class="token keyword">of</span> bucket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>pair<span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pair<span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    bucket<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> pair <span class="token keyword">of</span> bucket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>pair<span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> pair<span class="token punctuation">.</span>val<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> bucketsTmp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buckets<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">*=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>extendRatio<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>capacity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> bucket <span class="token keyword">of</span> bucketsTmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> pair <span class="token keyword">of</span> bucket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span>key<span class="token punctuation">,</span> pair<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucket<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        bucket<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">has</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Miniconda安装使用</title>
      <link href="/2024/06/14/code/miniconda-an-zhuang-shi-yong/"/>
      <url>/2024/06/14/code/miniconda-an-zhuang-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>Miniconda 是一种轻量级的 Python 发行版，它包含了 Conda 包管理系统和环境管理系统。以下是使用 Miniconda 的一些基本操作指南：</p><h3 id="安装-Miniconda"><a href="#安装-Miniconda" class="headerlink" title="安装 Miniconda"></a>安装 Miniconda</h3><p>如果你还没有安装 Miniconda，可以从官方网站下载并安装：<a href="https://docs.conda.io/en/latest/miniconda.html">Miniconda 下载页面</a>。</p><h3 id="配置-Miniconda"><a href="#配置-Miniconda" class="headerlink" title="配置 Miniconda"></a>配置 Miniconda</h3><ol><li><p><strong>更新 Conda</strong>:<br>首次安装后，建议更新 Conda 以确保你拥有最新版本。</p><pre class="line-numbers language-none"><code class="language-none">conda update conda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="创建和管理环境"><a href="#创建和管理环境" class="headerlink" title="创建和管理环境"></a>创建和管理环境</h3><ol><li><p><strong>创建新的环境</strong>:<br>使用 <code>conda create</code> 命令创建一个新的环境。你可以指定 Python 版本或需要的包。</p><pre class="line-numbers language-none"><code class="language-none">conda create --name myenv python&#x3D;3.9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>激活环境</strong>:<br>使用 <code>conda activate</code> 命令激活刚创建的环境。</p><pre class="line-numbers language-none"><code class="language-none">conda activate myenv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>停用环境</strong>:<br>使用 <code>conda deactivate</code> 命令停用当前激活的环境。</p><pre class="line-numbers language-none"><code class="language-none">conda deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>列出所有环境</strong>:<br>使用 <code>conda env list</code> 或 <code>conda info --envs</code> 查看所有创建的环境。</p><pre class="line-numbers language-none"><code class="language-none">conda env list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>删除环境</strong>:<br>使用 <code>conda remove</code> 命令删除指定的环境。</p><pre class="line-numbers language-none"><code class="language-none">conda remove --name myenv --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="安装和管理包"><a href="#安装和管理包" class="headerlink" title="安装和管理包"></a>安装和管理包</h3><ol><li><p><strong>安装包</strong>:<br>使用 <code>conda install</code> 命令在当前环境中安装包。</p><pre class="line-numbers language-none"><code class="language-none">conda install numpy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>更新包</strong>:<br>使用 <code>conda update</code> 命令更新指定的包。</p><pre class="line-numbers language-base" data-language="base"><code class="language-base">conda update numpy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>删除包</strong>:<br>使用 <code>conda remove</code> 命令删除指定的包。</p><pre class="line-numbers language-none"><code class="language-none">conda remove numpy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>列出已安装的包</strong>:<br>使用 <code>conda list</code> 查看当前环境中安装的所有包。</p><pre class="line-numbers language-none"><code class="language-none">conda list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="管理-Conda-配置"><a href="#管理-Conda-配置" class="headerlink" title="管理 Conda 配置"></a>管理 Conda 配置</h3><ol><li><p><strong>查看配置</strong>:<br>使用 <code>conda config --show</code> 查看 Conda 的当前配置。</p><pre class="line-numbers language-none"><code class="language-none">conda config --show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>添加频道</strong>:<br>使用 <code>conda config --add channels</code> 命令添加新的频道，以获取更多包。</p><pre class="line-numbers language-base" data-language="base"><code class="language-base">conda config --add channels conda-forge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>移除频道</strong>:<br>使用 <code>conda config --remove channels</code> 命令移除指定的频道。</p><pre class="line-numbers language-base" data-language="base"><code class="language-base">conda config --remove channels conda-forge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="示例工作流程"><a href="#示例工作流程" class="headerlink" title="示例工作流程"></a>示例工作流程</h3><ol><li><p><strong>创建环境并安装包</strong>:</p><pre class="line-numbers language-base" data-language="base"><code class="language-base">conda create --name data_science python&#x3D;3.9conda activate data_scienceconda install numpy pandas matplotlib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>使用环境</strong>:</p><pre class="line-numbers language-base" data-language="base"><code class="language-base">python -c &quot;import numpy as np; print(np.__version__)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>停用和删除环境</strong>:</p><pre class="line-numbers language-base" data-language="base"><code class="language-base">conda deactivateconda remove --name data_science --all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>通过这些基本命令和步骤，你可以高效地使用 Miniconda 来管理你的 Python 环境和包。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript的高阶用法</title>
      <link href="/2024/05/19/code/typescript-de-gao-jie-yong-fa/"/>
      <url>/2024/05/19/code/typescript-de-gao-jie-yong-fa/</url>
      
        <content type="html"><![CDATA[<p>记录和学习一些常用或需要了解的用法,下面是一些 TypeScript 的高级用法及其示例：</p><h3 id="1-泛型-Generics"><a href="#1-泛型-Generics" class="headerlink" title="1. 泛型 (Generics)"></a>1. 泛型 (Generics)</h3><p>泛型允许你定义函数、类或接口时，不指定具体的类型，而是使用类型参数。这样可以使代码更加灵活和可重用。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> output1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"Hello TypeScript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> output2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">identity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-交叉类型-Intersection-Types"><a href="#2-交叉类型-Intersection-Types" class="headerlink" title="2. 交叉类型 (Intersection Types)"></a>2. 交叉类型 (Intersection Types)</h3><p>交叉类型用于将多个类型合并为一个类型，表示一个对象可以同时拥有这些类型的所有成员。</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>  employeeId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">EmployeePerson</span> <span class="token operator">=</span> Person <span class="token operator">&amp;</span> Employee<span class="token punctuation">;</span><span class="token keyword">let</span> employee<span class="token operator">:</span> EmployeePerson <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>  employeeId<span class="token operator">:</span> <span class="token number">1234</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-联合类型-Union-Types"><a href="#3-联合类型-Union-Types" class="headerlink" title="3. 联合类型 (Union Types)"></a>3. 联合类型 (Union Types)</h3><p>联合类型允许一个值可以是几种类型之一。</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">format</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> input <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-类型守卫-Type-Guards"><a href="#4-类型守卫-Type-Guards" class="headerlink" title="4. 类型守卫 (Type Guards)"></a>4. 类型守卫 (Type Guards)</h3><p>类型守卫用于在运行时判断变量的类型，从而在代码中使用特定类型的方法和属性。</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">isString</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> value <span class="token keyword">is</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-映射类型-Mapped-Types"><a href="#5-映射类型-Mapped-Types" class="headerlink" title="5. 映射类型 (Mapped Types)"></a>5. 映射类型 (Mapped Types)</h3><p>映射类型允许你基于已有类型创建新类型，常用于转换对象属性的类型。</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">type</span> <span class="token class-name">ReadOnly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">ReadOnlyPerson</span> <span class="token operator">=</span> ReadOnly<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">let</span> person<span class="token operator">:</span> ReadOnlyPerson <span class="token operator">=</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// person.age = 31; // Error: Cannot assign to 'age' because it is a read-only property.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-条件类型-Conditional-Types"><a href="#6-条件类型-Conditional-Types" class="headerlink" title="6. 条件类型 (Conditional Types)"></a>6. 条件类型 (Conditional Types)</h3><p>条件类型根据条件表达式选择一种类型。</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">type</span> <span class="token class-name">TypeName<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span>  <span class="token operator">?</span> <span class="token string">"string"</span>  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span>  <span class="token operator">?</span> <span class="token string">"number"</span>  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">boolean</span></span>  <span class="token operator">?</span> <span class="token string">"boolean"</span>  <span class="token operator">:</span> <span class="token string">"object"</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "string"</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "number"</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T2</span></span> <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "boolean"</span><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T3</span></span> <span class="token operator">=</span> TypeName<span class="token operator">&lt;</span>object<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// "object"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-高级类型推断"><a href="#7-高级类型推断" class="headerlink" title="7. 高级类型推断"></a>7. 高级类型推断</h3><p>TypeScript 的类型推断能力非常强大，可以根据上下文自动推断出复杂类型。</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">makeTuple</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>first<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> second<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> tuple <span class="token operator">=</span> <span class="token function">makeTuple</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [string, number]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-模板字面量类型-Template-Literal-Types"><a href="#8-模板字面量类型-Template-Literal-Types" class="headerlink" title="8. 模板字面量类型 (Template Literal Types)"></a>8. 模板字面量类型 (Template Literal Types)</h3><p>模板字面量类型允许通过模板字符串创建类型。</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">type</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token string">"red"</span> <span class="token operator">|</span> <span class="token string">"green"</span> <span class="token operator">|</span> <span class="token string">"blue"</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">Brightness</span> <span class="token operator">=</span> <span class="token string">"light"</span> <span class="token operator">|</span> <span class="token string">"dark"</span><span class="token punctuation">;</span><span class="token keyword">type</span> <span class="token class-name">Theme</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Color<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Brightness<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> theme<span class="token operator">:</span> Theme<span class="token punctuation">;</span>theme <span class="token operator">=</span> <span class="token string">"red-light"</span><span class="token punctuation">;</span> <span class="token comment">// valid</span>theme <span class="token operator">=</span> <span class="token string">"blue-dark"</span><span class="token punctuation">;</span> <span class="token comment">// valid</span><span class="token comment">// theme = "yellow-light"; // Error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-索引类型和查找类型"><a href="#9-索引类型和查找类型" class="headerlink" title="9. 索引类型和查找类型"></a>9. 索引类型和查找类型</h3><p>索引类型用于访问另一种类型的属性。</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> <span class="token class-name">PersonName</span> <span class="token operator">=</span> Person<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// string</span><span class="token keyword">type</span> <span class="token class-name">PersonProperties</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Person<span class="token punctuation">;</span> <span class="token comment">// "name" | "age"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-Utility-Types"><a href="#10-Utility-Types" class="headerlink" title="10. Utility Types"></a>10. Utility Types</h3><p>TypeScript 提供了一些内置的实用类型，可以简化常见的类型操作。</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Partial: 将所有属性设为可选</span><span class="token keyword">type</span> <span class="token class-name">PartialPerson</span> <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">// Required: 将所有属性设为必需</span><span class="token keyword">type</span> <span class="token class-name">RequiredPerson</span> <span class="token operator">=</span> Required<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">// Readonly: 将所有属性设为只读</span><span class="token keyword">type</span> <span class="token class-name">ReadonlyPerson</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">// Pick: 选择特定属性</span><span class="token keyword">type</span> <span class="token class-name">PersonNameAndAge</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token operator">|</span> <span class="token string">"age"</span><span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些高级用法使得 TypeScript 能够表达更复杂的类型逻辑，增强类型检查的能力，从而提高代码的安全性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 预编译和后编译的区别</title>
      <link href="/2024/05/14/code/javascript/css-yu-bian-yi-he-hou-bian-yi-de-qu-bie/"/>
      <url>/2024/05/14/code/javascript/css-yu-bian-yi-he-hou-bian-yi-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h3 id="CSS-预编译和后编译的区别"><a href="#CSS-预编译和后编译的区别" class="headerlink" title="CSS 预编译和后编译的区别"></a>CSS 预编译和后编译的区别</h3><p>在现代前端开发中，CSS 的处理方式已经远远超出了简单的静态样式表。为了更高效地管理和优化 CSS，我们可以使用预编译（Pre-compilation）和后编译（Post-compilation）技术。本文将详细介绍这两者的区别，并讨论它们各自的优缺点及适用场景。</p><h3 id="一、CSS-预编译（Pre-compilation）"><a href="#一、CSS-预编译（Pre-compilation）" class="headerlink" title="一、CSS 预编译（Pre-compilation）"></a>一、CSS 预编译（Pre-compilation）</h3><p>CSS 预编译是指在开发阶段使用 CSS 预处理器（如 Sass、LESS、Stylus 等）将编写的预处理语言转换成标准的 CSS 文件。这些预处理语言提供了更强大的功能，如变量、嵌套规则、混合（mixins）和继承等，使 CSS 的编写更加简洁和可维护。</p><h3 id="常见的-CSS-预处理器："><a href="#常见的-CSS-预处理器：" class="headerlink" title="常见的 CSS 预处理器："></a>常见的 CSS 预处理器：</h3><ol><li><p><strong>Sass&#x2F;SCSS</strong>：</p><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token property"><span class="token variable">$primary-color</span></span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span><span class="token selector">body </span><span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$primary-color</span><span class="token punctuation">;</span>  <span class="token selector">.container </span><span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>LESS</strong>：</p><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token variable">@primary-color<span class="token punctuation">:</span></span> #333<span class="token punctuation">;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@primary-color</span><span class="token punctuation">;</span>  <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>Stylus</strong>：</p><pre class="line-numbers language-none"><code class="language-none">primary-color &#x3D; #333body  color primary-color  .container    margin 0 auto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul><li><strong>增强的功能</strong>：支持变量、嵌套、混合、继承等高级功能，使 CSS 更加灵活和易于维护。</li><li><strong>代码可读性和可维护性高</strong>：模块化的写法使得代码结构更清晰，易于管理。</li><li><strong>提高开发效率</strong>：简化了重复性的代码书写，通过预处理器可以自动生成复杂的 CSS。</li></ul><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul><li><strong>需要编译步骤</strong>：需要在开发过程中编译成标准的 CSS，增加了构建步骤和工具配置的复杂性。</li><li><strong>学习成本</strong>：开发者需要学习预处理语言的语法和使用方法。</li></ul><h3 id="二、CSS-后编译（Post-compilation）"><a href="#二、CSS-后编译（Post-compilation）" class="headerlink" title="二、CSS 后编译（Post-compilation）"></a>二、CSS 后编译（Post-compilation）</h3><p>CSS 后编译指的是在开发和构建阶段使用工具（如 PostCSS）对已经编写好的 CSS 文件进行进一步处理和优化。这些工具可以执行诸如自动添加浏览器前缀、压缩 CSS、转译现代 CSS 特性、分割和合并文件等任务。</p><h3 id="常见的后编译工具和插件："><a href="#常见的后编译工具和插件：" class="headerlink" title="常见的后编译工具和插件："></a>常见的后编译工具和插件：</h3><ol><li><strong>PostCSS</strong>：一个强大的工具，支持多种插件来处理和优化 CSS。<ul><li><strong>Autoprefixer</strong>：自动添加不同浏览器的前缀。<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> autoprefixer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"autoprefixer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">postcss</span><span class="token punctuation">(</span><span class="token punctuation">[</span>autoprefixer<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">"output.css"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>css<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>cssnano</strong>：压缩和优化 CSS 文件。<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> cssnano <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cssnano"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">postcss</span><span class="token punctuation">(</span><span class="token punctuation">[</span>cssnano<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">"output.min.css"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>css<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h3 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h3><ul><li><strong>代码优化</strong>：可以自动化地优化和压缩 CSS，减少文件大小，提高加载速度。</li><li><strong>提高兼容性</strong>：通过插件如 Autoprefixer 自动添加必要的浏览器前缀，确保跨浏览器兼容性。</li><li><strong>现代特性支持</strong>：可以使用插件转译最新的 CSS 特性，使其兼容旧版浏览器。</li></ul><h3 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h3><ul><li><strong>依赖工具链</strong>：需要配置和维护相应的工具链，增加了项目的复杂性。</li><li><strong>调试复杂性</strong>：生成的代码可能难以直接调试，需要额外的映射文件（source maps）来帮助调试。</li></ul><h3 id="三、应用场景及选择"><a href="#三、应用场景及选择" class="headerlink" title="三、应用场景及选择"></a>三、应用场景及选择</h3><ol><li><strong>小型项目</strong>：对于小型项目，可以选择使用 CSS 预编译。预处理器的简洁语法和增强功能可以显著提高开发效率和代码的可维护性。</li><li><strong>大型项目</strong>：对于大型项目，建议结合使用预编译和后编译。预处理器用于编写结构化和模块化的 CSS，而后编译工具则用于最终的优化和兼容性处理。</li><li><strong>团队协作</strong>：在团队开发中，预编译和后编译工具的结合使用可以确保代码的一致性和质量。预处理器帮助团队成员保持统一的编码风格，而后编译工具则确保生成的 CSS 具备最佳性能和兼容性。</li></ol><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>CSS 预编译和后编译在现代前端开发中各自扮演着重要的角色。预编译通过提供更强大的语言特性和结构化的代码组织，提升了开发效率和代码的可维护性；后编译则通过自动化优化和兼容性处理，确保生成的 CSS 文件具备最佳性能和广泛的浏览器支持。在实际开发中，根据项目需求和团队情况，选择合适的技术或结合使用，可以最大化地发挥它们的优势。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2024/03/27/code/javascript/bi-bao/"/>
      <url>/2024/03/27/code/javascript/bi-bao/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 中闭包是一种重要的编程概念，具有许多优点和一些缺点：</p><p><strong>优点：</strong></p><ol><li><strong>保持状态：</strong> 闭包可以捕获并保持其所在作用域的状态，即使函数执行完毕后，闭包仍然可以访问和修改其所捕获的变量，从而在后续调用中保持状态。</li><li><strong>数据封装和隐藏：</strong> 闭包允许将函数内部的数据隐藏在函数作用域内，从而实现了数据封装和隐藏。这有助于防止外部代码直接访问和修改内部数据，提高了程序的安全性和可维护性。</li><li><strong>实现模块化：</strong> 闭包可以用于实现模块化的代码结构，通过将一些函数和变量封装在闭包中，可以减少全局命名空间的污染，提高代码的可重用性和可维护性。</li><li><strong>实现私有变量和方法：</strong> 闭包可以用于模拟私有变量和方法，通过将变量和方法封装在闭包内部，外部代码无法直接访问，从而实现了一定程度的信息隐藏和封装。</li></ol><p><strong>缺点：</strong></p><ol><li><strong>内存泄漏：</strong> 闭包会持有对其所在作用域的引用，如果闭包中包含对大量对象的引用，并且闭包没有被正确释放，就可能导致内存泄漏的问题，使得不再需要的对象无法被垃圾回收。</li><li><strong>性能开销：</strong> 由于闭包需要捕获外部作用域的状态，因此在创建和执行闭包时可能会产生一些额外的性能开销，特别是在嵌套的闭包中或者捕获大量变量时。</li><li><strong>作用域链的影响：</strong> 闭包的作用域链可能会影响代码的性能和可读性，尤其是在处理嵌套闭包时，需要小心避免作用域链过长导致的性能问题。</li></ol><p>综上所述，JavaScript 中的闭包是一种强大的编程特性，可以带来许多优点，但同时也需要注意一些潜在的缺点，合理地使用闭包可以提高代码的灵活性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for in 与 for of</title>
      <link href="/2024/02/28/code/javascript/for-in-yu-for-of/"/>
      <url>/2024/02/28/code/javascript/for-in-yu-for-of/</url>
      
        <content type="html"><![CDATA[<h2 id="for-in-迭代对象的属性："><a href="#for-in-迭代对象的属性：" class="headerlink" title="for...in 迭代对象的属性："></a><strong><code>for...in</code> 迭代对象的属性：</strong></h2><ul><li><strong><code>for...in</code></strong> 循环用于迭代对象的可枚举属性，包括继承的可枚举属性。</li><li>在迭代过程中，它会遍历对象的所有可枚举属性名称，而不仅限于数组或类似数组的对象的索引。</li><li>注意：**<code>for...in</code>** 不建议用于迭代数组，因为它会枚举数组的所有可枚举属性，包括原型链上的属性，而且迭代顺序不一定是按照数组的顺序。</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：a, b, c</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="for-of-迭代可迭代对象的值："><a href="#for-of-迭代可迭代对象的值：" class="headerlink" title="for...of 迭代可迭代对象的值："></a><strong><code>for...of</code> 迭代可迭代对象的值：</strong></h2><ul><li><strong><code>for...of</code></strong> 循环用于迭代可迭代对象（如数组、Map、Set、字符串等）的元素值。</li><li>在迭代过程中，它会遍历对象的值，而不是键或索引。</li><li>对于普通的对象，它并不适用，因为普通对象不是可迭代的。</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：1, 2, 3</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总的来说，**<code>for...in</code>** 用于迭代对象的属性，而 <strong><code>for...of</code></strong> 用于迭代可迭代对象的值。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的react hooks</title>
      <link href="/2024/02/22/code/react/chang-yong-de-react-hooks/"/>
      <url>/2024/02/22/code/react/chang-yong-de-react-hooks/</url>
      
        <content type="html"><![CDATA[<p>React Hooks 提供了一系列常用的 API，这些 API 可以让你在函数组件中使用状态(state)、生命周期方法、上下文(context)等 React 特性。以下是一些常用的 React Hooks API：</p><ol><li><strong>useState</strong>: 用于在函数组件中添加状态。它返回一个包含状态值和更新状态值的函数。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><strong>useEffect</strong>: 用于在组件渲染后执行副作用操作，如数据获取、订阅、手动 DOM 操作等。它在每次渲染后都会执行。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// effect code</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// cleanup code</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>dependencies<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>useContext</strong>: 用于在函数组件中访问 React 上下文。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>MyContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><strong>useReducer</strong>: 用于在函数组件中管理复杂的状态逻辑。它类似于 Redux 中的 reducer。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li><strong>useCallback</strong>: 用于缓存回调函数，以便在依赖项不变时不重新创建该函数。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> memoizedCallback <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// callback code</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>dependencies<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li><strong>useMemo</strong>: 用于缓存计算结果，以便在依赖项不变时不重新计算。</li></ol><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> memoizedValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">computeExpensiveValue</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li><strong>useRef</strong>: 用于在函数组件之间保存可变值的引用，类似于 class 组件中的实例变量。</li></ol><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> refContainer <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li><strong>useImperativeHandle</strong>: 用于自定义暴露给父组件的实例值</li></ol><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>  ref<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token comment">// exposed instance methods/properties</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>dependencies<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9"><li><strong>useLayoutEffect</strong>: 类似于 useEffect，但会在所有 DOM 变更后同步调用 effect。它会在浏览器完成布局与绘制之后，但在任何新的渲染之前执行。</li></ol><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// effect code</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>dependencies<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> react </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react key的作用</title>
      <link href="/2020/12/07/code/react/react-key-de-zuo-yong/"/>
      <url>/2020/12/07/code/react/react-key-de-zuo-yong/</url>
      
        <content type="html"><![CDATA[<p>key 的主要作用用来减少没必要的 diff 算法对比,一个元素的 key 不需要在全局唯一,但在列表中需要保持唯一.</p><hr><ul><li><strong>唯一性要求</strong>： <strong><code>key</code></strong> 属性的值在同一列表中必须是唯一的。这样 React 才能准确地追踪每个列表项的变化。如果列表中的两个元素具有相同的 <strong><code>key</code></strong> ，React 将无法区分它们，可能会导致意外的行为或错误。</li><li><strong>稳定性</strong>： <strong><code>key</code></strong> 应该是稳定的，即在组件的生命周期内保持不变。在列表中重新排序或添加&#x2F;删除元素时，React 会根据 <strong><code>key</code></strong> 来判断哪些元素被修改了。如果 <strong><code>key</code></strong> 值不稳定，React 可能会错误地重新创建组件，导致组件状态丢失或不一致。</li><li><strong>性能优化</strong>：React 使用 <strong><code>key</code></strong> 来确定何时对列表进行重新排序、添加或删除操作。通过提供稳定的 <strong><code>key</code></strong> ，React 可以最小化 DOM 操作，并在必要时仅对必要的部分进行更新，从而提高性能。</li><li><strong>推荐用法</strong>：通常，使用列表项的唯一标识符作为 <strong><code>key</code></strong> 是一个好的选择。例如，在从数据库检索的数据中，可以使用每个项的唯一 ID 作为 <strong><code>key</code></strong> 。如果没有唯一标识符可用，也可以使用列表项的索引作为 <strong><code>key</code></strong> ，但这种做法可能会导致性能问题，因为 React 需要在重新排序时重新渲染整个列表。</li><li><strong>注意事项</strong>：在使用 <strong><code>key</code></strong> 时，需要避免使用随机生成的 <strong><code>key</code></strong> ，因为这会导致不稳定的 <strong><code>key</code></strong> 值。此外，尽量避免在组件中依赖于 <strong><code>key</code></strong> 属性进行逻辑处理，因为 <strong><code>key</code></strong> 只是 React 的一个特殊属性，并不会传递给组件。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> react </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react生命周期和执行顺序</title>
      <link href="/2020/11/30/code/react/react-sheng-ming-zhou-qi-he-zhi-xing-shun-xu/"/>
      <url>/2020/11/30/code/react/react-sheng-ming-zhou-qi-he-zhi-xing-shun-xu/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/react/zhouqi.jpeg" alt="周期.png"></p><h2 id="挂载和销毁阶段"><a href="#挂载和销毁阶段" class="headerlink" title="挂载和销毁阶段"></a>挂载和销毁阶段</h2><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor()"></a>constructor()</h3><p>constructor()中完成了 react 数据的初始化,它接受两个参数:props 和 content</p><h3 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount()"></a>componentWillMount()</h3><p>在渲染前调用,在客户端也在服务端。它代表的过程是组件已经经历了 constructor()初始化数据后，但是还未渲染 DOM 时。</p><h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount()"></a>componentDidMount()</h3><p>组件第一次渲染完成,此时 dom 节点已经生成</p><h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount()"></a>componentWillUnmount()</h3><p>组件卸载和数据的销毁</p><h2 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h2><h3 id="componentWillReceiveProps-nextProps"><a href="#componentWillReceiveProps-nextProps" class="headerlink" title="componentWillReceiveProps(nextProps)"></a>componentWillReceiveProps(nextProps)</h3><p>在接受父组件改变后的 props 需要重新渲染组件时用的比较多</p><p>接受一个参数 nextProps;</p><p>通过对比 nextProps 和 this.props,将 nextProps 的 state 为组件的 state,从而重新渲染组件</p><h3 id="componentWillUpdate-nextProps-nextState"><a href="#componentWillUpdate-nextProps-nextState" class="headerlink" title="componentWillUpdate(nextProps,nextState)"></a>componentWillUpdate(nextProps,nextState)</h3><p>组件进入重新渲染的流程,这里同样能拿到 nextProps 和 nextState</p><h3 id="componentDidUpdate-prevProps-PrevState"><a href="#componentDidUpdate-prevProps-PrevState" class="headerlink" title="componentDidUpdate(prevProps,PrevState)"></a>componentDidUpdate(prevProps,PrevState)</h3><p>组件更新完毕后,react 只会在第一次初始化成功会进入 componentDidMount(),之后每次渲染都会进入这个生命周期</p><h2 id="新增生命周期"><a href="#新增生命周期" class="headerlink" title="新增生命周期"></a>新增生命周期</h2><h3 id="getDerivcedStateFromProps-nextProps-nextState"><a href="#getDerivcedStateFromProps-nextProps-nextState" class="headerlink" title="getDerivcedStateFromProps(nextProps,nextState)"></a>getDerivcedStateFromProps(nextProps,nextState)</h3><p>代替 componentWillProps(),就是在根据当前的 props 来更新组件的 state，而不是去做其他一些让组件自身状态变得更加不可预测的事情。</p><h3 id="getSnapshotBeforeUpdate-prevProps-PrevState"><a href="#getSnapshotBeforeUpdate-prevProps-PrevState" class="headerlink" title="getSnapshotBeforeUpdate(prevProps,PrevState)"></a>getSnapshotBeforeUpdate(prevProps,PrevState)</h3><p>代替 componentWillUpdate()</p><p>componentDidUpdate()和 componentWillUpdate()中读取的 dom 元素状态不是安全的,因为这个值很可能失效了</p><p>getSnapshotBeforeUpdate 会在最终的 render 前调用,也就是是说在 getSnapshotBeforeUpdate 中读取的 dom 元素状态和 componentDidUpdate 是一致的</p><p>此生命周期返回的任何值都将作为参数传递给 componentDidUpdate</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> react </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react组件传参方式</title>
      <link href="/2020/11/30/code/react/react-zu-jian-chuan-can-fang-shi/"/>
      <url>/2020/11/30/code/react/react-zu-jian-chuan-can-fang-shi/</url>
      
        <content type="html"><![CDATA[<p>在 React 中，组件之间传递参数有几种常见的方式：</p><p><strong>Props 传递：</strong> 这是 React 中最常见的方式。你可以通过在组件的声明中传递 props 属性来传递参数。父组件可以向子组件传递数据，子组件通过 props 对象接收这些数据。例如：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// ParentComponent.js</span><span class="token keyword">import</span> ChildComponent <span class="token keyword">from</span> <span class="token string">"./ChildComponent"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ParentComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ChildComponent</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>John<span class="token punctuation">"</span></span> <span class="token attr-name">age</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">30</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ChildComponent.js</span><span class="token keyword">function</span> <span class="token function">ChildComponent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Name: </span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Age: </span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>State 管理：</strong> 你可以在组件内部使用 <strong><code>state</code></strong> 来管理数据，并通过 <strong><code>props</code></strong> 将这些数据传递给子组件。当父组件的状态发生变化时，会重新渲染子组件。这在需要在父组件中修改数据并通知子组件更新时很有用。</li><li><strong>Context API：</strong> 当组件嵌套较深，但多个组件需要访问相同的数据时，可以使用 Context API。Context 允许您将数据传递给组件树中的所有组件，而无需手动传递 props。这在跨多个层次的组件传递参数时很有用。</li><li><strong>Redux 或其他状态管理库：</strong> 当应用的状态变得更加复杂时，可以使用状态管理库（如 Redux）来管理应用的状态。Redux 允许您将应用程序的状态存储在一个单一的 store 中，并允许您以一种统一的方式在组件之间共享状态和派发操作。</li></ol><p>这些是 React 中常用的组件传递参数的方式，选择哪种方式取决于你的具体需求和应用程序的复杂性。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> react </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>header带有中文参数的问题</title>
      <link href="/2020/11/30/code/javascript/header-dai-you-zhong-wen-can-shu-de-wen-ti/"/>
      <url>/2020/11/30/code/javascript/header-dai-you-zhong-wen-can-shu-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>HTTP 请求可以包含中文参数，但由于 HTTP 协议的设计和传输的标准，中文等非 ASCII 字符需要经过编码处理才能正确传输和解析。这是因为 HTTP 请求中 URL 使用的字符集是 ASCII，直接传递中文字符可能导致服务器无法正确解析，甚至可能引发错误。</p><p>HTTP 请求可以包含中文参数，但由于 HTTP 协议的设计和传输的标准，中文等非 ASCII 字符需要经过编码处理才能正确传输和解析。这是因为 HTTP 请求中 URL 使用的字符集是 ASCII，直接传递中文字符可能导致服务器无法正确解析，甚至可能引发错误。</p><p>以下是原因和解决方式：</p><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><h3 id="URL-字符限制："><a href="#URL-字符限制：" class="headerlink" title="URL 字符限制："></a>URL 字符限制：</h3><p>URL 中的字符通常是基于 ASCII 编码的，而中文属于非 ASCII 字符，直接放入 URL 中可能导致解析问题。</p><h3 id="传输标准："><a href="#传输标准：" class="headerlink" title="传输标准："></a>传输标准：</h3><p>在 HTTP 请求中，URL 需要遵循 URI 规范，其中保留的字符（如&#x2F;、?、&#x3D;等）具有特定含义，非 ASCII 字符（如中文）需要编码为安全的格式。</p><h3 id="服务器解析问题："><a href="#服务器解析问题：" class="headerlink" title="服务器解析问题："></a>服务器解析问题：</h3><p>服务器解析 URL 时，通常会将其解码为指定的编码格式（如 UTF-8）。如果未进行正确的编码处理，可能会出现乱码或错误。</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><h3 id="URL-编码："><a href="#URL-编码：" class="headerlink" title="URL 编码："></a>URL 编码：</h3><p>使用 URL encoding（百分号编码）将中文字符转换为可传输的 ASCII 格式。例如：<br>中文字符<code>你好</code> → <code>%E4%BD%A0%E5%A5%BD</code><br>在前端可以使用 <code>encodeURIComponent</code> 进行编码，后端使用相应的解码函数解析。</p><p>示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> param <span class="token operator">=</span> <span class="token string">"你好"</span><span class="token punctuation">;</span><span class="token keyword">const</span> encodedParam <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "%E4%BD%A0%E5%A5%BD"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="设置字符集："><a href="#设置字符集：" class="headerlink" title="设置字符集："></a>设置字符集：</h3><p>确保客户端和服务器端使用一致的字符集（如 UTF-8），以避免因编码不匹配导致的问题。</p><h3 id="POST-请求中的-Body-参数："><a href="#POST-请求中的-Body-参数：" class="headerlink" title="POST 请求中的 Body 参数："></a>POST 请求中的 Body 参数：</h3><p>如果参数包含大量中文，建议使用 POST 方法，将参数放在请求体中，而不是 URL 中。请求体可以直接传递原始字符串，避免编码问题。</p><h3 id="检查服务器配置："><a href="#检查服务器配置：" class="headerlink" title="检查服务器配置："></a>检查服务器配置：</h3><p>确保服务器能够正确解析 URL 中的非 ASCII 字符。某些旧版本服务器可能需要额外配置支持 UTF-8 URL。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react fiber</title>
      <link href="/2020/11/30/code/react/react-fiber/"/>
      <url>/2020/11/30/code/react/react-fiber/</url>
      
        <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>是大量的同步计算任务阻塞了浏览器的 ui 渲染，默认情况下，js 运算，页面布局和页面绘制都是运行在浏览器的主进程中，他们是互斥的关系。如果 js 运算长时间占用主线程，页面就无法得到及时的更新。当我们调用<code>setState</code>更新页面的时候，react 回遍历应用的所有节点，计算出差异，然后更新 UI。整个过程是一气呵成，不能被打断。如果页面元素过多，就容易出现掉帧的现象。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>解决主线程一直被 js 运算占用这一问题的基本思路，将运算分割为多步骤，分批完成。也就是完成一部分任务之后，将控制权就给浏览器，让浏览器有时间进行页面渲染。等浏览器完成之后，再继续之前未完成的任务</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>react 框架内部的运作可以为分为三层</p><ul><li>Virtual DOM 层 结构层(描述页面长什么样)，js 结构层</li><li>Reconciler 层 负责调用组件生命周期方法，进行 DIff 等 调度阶段</li><li>Renderer 层 渲染层 比较常见的就是<code>ReactDom</code>和<code>ReactNative</code></li></ul><p>react 团队重写了 Reconciler 层，即组件生命周期和 diff 算法，react 团队命名为<code>fiber Reconciler</code>，建立了自己的组件调用栈，让 diff 计算可打断。</p><p>Fiber 其实实指的一种数据结构，它可以用一个纯 js 对象来表示:</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> fiber<span class="token operator">=</span><span class="token punctuation">&#123;</span>stateNode<span class="token punctuation">,</span> <span class="token comment">// 节点实例</span>child<span class="token punctuation">,</span>     <span class="token comment">// 子节点</span>sibing<span class="token punctuation">,</span>    <span class="token comment">// 兄弟节点</span><span class="token keyword">return</span>    <span class="token comment">// 父节点</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了区分，以前的 Reconiler 被命名为<code>Stack Reconiler</code> 。Stack Reconciler 运作的过程是不能被打断的，必须一条道走到黑：<br><img src="https://segmentfault.com/img/bVboIrF?w=1556&h=602" alt="示例1.png"><br>而 Fiber Reconiler 每执行一段时间，就会将控制权交回浏览器，可以分端执行：</p><p><img src="https://segmentfault.com/img/bVboJj4?w=1472&h=578" alt="示例2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> react </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 对象对比是否相等</title>
      <link href="/2020/11/26/code/javascript/js-dui-xiang-dui-bi-shi-fou-xiang-deng/"/>
      <url>/2020/11/26/code/javascript/js-dui-xiang-dui-bi-shi-fou-xiang-deng/</url>
      
        <content type="html"><![CDATA[<p>ES6 有一个方法来判断两个对象是否相等</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是这个相等，和我们平时要的相等可能不一样,这个方法判断的是 a 和 b 是不是同一个指针的对象,比如说</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是下面这种情况就不管用了</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们只需要两个对象的内容相同的时候，他就没效果了</p><p><strong>思路</strong><br>只要两个对象的名和键值都相同。那么两个对象的内容就相同了</p><ol><li>用 Object.getOwnPropertyNames 拿到对象的所以键名数组</li><li>比对键名数组的长度是否相等。否&#x3D;&gt;false。真&#x3D;&gt;3</li><li>比对键名对应的键值是否相等</li></ol><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">isObjectValueEqual</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> aProps <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> bProps <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>aProps<span class="token punctuation">.</span>length <span class="token operator">!=</span> bProps<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aProps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> propName <span class="token operator">=</span> aProps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> propA <span class="token operator">=</span> a<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> propB <span class="token operator">=</span> b<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>propA <span class="token operator">!==</span> propB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>粗略一看没问题,但是细心的同学发现如果键值也是对象的话,那这个方法就不管用了</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isObjectValueEqual</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候递归一下就可以解决了<br>注意，递归的时候要判断 prop 是不是 Object，然后会进入无限递归的死循环</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">isObjectValueEqual</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> aProps <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> bProps <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>aProps<span class="token punctuation">.</span>length <span class="token operator">!=</span> bProps<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aProps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> propName <span class="token operator">=</span> aProps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> propA <span class="token operator">=</span> a<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> propB <span class="token operator">=</span> b<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 2020-11-18更新，这里忽略了值为undefined的情况</span>    <span class="token comment">// 故先判断两边都有相同键名</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>propName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> propA <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isObjectValueEqual</span><span class="token punctuation">(</span>propA<span class="token punctuation">,</span> propB<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// return true     这里不能return ,后面的对象还没判断</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>propA <span class="token operator">!==</span> propB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isObjectValueEqual</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
