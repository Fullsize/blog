{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/images/haxi.png","path":"images/haxi.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","path":"medias/contact.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.js","path":"libs/prism/prism.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"source/images/react/zhouqi.jpeg","path":"images/react/zhouqi.jpeg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/CNAME","hash":"93930343e7c333c96a5eb112d017244d97798030","modified":1733738182006},{"_id":"source/_posts/Miniconda安装使用.md","hash":"51345c2055663326796a1542be60c048127a9c36","modified":1733827833349},{"_id":"source/_posts/CSS 预编译和后编译的区别.md","hash":"62bc438c925af006e90d8f941db699d077335397","modified":1733828189896},{"_id":"source/_posts/for in 与 for of.md","hash":"de03eb48dc700ffea170a01544caf96fe9f0f377","modified":1733828436381},{"_id":"source/_posts/闭包.md","hash":"80cabfebd3cf9291913124d0bf496ce6a2f8197f","modified":1733828300729},{"_id":"source/about/index.md","hash":"8c412ce41f88fadf0976a5ab148b56be69042845","modified":1733820168675},{"_id":"source/_posts/Tailwind CSS 介绍.md","hash":"c3c6fdf5b6577bcee367c56a979f9534ca8b65ec","modified":1733823217275},{"_id":"source/_posts/react18-d.md","hash":"dfdb41b594b8c3fc6fcd81cd8bd24bc2ec7e68f1","modified":1733822855867},{"_id":"source/contact/index.md","hash":"d7c7894ed88b91374132fcc00a26bfded073d296","modified":1733820272587},{"_id":"source/categories/index.md","hash":"7e3ec27f79b763e5a924a3a7b43e50f77b8523d4","modified":1733820074507},{"_id":"source/_posts/haxi/index.md","hash":"40e2a81ec83a8bf46ac17ff1823f561072d02d2d","modified":1733829738640},{"_id":"source/images/haxi.png","hash":"c843f81f069e0e044740f77c6646faca1f3dee97","modified":1733829721591},{"_id":"source/tags/index.md","hash":"4767c7493033a7d163a4e9a71395c985779c5c05","modified":1733820099851},{"_id":"source/_posts/haxi/image.png","hash":"c843f81f069e0e044740f77c6646faca1f3dee97","modified":1733828935826},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1606456707000},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1606456707000},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"a71ab3da4c846581f0646657e5c93c143adabcce","modified":1735452730371},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/README.md","hash":"0366f3d50b18d095b0581e7b5974e3283d693884","modified":1606456707000},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"089de96e2165ea2a8a3adf38ebda85b65e7f716e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"19d62e521c4253496db559478db5164ddfd2480e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"92892bab5578ccf758ce57e19fca08be80d0d5b9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"974b44eb3e343cd3ee57ebad34bbb0eff4184400","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"28617bf2a35a4269eba6df466acd174e416d2d1e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/.DS_Store","hash":"ea343f4ad579d7dcb35877b7dbfd23a607d4ff4b","modified":1733821592817},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"3be24e4c370671eda53bdfd99fb748f4a22948ba","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"880ebaf78a947631a38ad0b3d65201315845a264","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1606456707000},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"a630f6e8643904073dce9eada57b5c16c4dba5e2","modified":1733827210810},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"f435cea65b3727ece70d24584b85627366a89543","modified":1735291116043},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1733827214798},{"_id":"themes/hexo-theme-matery/source/libs/.DS_Store","hash":"14514f467415b1b96ff9e424cf4848e8c465404e","modified":1733824779831},{"_id":"themes/hexo-theme-matery/source/medias/.DS_Store","hash":"775d4e2136859380c42cc31de0b8024b93a71576","modified":1733821118321},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/contact.png","hash":"443ea472dd49b74d9d70295837eb381c8c64f02c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"97caf40da38b70288fea87bdb0c534d0997f95ca","modified":1733827219317},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/reward/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1733821172358},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"2a83a3cd166cbc16012c0c8b59b5da88da4319cd","modified":1733821007000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"96f22cc755d5fb92a5351c7e1eb0cff9d0f4ce02","modified":1733821024000},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.js","hash":"329f2e0c3cce6b52b0bfa196b716078cbd93d6ec","modified":1707236624000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1606456707000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1606456707000},{"_id":"source/_posts/code/Miniconda安装使用.md","hash":"51345c2055663326796a1542be60c048127a9c36","modified":1735291116033},{"_id":"source/_posts/code/Tailwind CSS 介绍.md","hash":"637e2e963578036b77c349a1e59b09ed2e911847","modified":1735452639443},{"_id":"source/_posts/code/haxi/index.md","hash":"0a84f725d850f1d49f9b22e8d8ff6d032910f5c3","modified":1735291116034},{"_id":"source/_posts/code/前端项目立项流程.md","hash":"718b1242e18ffad916651a4374aa7534f4696332","modified":1735291116034},{"_id":"source/_posts/code/react/react18-d.md","hash":"dfdb41b594b8c3fc6fcd81cd8bd24bc2ec7e68f1","modified":1735291116034},{"_id":"source/_posts/code/haxi/image.png","hash":"c843f81f069e0e044740f77c6646faca1f3dee97","modified":1735291116034},{"_id":"source/_posts/code/react/class组件和函数组件的区别.md","hash":"67ed01614ae06b519ff65417afd64c0c158de0ae","modified":1735291116033},{"_id":"source/_posts/code/javascript/CSS 预编译和后编译的区别.md","hash":"62bc438c925af006e90d8f941db699d077335397","modified":1735291116033},{"_id":"source/_posts/code/javascript/闭包.md","hash":"80cabfebd3cf9291913124d0bf496ce6a2f8197f","modified":1735291116034},{"_id":"source/_posts/code/javascript/for in 与 for of.md","hash":"de03eb48dc700ffea170a01544caf96fe9f0f377","modified":1735291116033},{"_id":"source/_posts/code/react/常用的react hooks.md","hash":"aa18a4acb920a2f31178f28b8ec54bf204b13ff8","modified":1735293082031},{"_id":"source/images/react/zhouqi.jpeg","hash":"8249612cb5d4fd1150d41f04f538d4763d4d5b8a","modified":1735451841028},{"_id":"source/_posts/code/react/react生命周期和执行顺序.md","hash":"1b23875406da9272e98d1e72829e73d7ef567e0a","modified":1735451956096},{"_id":"source/_posts/code/typescript的高阶用法.md","hash":"76d7b3fc95b75d9ffbf5abccf7f3fbd927ae4cdb","modified":1735293711279},{"_id":"source/_posts/code/javascript/js 对象对比是否相等.md","hash":"ee1051b34b08da39df0910103053910dec874263","modified":1735294951570},{"_id":"source/_posts/code/javascript/header带有中文参数的问题.md","hash":"854fbde955b5beb5f73c7e929df307611b1f278e","modified":1735452584708},{"_id":"source/_posts/code/react/react组件传参方式.md","hash":"b4f40e1dea23f40cfe292e4941edfcba47034b7a","modified":1735452067872},{"_id":"source/_posts/code/常见面试题.md","hash":"3d0cba3c0615f73950ac028fcfbfd12639ad4436","modified":1736570724462},{"_id":"source/_posts/code/react/react key的作用.md","hash":"d5bb2a3270861e2a625ae665c11be1488ca54f06","modified":1735470305612},{"_id":"source/_posts/code/react/react fiber.md","hash":"5ad48c3d81c83284dd19e106bc6b9ca964d025e0","modified":1735453033887}],"Category":[{"name":"技术","_id":"cm4idgztg0004qdu2h4jt3qn1"},{"name":"学习","parent":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm4idgztq000iqdu2a37z84c2"}],"Data":[],"Page":[{"title":"about","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ntype: \"about\"\nlayout: \"about\"\n---\n","date":"2024-12-10T08:42:48.675Z","updated":"2024-12-10T08:42:48.675Z","path":"about/index.html","comments":1,"_id":"cm4idgzt60000qdu2egi254ai","content":"","excerpt":"","more":""},{"title":"contact","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ntype: \"contact\"\nlayout: \"contact\"\n---\n","date":"2024-12-10T08:44:32.587Z","updated":"2024-12-10T08:44:32.587Z","path":"contact/index.html","comments":1,"_id":"cm4idgztd0002qdu26jntci4n","content":"","excerpt":"","more":""},{"title":"categories","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\nlayout: \"categories\"\n---\n","date":"2024-12-10T08:41:14.507Z","updated":"2024-12-10T08:41:14.507Z","path":"categories/index.html","comments":1,"_id":"cm4idgzti0006qdu21mhbba3h","content":"","excerpt":"","more":""},{"title":"tags","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\nlayout: \"tags\"\n---\n","date":"2024-12-10T08:41:39.851Z","updated":"2024-12-10T08:41:39.851Z","path":"tags/index.html","comments":1,"_id":"cm4idgztk0008qdu2fyuse96n","content":"","excerpt":"","more":""}],"Post":[{"title":"Miniconda安装使用","date":"2024-06-14T13:20:00.000Z","_content":"\nMiniconda 是一种轻量级的 Python 发行版，它包含了 Conda 包管理系统和环境管理系统。以下是使用 Miniconda 的一些基本操作指南：\n\n### 安装 Miniconda\n\n如果你还没有安装 Miniconda，可以从官方网站下载并安装：[Miniconda 下载页面](https://docs.conda.io/en/latest/miniconda.html)。\n\n### 配置 Miniconda\n\n1.  **更新 Conda**:\n    首次安装后，建议更新 Conda 以确保你拥有最新版本。\n\n    ```\n    conda update conda\n    ```\n\n### 创建和管理环境\n\n1.  **创建新的环境**:\n    使用 `conda create` 命令创建一个新的环境。你可以指定 Python 版本或需要的包。\n\n    ```\n    conda create --name myenv python=3.9\n    ```\n\n2.  **激活环境**:\n    使用 `conda activate` 命令激活刚创建的环境。\n\n    ```\n    conda activate myenv\n\n    ```\n\n3.  **停用环境**:\n    使用 `conda deactivate` 命令停用当前激活的环境。\n\n    ```\n    conda deactivate\n    ```\n\n4.  **列出所有环境**:\n    使用 `conda env list` 或 `conda info --envs` 查看所有创建的环境。\n\n    ```\n    conda env list\n    ```\n\n5.  **删除环境**:\n    使用 `conda remove` 命令删除指定的环境。\n\n    ```\n    conda remove --name myenv --all\n    ```\n\n### 安装和管理包\n\n1.  **安装包**:\n    使用 `conda install` 命令在当前环境中安装包。\n\n    ```\n    conda install numpy\n    ```\n\n2.  **更新包**:\n    使用 `conda update` 命令更新指定的包。\n\n    ```base\n    conda update numpy\n    ```\n\n3.  **删除包**:\n    使用 `conda remove` 命令删除指定的包。\n\n    ```\n    conda remove numpy\n    ```\n\n4.  **列出已安装的包**:\n    使用 `conda list` 查看当前环境中安装的所有包。\n\n    ```\n    conda list\n    ```\n\n### 管理 Conda 配置\n\n1.  **查看配置**:\n    使用 `conda config --show` 查看 Conda 的当前配置。\n\n    ```\n    conda config --show\n\n    ```\n\n2.  **添加频道**:\n    使用 `conda config --add channels` 命令添加新的频道，以获取更多包。\n\n    ```base\n    conda config --add channels conda-forge\n\n\n\n    ```\n\n3.  **移除频道**:\n    使用 `conda config --remove channels` 命令移除指定的频道。\n\n    ```base\n    conda config --remove channels conda-forge\n    ```\n\n### 示例工作流程\n\n1. **创建环境并安装包**:\n\n   ```base\n   conda create --name data_science python=3.9\n   conda activate data_science\n   conda install numpy pandas matplotlib\n\n   ```\n\n2. **使用环境**:\n\n   ```base\n   python -c \"import numpy as np; print(np.__version__)\"\n\n   ```\n\n3. **停用和删除环境**:\n\n   ```base\n   conda deactivate\n   conda remove --name data_science --all\n\n   ```\n\n通过这些基本命令和步骤，你可以高效地使用 Miniconda 来管理你的 Python 环境和包。\n","source":"_posts/code/Miniconda安装使用.md","raw":"---\ntitle: Miniconda安装使用\ndate: 2024-6-14 21:20\ntags:\n  - python\n  - 库\ncategories:\n  - 技术\n  - 学习\n---\n\nMiniconda 是一种轻量级的 Python 发行版，它包含了 Conda 包管理系统和环境管理系统。以下是使用 Miniconda 的一些基本操作指南：\n\n### 安装 Miniconda\n\n如果你还没有安装 Miniconda，可以从官方网站下载并安装：[Miniconda 下载页面](https://docs.conda.io/en/latest/miniconda.html)。\n\n### 配置 Miniconda\n\n1.  **更新 Conda**:\n    首次安装后，建议更新 Conda 以确保你拥有最新版本。\n\n    ```\n    conda update conda\n    ```\n\n### 创建和管理环境\n\n1.  **创建新的环境**:\n    使用 `conda create` 命令创建一个新的环境。你可以指定 Python 版本或需要的包。\n\n    ```\n    conda create --name myenv python=3.9\n    ```\n\n2.  **激活环境**:\n    使用 `conda activate` 命令激活刚创建的环境。\n\n    ```\n    conda activate myenv\n\n    ```\n\n3.  **停用环境**:\n    使用 `conda deactivate` 命令停用当前激活的环境。\n\n    ```\n    conda deactivate\n    ```\n\n4.  **列出所有环境**:\n    使用 `conda env list` 或 `conda info --envs` 查看所有创建的环境。\n\n    ```\n    conda env list\n    ```\n\n5.  **删除环境**:\n    使用 `conda remove` 命令删除指定的环境。\n\n    ```\n    conda remove --name myenv --all\n    ```\n\n### 安装和管理包\n\n1.  **安装包**:\n    使用 `conda install` 命令在当前环境中安装包。\n\n    ```\n    conda install numpy\n    ```\n\n2.  **更新包**:\n    使用 `conda update` 命令更新指定的包。\n\n    ```base\n    conda update numpy\n    ```\n\n3.  **删除包**:\n    使用 `conda remove` 命令删除指定的包。\n\n    ```\n    conda remove numpy\n    ```\n\n4.  **列出已安装的包**:\n    使用 `conda list` 查看当前环境中安装的所有包。\n\n    ```\n    conda list\n    ```\n\n### 管理 Conda 配置\n\n1.  **查看配置**:\n    使用 `conda config --show` 查看 Conda 的当前配置。\n\n    ```\n    conda config --show\n\n    ```\n\n2.  **添加频道**:\n    使用 `conda config --add channels` 命令添加新的频道，以获取更多包。\n\n    ```base\n    conda config --add channels conda-forge\n\n\n\n    ```\n\n3.  **移除频道**:\n    使用 `conda config --remove channels` 命令移除指定的频道。\n\n    ```base\n    conda config --remove channels conda-forge\n    ```\n\n### 示例工作流程\n\n1. **创建环境并安装包**:\n\n   ```base\n   conda create --name data_science python=3.9\n   conda activate data_science\n   conda install numpy pandas matplotlib\n\n   ```\n\n2. **使用环境**:\n\n   ```base\n   python -c \"import numpy as np; print(np.__version__)\"\n\n   ```\n\n3. **停用和删除环境**:\n\n   ```base\n   conda deactivate\n   conda remove --name data_science --all\n\n   ```\n\n通过这些基本命令和步骤，你可以高效地使用 Miniconda 来管理你的 Python 环境和包。\n","slug":"code/Miniconda安装使用","published":1,"updated":"2024-12-27T09:18:36.033Z","comments":1,"layout":"post","photos":[],"_id":"cm56jrk0s00003zp9bgmd18db","content":"<p>Miniconda 是一种轻量级的 Python 发行版，它包含了 Conda 包管理系统和环境管理系统。以下是使用 Miniconda 的一些基本操作指南：</p>\n<h3 id=\"安装-Miniconda\"><a href=\"#安装-Miniconda\" class=\"headerlink\" title=\"安装 Miniconda\"></a>安装 Miniconda</h3><p>如果你还没有安装 Miniconda，可以从官方网站下载并安装：<a href=\"https://docs.conda.io/en/latest/miniconda.html\">Miniconda 下载页面</a>。</p>\n<h3 id=\"配置-Miniconda\"><a href=\"#配置-Miniconda\" class=\"headerlink\" title=\"配置 Miniconda\"></a>配置 Miniconda</h3><ol>\n<li><p><strong>更新 Conda</strong>:<br>首次安装后，建议更新 Conda 以确保你拥有最新版本。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda update conda<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"创建和管理环境\"><a href=\"#创建和管理环境\" class=\"headerlink\" title=\"创建和管理环境\"></a>创建和管理环境</h3><ol>\n<li><p><strong>创建新的环境</strong>:<br>使用 <code>conda create</code> 命令创建一个新的环境。你可以指定 Python 版本或需要的包。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda create --name myenv python&#x3D;3.9<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>激活环境</strong>:<br>使用 <code>conda activate</code> 命令激活刚创建的环境。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda activate myenv\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>停用环境</strong>:<br>使用 <code>conda deactivate</code> 命令停用当前激活的环境。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda deactivate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>列出所有环境</strong>:<br>使用 <code>conda env list</code> 或 <code>conda info --envs</code> 查看所有创建的环境。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda env list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>删除环境</strong>:<br>使用 <code>conda remove</code> 命令删除指定的环境。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda remove --name myenv --all<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"安装和管理包\"><a href=\"#安装和管理包\" class=\"headerlink\" title=\"安装和管理包\"></a>安装和管理包</h3><ol>\n<li><p><strong>安装包</strong>:<br>使用 <code>conda install</code> 命令在当前环境中安装包。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda install numpy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>更新包</strong>:<br>使用 <code>conda update</code> 命令更新指定的包。</p>\n<pre class=\"line-numbers language-base\" data-language=\"base\"><code class=\"language-base\">conda update numpy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>删除包</strong>:<br>使用 <code>conda remove</code> 命令删除指定的包。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda remove numpy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>列出已安装的包</strong>:<br>使用 <code>conda list</code> 查看当前环境中安装的所有包。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"管理-Conda-配置\"><a href=\"#管理-Conda-配置\" class=\"headerlink\" title=\"管理 Conda 配置\"></a>管理 Conda 配置</h3><ol>\n<li><p><strong>查看配置</strong>:<br>使用 <code>conda config --show</code> 查看 Conda 的当前配置。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda config --show\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>添加频道</strong>:<br>使用 <code>conda config --add channels</code> 命令添加新的频道，以获取更多包。</p>\n<pre class=\"line-numbers language-base\" data-language=\"base\"><code class=\"language-base\">conda config --add channels conda-forge\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>移除频道</strong>:<br>使用 <code>conda config --remove channels</code> 命令移除指定的频道。</p>\n<pre class=\"line-numbers language-base\" data-language=\"base\"><code class=\"language-base\">conda config --remove channels conda-forge<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"示例工作流程\"><a href=\"#示例工作流程\" class=\"headerlink\" title=\"示例工作流程\"></a>示例工作流程</h3><ol>\n<li><p><strong>创建环境并安装包</strong>:</p>\n<pre class=\"line-numbers language-base\" data-language=\"base\"><code class=\"language-base\">conda create --name data_science python&#x3D;3.9\nconda activate data_science\nconda install numpy pandas matplotlib\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>使用环境</strong>:</p>\n<pre class=\"line-numbers language-base\" data-language=\"base\"><code class=\"language-base\">python -c &quot;import numpy as np; print(np.__version__)&quot;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>停用和删除环境</strong>:</p>\n<pre class=\"line-numbers language-base\" data-language=\"base\"><code class=\"language-base\">conda deactivate\nconda remove --name data_science --all\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<p>通过这些基本命令和步骤，你可以高效地使用 Miniconda 来管理你的 Python 环境和包。</p>\n","excerpt":"","more":"<p>Miniconda 是一种轻量级的 Python 发行版，它包含了 Conda 包管理系统和环境管理系统。以下是使用 Miniconda 的一些基本操作指南：</p>\n<h3 id=\"安装-Miniconda\"><a href=\"#安装-Miniconda\" class=\"headerlink\" title=\"安装 Miniconda\"></a>安装 Miniconda</h3><p>如果你还没有安装 Miniconda，可以从官方网站下载并安装：<a href=\"https://docs.conda.io/en/latest/miniconda.html\">Miniconda 下载页面</a>。</p>\n<h3 id=\"配置-Miniconda\"><a href=\"#配置-Miniconda\" class=\"headerlink\" title=\"配置 Miniconda\"></a>配置 Miniconda</h3><ol>\n<li><p><strong>更新 Conda</strong>:<br>首次安装后，建议更新 Conda 以确保你拥有最新版本。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda update conda<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"创建和管理环境\"><a href=\"#创建和管理环境\" class=\"headerlink\" title=\"创建和管理环境\"></a>创建和管理环境</h3><ol>\n<li><p><strong>创建新的环境</strong>:<br>使用 <code>conda create</code> 命令创建一个新的环境。你可以指定 Python 版本或需要的包。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda create --name myenv python&#x3D;3.9<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>激活环境</strong>:<br>使用 <code>conda activate</code> 命令激活刚创建的环境。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda activate myenv\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>停用环境</strong>:<br>使用 <code>conda deactivate</code> 命令停用当前激活的环境。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda deactivate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>列出所有环境</strong>:<br>使用 <code>conda env list</code> 或 <code>conda info --envs</code> 查看所有创建的环境。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda env list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>删除环境</strong>:<br>使用 <code>conda remove</code> 命令删除指定的环境。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda remove --name myenv --all<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"安装和管理包\"><a href=\"#安装和管理包\" class=\"headerlink\" title=\"安装和管理包\"></a>安装和管理包</h3><ol>\n<li><p><strong>安装包</strong>:<br>使用 <code>conda install</code> 命令在当前环境中安装包。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda install numpy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>更新包</strong>:<br>使用 <code>conda update</code> 命令更新指定的包。</p>\n<pre class=\"line-numbers language-base\" data-language=\"base\"><code class=\"language-base\">conda update numpy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>删除包</strong>:<br>使用 <code>conda remove</code> 命令删除指定的包。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda remove numpy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>列出已安装的包</strong>:<br>使用 <code>conda list</code> 查看当前环境中安装的所有包。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"管理-Conda-配置\"><a href=\"#管理-Conda-配置\" class=\"headerlink\" title=\"管理 Conda 配置\"></a>管理 Conda 配置</h3><ol>\n<li><p><strong>查看配置</strong>:<br>使用 <code>conda config --show</code> 查看 Conda 的当前配置。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda config --show\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>添加频道</strong>:<br>使用 <code>conda config --add channels</code> 命令添加新的频道，以获取更多包。</p>\n<pre class=\"line-numbers language-base\" data-language=\"base\"><code class=\"language-base\">conda config --add channels conda-forge\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>移除频道</strong>:<br>使用 <code>conda config --remove channels</code> 命令移除指定的频道。</p>\n<pre class=\"line-numbers language-base\" data-language=\"base\"><code class=\"language-base\">conda config --remove channels conda-forge<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"示例工作流程\"><a href=\"#示例工作流程\" class=\"headerlink\" title=\"示例工作流程\"></a>示例工作流程</h3><ol>\n<li><p><strong>创建环境并安装包</strong>:</p>\n<pre class=\"line-numbers language-base\" data-language=\"base\"><code class=\"language-base\">conda create --name data_science python&#x3D;3.9\nconda activate data_science\nconda install numpy pandas matplotlib\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>使用环境</strong>:</p>\n<pre class=\"line-numbers language-base\" data-language=\"base\"><code class=\"language-base\">python -c &quot;import numpy as np; print(np.__version__)&quot;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><strong>停用和删除环境</strong>:</p>\n<pre class=\"line-numbers language-base\" data-language=\"base\"><code class=\"language-base\">conda deactivate\nconda remove --name data_science --all\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<p>通过这些基本命令和步骤，你可以高效地使用 Miniconda 来管理你的 Python 环境和包。</p>\n"},{"title":"Tailwind CSS 介绍","_content":"\n# Tailwind CSS 介绍\n\n### 什么是 Tailwind CSS?\n\nTailwind CSS 是一个功能强大的实用工具优先（utility-first）的 CSS 框架，允许开发者通过使用预定义的 CSS 类来快速构建自定义的用户界面。与传统的 CSS 框架不同，Tailwind 并没有预设的组件，而是提供了一套全面的、低级的实用工具类，可以直接在 HTML 中使用来构建任何设计。\n\n### Tailwind CSS 的核心概念\n\n1. **实用工具优先（Utility-First）**:\n   Tailwind 提供大量的低级实用工具类，如 `flex`、`pt-4`、`text-center` 和 `rotate-90`，这些类可以组合起来，直接在 HTML 中构建复杂的设计，而不需要编写自定义的 CSS。\n2. **配置驱动（Configuration-Driven）**:\n   通过 `tailwind.config.js` 文件，开发者可以完全自定义 Tailwind 的默认主题、颜色、间距等。这样可以保证设计的一致性，同时允许灵活的定制。\n3. **响应式设计（Responsive Design）**:\n   Tailwind 内置了对响应式设计的支持，使用诸如 `sm:`, `md:`, `lg:`, `xl:` 和 `2xl:` 前缀，开发者可以轻松地为不同屏幕尺寸定义不同的样式。\n4. **状态变体（State Variants）**:\n   Tailwind 提供诸如 `hover:`, `focus:`, `active:`, `disabled:` 等状态变体，帮助开发者轻松地处理用户交互状态。\n5. **即用即弃（PurgeCSS）**:\n   Tailwind 与 PurgeCSS 集成，允许开发者在生产环境中删除未使用的 CSS 类，从而减少最终 CSS 文件的大小，提高性能。\n\n### 为什么选择 Tailwind CSS？\n\n1. **快速开发**:\n   使用 Tailwind，开发者可以显著减少编写 CSS 的时间，通过组合现有的实用工具类，快速实现设计。\n2. **高度可定制**:\n   Tailwind 的配置文件使得定制变得简单，开发者可以根据项目需求，轻松调整默认设置，以符合品牌或设计规范。\n3. **一致性**:\n   Tailwind 强调在整个项目中使用一致的设计语言，避免了传统 CSS 中的命名冲突和样式覆盖问题。\n4. **维护简单**:\n   由于所有样式都是由类名直接定义在 HTML 中，Tailwind 使得项目的样式更加直观和易于维护。\n\n### 基本使用方法\n\n1.  **安装 Tailwind CSS**:\n    使用 npm 安装 Tailwind：\n    `bash\nnpm install tailwindcss\nnpx tailwindcss init\n`\n2.  **配置 Tailwind**:\n    在 `tailwind.config.js` 文件中，可以定义自定义配置：\n\n```js\nmodule.exports = {\n  content: [\"./src/**/*.{html,js}\"],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n1.  **使用 Tailwind 类**:\n    在 HTML 文件中直接使用 Tailwind 提供的类：\n\n    ```html\n    <div class=\"bg-blue-500 text-white p-4 rounded-lg shadow-lg\">\n      你好，Tailwind CSS!\n    </div>\n    ```\n\n### Tailwind CSS 的实战应用\n\n以下是一个使用 Tailwind CSS 构建的简单页面示例：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Tailwind CSS 示例</title>\n    <link\n      href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\"\n      rel=\"stylesheet\"\n    />\n  </head>\n  <body class=\"bg-gray-100 flex items-center justify-center h-screen\">\n    <div class=\"bg-white p-6 rounded-lg shadow-lg max-w-sm\">\n      <h2 class=\"text-2xl font-bold mb-4 text-gray-800\">\n        欢迎使用 Tailwind CSS\n      </h2>\n      <p class=\"text-gray-600 mb-4\">\n        这是一个使用 Tailwind CSS\n        构建的简单示例。它展示了如何使用实用工具类来快速构建美观的 UI。\n      </p>\n      <button\n        class=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n      >\n        点击我\n      </button>\n    </div>\n  </body>\n</html>\n```\n\n### 总结\n\nTailwind CSS 是一个现代、高效的 CSS 框架，它通过提供丰富的实用工具类，使得开发者可以快速构建响应式和一致的用户界面。通过学习和使用 Tailwind CSS，您将能够显著提高开发效率，减少样式冲突，并创造出高度可定制和维护的设计。\n","source":"_posts/code/Tailwind CSS 介绍.md","raw":"---\ntitle: Tailwind CSS 介绍\ntags:\n  - javascript\n  - 库\ncategories:\n  - 技术\n  - 学习\n---\n\n# Tailwind CSS 介绍\n\n### 什么是 Tailwind CSS?\n\nTailwind CSS 是一个功能强大的实用工具优先（utility-first）的 CSS 框架，允许开发者通过使用预定义的 CSS 类来快速构建自定义的用户界面。与传统的 CSS 框架不同，Tailwind 并没有预设的组件，而是提供了一套全面的、低级的实用工具类，可以直接在 HTML 中使用来构建任何设计。\n\n### Tailwind CSS 的核心概念\n\n1. **实用工具优先（Utility-First）**:\n   Tailwind 提供大量的低级实用工具类，如 `flex`、`pt-4`、`text-center` 和 `rotate-90`，这些类可以组合起来，直接在 HTML 中构建复杂的设计，而不需要编写自定义的 CSS。\n2. **配置驱动（Configuration-Driven）**:\n   通过 `tailwind.config.js` 文件，开发者可以完全自定义 Tailwind 的默认主题、颜色、间距等。这样可以保证设计的一致性，同时允许灵活的定制。\n3. **响应式设计（Responsive Design）**:\n   Tailwind 内置了对响应式设计的支持，使用诸如 `sm:`, `md:`, `lg:`, `xl:` 和 `2xl:` 前缀，开发者可以轻松地为不同屏幕尺寸定义不同的样式。\n4. **状态变体（State Variants）**:\n   Tailwind 提供诸如 `hover:`, `focus:`, `active:`, `disabled:` 等状态变体，帮助开发者轻松地处理用户交互状态。\n5. **即用即弃（PurgeCSS）**:\n   Tailwind 与 PurgeCSS 集成，允许开发者在生产环境中删除未使用的 CSS 类，从而减少最终 CSS 文件的大小，提高性能。\n\n### 为什么选择 Tailwind CSS？\n\n1. **快速开发**:\n   使用 Tailwind，开发者可以显著减少编写 CSS 的时间，通过组合现有的实用工具类，快速实现设计。\n2. **高度可定制**:\n   Tailwind 的配置文件使得定制变得简单，开发者可以根据项目需求，轻松调整默认设置，以符合品牌或设计规范。\n3. **一致性**:\n   Tailwind 强调在整个项目中使用一致的设计语言，避免了传统 CSS 中的命名冲突和样式覆盖问题。\n4. **维护简单**:\n   由于所有样式都是由类名直接定义在 HTML 中，Tailwind 使得项目的样式更加直观和易于维护。\n\n### 基本使用方法\n\n1.  **安装 Tailwind CSS**:\n    使用 npm 安装 Tailwind：\n    `bash\nnpm install tailwindcss\nnpx tailwindcss init\n`\n2.  **配置 Tailwind**:\n    在 `tailwind.config.js` 文件中，可以定义自定义配置：\n\n```js\nmodule.exports = {\n  content: [\"./src/**/*.{html,js}\"],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n1.  **使用 Tailwind 类**:\n    在 HTML 文件中直接使用 Tailwind 提供的类：\n\n    ```html\n    <div class=\"bg-blue-500 text-white p-4 rounded-lg shadow-lg\">\n      你好，Tailwind CSS!\n    </div>\n    ```\n\n### Tailwind CSS 的实战应用\n\n以下是一个使用 Tailwind CSS 构建的简单页面示例：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Tailwind CSS 示例</title>\n    <link\n      href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\"\n      rel=\"stylesheet\"\n    />\n  </head>\n  <body class=\"bg-gray-100 flex items-center justify-center h-screen\">\n    <div class=\"bg-white p-6 rounded-lg shadow-lg max-w-sm\">\n      <h2 class=\"text-2xl font-bold mb-4 text-gray-800\">\n        欢迎使用 Tailwind CSS\n      </h2>\n      <p class=\"text-gray-600 mb-4\">\n        这是一个使用 Tailwind CSS\n        构建的简单示例。它展示了如何使用实用工具类来快速构建美观的 UI。\n      </p>\n      <button\n        class=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"\n      >\n        点击我\n      </button>\n    </div>\n  </body>\n</html>\n```\n\n### 总结\n\nTailwind CSS 是一个现代、高效的 CSS 框架，它通过提供丰富的实用工具类，使得开发者可以快速构建响应式和一致的用户界面。通过学习和使用 Tailwind CSS，您将能够显著提高开发效率，减少样式冲突，并创造出高度可定制和维护的设计。\n","slug":"code/Tailwind CSS 介绍","published":1,"date":"2024-12-27T09:18:36.033Z","updated":"2024-12-29T06:10:39.443Z","_id":"cm56jrk0u00013zp9ckyyf0k7","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Tailwind-CSS-介绍\"><a href=\"#Tailwind-CSS-介绍\" class=\"headerlink\" title=\"Tailwind CSS 介绍\"></a>Tailwind CSS 介绍</h1><h3 id=\"什么是-Tailwind-CSS\"><a href=\"#什么是-Tailwind-CSS\" class=\"headerlink\" title=\"什么是 Tailwind CSS?\"></a>什么是 Tailwind CSS?</h3><p>Tailwind CSS 是一个功能强大的实用工具优先（utility-first）的 CSS 框架，允许开发者通过使用预定义的 CSS 类来快速构建自定义的用户界面。与传统的 CSS 框架不同，Tailwind 并没有预设的组件，而是提供了一套全面的、低级的实用工具类，可以直接在 HTML 中使用来构建任何设计。</p>\n<h3 id=\"Tailwind-CSS-的核心概念\"><a href=\"#Tailwind-CSS-的核心概念\" class=\"headerlink\" title=\"Tailwind CSS 的核心概念\"></a>Tailwind CSS 的核心概念</h3><ol>\n<li><strong>实用工具优先（Utility-First）</strong>:<br>Tailwind 提供大量的低级实用工具类，如 <code>flex</code>、<code>pt-4</code>、<code>text-center</code> 和 <code>rotate-90</code>，这些类可以组合起来，直接在 HTML 中构建复杂的设计，而不需要编写自定义的 CSS。</li>\n<li><strong>配置驱动（Configuration-Driven）</strong>:<br>通过 <code>tailwind.config.js</code> 文件，开发者可以完全自定义 Tailwind 的默认主题、颜色、间距等。这样可以保证设计的一致性，同时允许灵活的定制。</li>\n<li><strong>响应式设计（Responsive Design）</strong>:<br>Tailwind 内置了对响应式设计的支持，使用诸如 <code>sm:</code>, <code>md:</code>, <code>lg:</code>, <code>xl:</code> 和 <code>2xl:</code> 前缀，开发者可以轻松地为不同屏幕尺寸定义不同的样式。</li>\n<li><strong>状态变体（State Variants）</strong>:<br>Tailwind 提供诸如 <code>hover:</code>, <code>focus:</code>, <code>active:</code>, <code>disabled:</code> 等状态变体，帮助开发者轻松地处理用户交互状态。</li>\n<li><strong>即用即弃（PurgeCSS）</strong>:<br>Tailwind 与 PurgeCSS 集成，允许开发者在生产环境中删除未使用的 CSS 类，从而减少最终 CSS 文件的大小，提高性能。</li>\n</ol>\n<h3 id=\"为什么选择-Tailwind-CSS？\"><a href=\"#为什么选择-Tailwind-CSS？\" class=\"headerlink\" title=\"为什么选择 Tailwind CSS？\"></a>为什么选择 Tailwind CSS？</h3><ol>\n<li><strong>快速开发</strong>:<br>使用 Tailwind，开发者可以显著减少编写 CSS 的时间，通过组合现有的实用工具类，快速实现设计。</li>\n<li><strong>高度可定制</strong>:<br>Tailwind 的配置文件使得定制变得简单，开发者可以根据项目需求，轻松调整默认设置，以符合品牌或设计规范。</li>\n<li><strong>一致性</strong>:<br>Tailwind 强调在整个项目中使用一致的设计语言，避免了传统 CSS 中的命名冲突和样式覆盖问题。</li>\n<li><strong>维护简单</strong>:<br>由于所有样式都是由类名直接定义在 HTML 中，Tailwind 使得项目的样式更加直观和易于维护。</li>\n</ol>\n<h3 id=\"基本使用方法\"><a href=\"#基本使用方法\" class=\"headerlink\" title=\"基本使用方法\"></a>基本使用方法</h3><ol>\n<li><strong>安装 Tailwind CSS</strong>:<br>使用 npm 安装 Tailwind：<br><code>bash npm install tailwindcss npx tailwindcss init </code></li>\n<li><strong>配置 Tailwind</strong>:<br>在 <code>tailwind.config.js</code> 文件中，可以定义自定义配置：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/**/*.&#123;html,js&#125;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">theme</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">extend</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li><p><strong>使用 Tailwind 类</strong>:<br>在 HTML 文件中直接使用 Tailwind 提供的类：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bg-blue-500 text-white p-4 rounded-lg shadow-lg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  你好，Tailwind CSS!\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"Tailwind-CSS-的实战应用\"><a href=\"#Tailwind-CSS-的实战应用\" class=\"headerlink\" title=\"Tailwind CSS 的实战应用\"></a>Tailwind CSS 的实战应用</h3><p>以下是一个使用 Tailwind CSS 构建的简单页面示例：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Tailwind CSS 示例<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span>\n      <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bg-gray-100 flex items-center justify-center h-screen<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bg-white p-6 rounded-lg shadow-lg max-w-sm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text-2xl font-bold mb-4 text-gray-800<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        欢迎使用 Tailwind CSS\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text-gray-600 mb-4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        这是一个使用 Tailwind CSS\n        构建的简单示例。它展示了如何使用实用工具类来快速构建美观的 UI。\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token punctuation\">></span></span>\n        点击我\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Tailwind CSS 是一个现代、高效的 CSS 框架，它通过提供丰富的实用工具类，使得开发者可以快速构建响应式和一致的用户界面。通过学习和使用 Tailwind CSS，您将能够显著提高开发效率，减少样式冲突，并创造出高度可定制和维护的设计。</p>\n","excerpt":"","more":"<h1 id=\"Tailwind-CSS-介绍\"><a href=\"#Tailwind-CSS-介绍\" class=\"headerlink\" title=\"Tailwind CSS 介绍\"></a>Tailwind CSS 介绍</h1><h3 id=\"什么是-Tailwind-CSS\"><a href=\"#什么是-Tailwind-CSS\" class=\"headerlink\" title=\"什么是 Tailwind CSS?\"></a>什么是 Tailwind CSS?</h3><p>Tailwind CSS 是一个功能强大的实用工具优先（utility-first）的 CSS 框架，允许开发者通过使用预定义的 CSS 类来快速构建自定义的用户界面。与传统的 CSS 框架不同，Tailwind 并没有预设的组件，而是提供了一套全面的、低级的实用工具类，可以直接在 HTML 中使用来构建任何设计。</p>\n<h3 id=\"Tailwind-CSS-的核心概念\"><a href=\"#Tailwind-CSS-的核心概念\" class=\"headerlink\" title=\"Tailwind CSS 的核心概念\"></a>Tailwind CSS 的核心概念</h3><ol>\n<li><strong>实用工具优先（Utility-First）</strong>:<br>Tailwind 提供大量的低级实用工具类，如 <code>flex</code>、<code>pt-4</code>、<code>text-center</code> 和 <code>rotate-90</code>，这些类可以组合起来，直接在 HTML 中构建复杂的设计，而不需要编写自定义的 CSS。</li>\n<li><strong>配置驱动（Configuration-Driven）</strong>:<br>通过 <code>tailwind.config.js</code> 文件，开发者可以完全自定义 Tailwind 的默认主题、颜色、间距等。这样可以保证设计的一致性，同时允许灵活的定制。</li>\n<li><strong>响应式设计（Responsive Design）</strong>:<br>Tailwind 内置了对响应式设计的支持，使用诸如 <code>sm:</code>, <code>md:</code>, <code>lg:</code>, <code>xl:</code> 和 <code>2xl:</code> 前缀，开发者可以轻松地为不同屏幕尺寸定义不同的样式。</li>\n<li><strong>状态变体（State Variants）</strong>:<br>Tailwind 提供诸如 <code>hover:</code>, <code>focus:</code>, <code>active:</code>, <code>disabled:</code> 等状态变体，帮助开发者轻松地处理用户交互状态。</li>\n<li><strong>即用即弃（PurgeCSS）</strong>:<br>Tailwind 与 PurgeCSS 集成，允许开发者在生产环境中删除未使用的 CSS 类，从而减少最终 CSS 文件的大小，提高性能。</li>\n</ol>\n<h3 id=\"为什么选择-Tailwind-CSS？\"><a href=\"#为什么选择-Tailwind-CSS？\" class=\"headerlink\" title=\"为什么选择 Tailwind CSS？\"></a>为什么选择 Tailwind CSS？</h3><ol>\n<li><strong>快速开发</strong>:<br>使用 Tailwind，开发者可以显著减少编写 CSS 的时间，通过组合现有的实用工具类，快速实现设计。</li>\n<li><strong>高度可定制</strong>:<br>Tailwind 的配置文件使得定制变得简单，开发者可以根据项目需求，轻松调整默认设置，以符合品牌或设计规范。</li>\n<li><strong>一致性</strong>:<br>Tailwind 强调在整个项目中使用一致的设计语言，避免了传统 CSS 中的命名冲突和样式覆盖问题。</li>\n<li><strong>维护简单</strong>:<br>由于所有样式都是由类名直接定义在 HTML 中，Tailwind 使得项目的样式更加直观和易于维护。</li>\n</ol>\n<h3 id=\"基本使用方法\"><a href=\"#基本使用方法\" class=\"headerlink\" title=\"基本使用方法\"></a>基本使用方法</h3><ol>\n<li><strong>安装 Tailwind CSS</strong>:<br>使用 npm 安装 Tailwind：<br><code>bash npm install tailwindcss npx tailwindcss init </code></li>\n<li><strong>配置 Tailwind</strong>:<br>在 <code>tailwind.config.js</code> 文件中，可以定义自定义配置：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/**/*.&#123;html,js&#125;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">theme</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">extend</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li><p><strong>使用 Tailwind 类</strong>:<br>在 HTML 文件中直接使用 Tailwind 提供的类：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bg-blue-500 text-white p-4 rounded-lg shadow-lg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  你好，Tailwind CSS!\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"Tailwind-CSS-的实战应用\"><a href=\"#Tailwind-CSS-的实战应用\" class=\"headerlink\" title=\"Tailwind CSS 的实战应用\"></a>Tailwind CSS 的实战应用</h3><p>以下是一个使用 Tailwind CSS 构建的简单页面示例：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Tailwind CSS 示例<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span>\n      <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bg-gray-100 flex items-center justify-center h-screen<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bg-white p-6 rounded-lg shadow-lg max-w-sm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text-2xl font-bold mb-4 text-gray-800<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        欢迎使用 Tailwind CSS\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text-gray-600 mb-4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        这是一个使用 Tailwind CSS\n        构建的简单示例。它展示了如何使用实用工具类来快速构建美观的 UI。\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n        <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token punctuation\">></span></span>\n        点击我\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Tailwind CSS 是一个现代、高效的 CSS 框架，它通过提供丰富的实用工具类，使得开发者可以快速构建响应式和一致的用户界面。通过学习和使用 Tailwind CSS，您将能够显著提高开发效率，减少样式冲突，并创造出高度可定制和维护的设计。</p>\n"},{"title":"开发的项目流程","date":"2024-11-17T16:00:00.000Z","_content":"\n之前面试问过，所以记录下来以免忘记\n\n## 1. 确认项目需求\n\n- **需求调研**：与需求方（客户、产品经理、业务部门）沟通，明确项目目标、核心功能、技术要求。\n- **竞品分析**：研究同类产品的特点，了解用户需求与痛点。\n- **需求文档**：整理需求清单，输出需求规格说明书（SRS）。\n  **产出**:需求规格说明书（SRS）、功能清单、初步时间计划。\n\n## 2. 可行性分析\n\n- **技术评估**：评估实现需求的技术难度，选择合适的技术栈（如框架、工具、库）。\n- **资源评估**：确定所需人力、时间、预算，识别潜在风险。\n- **业务评估**：判断项目的商业价值，评估投入产出比。\n  **产出**:可行性分析报告、技术选型文档。\n\n## 3. 前期设计\n\n- **架构设计**：\n  - 选择前端框架（如 React、Vue、Svelte 等）。\n  - 确定状态管理（如 Zustand、Redux、Pinia）。\n  - 确定构建工具（如 Webpack、Vite）。\n  - 设计目录结构、路由规则、组件划分。\n- **UI/UX 设计**：\n  - 确定设计风格（如扁平化、极简风）。\n  - 输出低保真或高保真原型图（如使用 Figma、Sketch）。\n- **接口设计**：与后端团队协作，定义 API 接口规范（RESTful 或 GraphQL）。\n  **产出**:架构设计文档、UI 原型图、接口文档。\n\n## 4. 项目立项\n\n- **立项评审**：组织团队成员（技术负责人、产品经理、项目经理）对项目需求、技术方案、资源分配进行评审。\n- **项目审批**：获得高层管理或客户的正式批准。\n  **产出**:项目立项报告、项目计划书。\n\n## 5. 项目计划\n\n- **任务拆解**：将需求拆解为可执行的任务，并优先排序。\n- **时间估算**：为每个任务分配合理时间。\n- **团队分工**：确定各成员的职责。\n- **开发工具准备**：配置代码仓库（Git）、CI/CD 流水线、开发环境。\n  **产出**:甘特图或 Sprint 计划、任务清单。\n\n## 6. 项目启动\n\n- **启动会议**：确认目标、时间节点，明确沟通方式（如会议频率、汇报机制）。\n- **版本管理**：制定分支管理策略（如 Git Flow）。\n- **研发流程**：定义开发标准和代码规范。\n  **产出**:项目启动记录、开发流程文档。\n\n## 7. 后续跟踪与迭代\n\n立项完成后，根据 Agile 或其他开发模式进入项目实施阶段，定期检查进度，及时解决问题，确保交付质量。\n\n## 总结\n\n以上就是开发项目的基本流程了\n","source":"_posts/code/前端项目立项流程.md","raw":"---\ntitle: 开发的项目流程\ndate: 2024-11-18\ntags:\n  - 流程\ncategories:\n  - 技术\n  - 学习\n---\n\n之前面试问过，所以记录下来以免忘记\n\n## 1. 确认项目需求\n\n- **需求调研**：与需求方（客户、产品经理、业务部门）沟通，明确项目目标、核心功能、技术要求。\n- **竞品分析**：研究同类产品的特点，了解用户需求与痛点。\n- **需求文档**：整理需求清单，输出需求规格说明书（SRS）。\n  **产出**:需求规格说明书（SRS）、功能清单、初步时间计划。\n\n## 2. 可行性分析\n\n- **技术评估**：评估实现需求的技术难度，选择合适的技术栈（如框架、工具、库）。\n- **资源评估**：确定所需人力、时间、预算，识别潜在风险。\n- **业务评估**：判断项目的商业价值，评估投入产出比。\n  **产出**:可行性分析报告、技术选型文档。\n\n## 3. 前期设计\n\n- **架构设计**：\n  - 选择前端框架（如 React、Vue、Svelte 等）。\n  - 确定状态管理（如 Zustand、Redux、Pinia）。\n  - 确定构建工具（如 Webpack、Vite）。\n  - 设计目录结构、路由规则、组件划分。\n- **UI/UX 设计**：\n  - 确定设计风格（如扁平化、极简风）。\n  - 输出低保真或高保真原型图（如使用 Figma、Sketch）。\n- **接口设计**：与后端团队协作，定义 API 接口规范（RESTful 或 GraphQL）。\n  **产出**:架构设计文档、UI 原型图、接口文档。\n\n## 4. 项目立项\n\n- **立项评审**：组织团队成员（技术负责人、产品经理、项目经理）对项目需求、技术方案、资源分配进行评审。\n- **项目审批**：获得高层管理或客户的正式批准。\n  **产出**:项目立项报告、项目计划书。\n\n## 5. 项目计划\n\n- **任务拆解**：将需求拆解为可执行的任务，并优先排序。\n- **时间估算**：为每个任务分配合理时间。\n- **团队分工**：确定各成员的职责。\n- **开发工具准备**：配置代码仓库（Git）、CI/CD 流水线、开发环境。\n  **产出**:甘特图或 Sprint 计划、任务清单。\n\n## 6. 项目启动\n\n- **启动会议**：确认目标、时间节点，明确沟通方式（如会议频率、汇报机制）。\n- **版本管理**：制定分支管理策略（如 Git Flow）。\n- **研发流程**：定义开发标准和代码规范。\n  **产出**:项目启动记录、开发流程文档。\n\n## 7. 后续跟踪与迭代\n\n立项完成后，根据 Agile 或其他开发模式进入项目实施阶段，定期检查进度，及时解决问题，确保交付质量。\n\n## 总结\n\n以上就是开发项目的基本流程了\n","slug":"code/前端项目立项流程","published":1,"updated":"2024-12-27T09:18:36.034Z","comments":1,"layout":"post","photos":[],"_id":"cm56jrk0v00033zp9bnht93mt","content":"<p>之前面试问过，所以记录下来以免忘记</p>\n<h2 id=\"1-确认项目需求\"><a href=\"#1-确认项目需求\" class=\"headerlink\" title=\"1. 确认项目需求\"></a>1. 确认项目需求</h2><ul>\n<li><strong>需求调研</strong>：与需求方（客户、产品经理、业务部门）沟通，明确项目目标、核心功能、技术要求。</li>\n<li><strong>竞品分析</strong>：研究同类产品的特点，了解用户需求与痛点。</li>\n<li><strong>需求文档</strong>：整理需求清单，输出需求规格说明书（SRS）。<br><strong>产出</strong>:需求规格说明书（SRS）、功能清单、初步时间计划。</li>\n</ul>\n<h2 id=\"2-可行性分析\"><a href=\"#2-可行性分析\" class=\"headerlink\" title=\"2. 可行性分析\"></a>2. 可行性分析</h2><ul>\n<li><strong>技术评估</strong>：评估实现需求的技术难度，选择合适的技术栈（如框架、工具、库）。</li>\n<li><strong>资源评估</strong>：确定所需人力、时间、预算，识别潜在风险。</li>\n<li><strong>业务评估</strong>：判断项目的商业价值，评估投入产出比。<br><strong>产出</strong>:可行性分析报告、技术选型文档。</li>\n</ul>\n<h2 id=\"3-前期设计\"><a href=\"#3-前期设计\" class=\"headerlink\" title=\"3. 前期设计\"></a>3. 前期设计</h2><ul>\n<li><strong>架构设计</strong>：<ul>\n<li>选择前端框架（如 React、Vue、Svelte 等）。</li>\n<li>确定状态管理（如 Zustand、Redux、Pinia）。</li>\n<li>确定构建工具（如 Webpack、Vite）。</li>\n<li>设计目录结构、路由规则、组件划分。</li>\n</ul>\n</li>\n<li><strong>UI&#x2F;UX 设计</strong>：<ul>\n<li>确定设计风格（如扁平化、极简风）。</li>\n<li>输出低保真或高保真原型图（如使用 Figma、Sketch）。</li>\n</ul>\n</li>\n<li><strong>接口设计</strong>：与后端团队协作，定义 API 接口规范（RESTful 或 GraphQL）。<br><strong>产出</strong>:架构设计文档、UI 原型图、接口文档。</li>\n</ul>\n<h2 id=\"4-项目立项\"><a href=\"#4-项目立项\" class=\"headerlink\" title=\"4. 项目立项\"></a>4. 项目立项</h2><ul>\n<li><strong>立项评审</strong>：组织团队成员（技术负责人、产品经理、项目经理）对项目需求、技术方案、资源分配进行评审。</li>\n<li><strong>项目审批</strong>：获得高层管理或客户的正式批准。<br><strong>产出</strong>:项目立项报告、项目计划书。</li>\n</ul>\n<h2 id=\"5-项目计划\"><a href=\"#5-项目计划\" class=\"headerlink\" title=\"5. 项目计划\"></a>5. 项目计划</h2><ul>\n<li><strong>任务拆解</strong>：将需求拆解为可执行的任务，并优先排序。</li>\n<li><strong>时间估算</strong>：为每个任务分配合理时间。</li>\n<li><strong>团队分工</strong>：确定各成员的职责。</li>\n<li><strong>开发工具准备</strong>：配置代码仓库（Git）、CI&#x2F;CD 流水线、开发环境。<br><strong>产出</strong>:甘特图或 Sprint 计划、任务清单。</li>\n</ul>\n<h2 id=\"6-项目启动\"><a href=\"#6-项目启动\" class=\"headerlink\" title=\"6. 项目启动\"></a>6. 项目启动</h2><ul>\n<li><strong>启动会议</strong>：确认目标、时间节点，明确沟通方式（如会议频率、汇报机制）。</li>\n<li><strong>版本管理</strong>：制定分支管理策略（如 Git Flow）。</li>\n<li><strong>研发流程</strong>：定义开发标准和代码规范。<br><strong>产出</strong>:项目启动记录、开发流程文档。</li>\n</ul>\n<h2 id=\"7-后续跟踪与迭代\"><a href=\"#7-后续跟踪与迭代\" class=\"headerlink\" title=\"7. 后续跟踪与迭代\"></a>7. 后续跟踪与迭代</h2><p>立项完成后，根据 Agile 或其他开发模式进入项目实施阶段，定期检查进度，及时解决问题，确保交付质量。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是开发项目的基本流程了</p>\n","excerpt":"","more":"<p>之前面试问过，所以记录下来以免忘记</p>\n<h2 id=\"1-确认项目需求\"><a href=\"#1-确认项目需求\" class=\"headerlink\" title=\"1. 确认项目需求\"></a>1. 确认项目需求</h2><ul>\n<li><strong>需求调研</strong>：与需求方（客户、产品经理、业务部门）沟通，明确项目目标、核心功能、技术要求。</li>\n<li><strong>竞品分析</strong>：研究同类产品的特点，了解用户需求与痛点。</li>\n<li><strong>需求文档</strong>：整理需求清单，输出需求规格说明书（SRS）。<br><strong>产出</strong>:需求规格说明书（SRS）、功能清单、初步时间计划。</li>\n</ul>\n<h2 id=\"2-可行性分析\"><a href=\"#2-可行性分析\" class=\"headerlink\" title=\"2. 可行性分析\"></a>2. 可行性分析</h2><ul>\n<li><strong>技术评估</strong>：评估实现需求的技术难度，选择合适的技术栈（如框架、工具、库）。</li>\n<li><strong>资源评估</strong>：确定所需人力、时间、预算，识别潜在风险。</li>\n<li><strong>业务评估</strong>：判断项目的商业价值，评估投入产出比。<br><strong>产出</strong>:可行性分析报告、技术选型文档。</li>\n</ul>\n<h2 id=\"3-前期设计\"><a href=\"#3-前期设计\" class=\"headerlink\" title=\"3. 前期设计\"></a>3. 前期设计</h2><ul>\n<li><strong>架构设计</strong>：<ul>\n<li>选择前端框架（如 React、Vue、Svelte 等）。</li>\n<li>确定状态管理（如 Zustand、Redux、Pinia）。</li>\n<li>确定构建工具（如 Webpack、Vite）。</li>\n<li>设计目录结构、路由规则、组件划分。</li>\n</ul>\n</li>\n<li><strong>UI&#x2F;UX 设计</strong>：<ul>\n<li>确定设计风格（如扁平化、极简风）。</li>\n<li>输出低保真或高保真原型图（如使用 Figma、Sketch）。</li>\n</ul>\n</li>\n<li><strong>接口设计</strong>：与后端团队协作，定义 API 接口规范（RESTful 或 GraphQL）。<br><strong>产出</strong>:架构设计文档、UI 原型图、接口文档。</li>\n</ul>\n<h2 id=\"4-项目立项\"><a href=\"#4-项目立项\" class=\"headerlink\" title=\"4. 项目立项\"></a>4. 项目立项</h2><ul>\n<li><strong>立项评审</strong>：组织团队成员（技术负责人、产品经理、项目经理）对项目需求、技术方案、资源分配进行评审。</li>\n<li><strong>项目审批</strong>：获得高层管理或客户的正式批准。<br><strong>产出</strong>:项目立项报告、项目计划书。</li>\n</ul>\n<h2 id=\"5-项目计划\"><a href=\"#5-项目计划\" class=\"headerlink\" title=\"5. 项目计划\"></a>5. 项目计划</h2><ul>\n<li><strong>任务拆解</strong>：将需求拆解为可执行的任务，并优先排序。</li>\n<li><strong>时间估算</strong>：为每个任务分配合理时间。</li>\n<li><strong>团队分工</strong>：确定各成员的职责。</li>\n<li><strong>开发工具准备</strong>：配置代码仓库（Git）、CI&#x2F;CD 流水线、开发环境。<br><strong>产出</strong>:甘特图或 Sprint 计划、任务清单。</li>\n</ul>\n<h2 id=\"6-项目启动\"><a href=\"#6-项目启动\" class=\"headerlink\" title=\"6. 项目启动\"></a>6. 项目启动</h2><ul>\n<li><strong>启动会议</strong>：确认目标、时间节点，明确沟通方式（如会议频率、汇报机制）。</li>\n<li><strong>版本管理</strong>：制定分支管理策略（如 Git Flow）。</li>\n<li><strong>研发流程</strong>：定义开发标准和代码规范。<br><strong>产出</strong>:项目启动记录、开发流程文档。</li>\n</ul>\n<h2 id=\"7-后续跟踪与迭代\"><a href=\"#7-后续跟踪与迭代\" class=\"headerlink\" title=\"7. 后续跟踪与迭代\"></a>7. 后续跟踪与迭代</h2><p>立项完成后，根据 Agile 或其他开发模式进入项目实施阶段，定期检查进度，及时解决问题，确保交付质量。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是开发项目的基本流程了</p>\n"},{"title":"哈希表","date":"2024-08-16T13:20:00.000Z","_content":"\n哈希表（hash table），又称散列表，它通过建立键  `key`  与值  `value`  之间的映射，实现高效的元素查询。具体而言，我们向哈希表中输入一个键  `key` ，则可以在  O(1)  时间内获取对应的值  `value` 。\n\n如图 6-1 所示，给定  n  个学生，每个学生都有“姓名”和“学号”两项数据。假如我们希望实现“输入一个学号，返回对应的姓名”的查询功能\n\n![haxi.png](/images/haxi.png)\n\n## **哈希表简单实现**\n\n### 除留余数法（Modulo Method）\n\n- 哈希值通过将键除以哈希表的大小，然后取余数得到。\n- 哈希函数形式：`hash(key) = key % table_size`\n- 简单但容易产生冲突，尤其是在键的分布不均匀时。\n\n```jsx\nclass Pair {\n  constructor(key, val) {\n    this.key = key;\n    this.val = val;\n  }\n}\nclass ArrayHashMap {\n  buckets;\n  len;\n  constructor(len = 100) {\n    this.buckets = new Array(len).fill(null);\n    this.len = len;\n  }\n  hashFunc(key) {\n    return key % this.len;\n  }\n  set(key, val) {\n    this.buckets[this.hashFunc(key)] = new Pair(key, val);\n  }\n  get(key) {\n    let index = this.hashFunc(key);\n    let pair = this.buckets[index];\n    if (pair === null) return null;\n    return pair.val;\n  }\n  delect(key) {\n    let index = this.hashFunc(key);\n    let pair = this.buckets[index];\n    if (pair === null) return null;\n    this.buckets[index] = null;\n    return pair.val;\n  }\n  keys() {\n    let arr = [];\n    for (let i = 0; i < this.buckets.length; i++) {\n      if (this.buckets[i] !== null) {\n        arr.push(this.buckets[i].key);\n      }\n    }\n    return arr;\n  }\n  values() {\n    let arr = [];\n    for (let i = 0; i < this.buckets.length; i++) {\n      if (this.buckets[i] !== null) {\n        arr.push(this.buckets[i].val);\n      }\n    }\n    return arr;\n  }\n  size() {\n    return this.buckets.filter((item) => item !== null).length;\n  }\n  has(key) {\n    let index = this.hashFunc(key);\n    let pair = this.buckets[index];\n    if (pair === null) return false;\n    return true;\n  }\n  forEach(callback) {\n    this.buckets.filter((item) => item !== null).forEach(callback);\n  }\n}\n```\n\n## 动态实现\n\n```jsx\nclass Pair {\n  constructor(key, val) {\n    this.key = key;\n    this.val = val;\n  }\n}\nclass HashMapChaining {\n  size; // 键值对数量\n  capacity; // 容量\n  loadThres; // 触发扩容的负载因子阈值\n  extendRatio; // 扩容倍数\n  buckets; // 桶数组\n  constructor() {\n    this.size = 0;\n    this.capacity = 4;\n    this.loadThres = 2.0 / 3.0;\n    this.extendRatio = 2;\n    this.buckets = new Array(this.capacity).fill(null).map((x) => []);\n  }\n  hashFunc(key) {\n    const stringKey = JSON.stringify(key);\n    let hash = 0;\n    for (let i = 0; i < stringKey.length; i++) {\n      hash = (hash + stringKey.charCodeAt(i) * i) % this.capacity;\n    }\n    return hash;\n  }\n  loadFactor() {\n    return this.size / this.capacity;\n  }\n  set(key, val) {\n    if (this.loadFactor() > this.loadThres) {\n      this.extend();\n    }\n    const index = this.hashFunc(key);\n    const bucket = this.buckets[index];\n    for (let pair of bucket) {\n      if (pair.key === key) {\n        pair.val = val;\n        return;\n      }\n    }\n    bucket.push(new Pair(key, val));\n    this.size++;\n  }\n  get(key) {\n    const index = this.hashFunc(key);\n    const bucket = this.buckets[index];\n    for (let pair of bucket) {\n      if (pair.key === key) {\n        return pair.val;\n      }\n    }\n    return null;\n  }\n  extend() {\n    const bucketsTmp = this.buckets;\n    this.capacity *= this.extendRatio;\n    this.buckets = new Array(this.capacity).fill(null).map(() => []);\n    this.size = 0;\n    for (let bucket of bucketsTmp) {\n      for (const pair of bucket) {\n        this.set(pair.key, pair.val);\n      }\n    }\n  }\n  delete(key) {\n    const index = this.hashFunc(key);\n    const bucket = this.buckets[index];\n    for (let i = 0; i < bucket.length; i++) {\n      if (bucket[i].key === key) {\n        bucket.splice(i, 1);\n        this.size--;\n        break;\n      }\n    }\n  }\n  has(key) {\n    return this.get(key) !== null;\n  }\n}\n```\n","source":"_posts/code/haxi/index.md","raw":"---\ntitle: 哈希表\ndate: 2024-8-16 21:20\ntags:\n  - 数据结构\n  - 哈希\ncategories:\n  - 技术\n  - 学习\n---\n\n哈希表（hash table），又称散列表，它通过建立键  `key`  与值  `value`  之间的映射，实现高效的元素查询。具体而言，我们向哈希表中输入一个键  `key` ，则可以在  O(1)  时间内获取对应的值  `value` 。\n\n如图 6-1 所示，给定  n  个学生，每个学生都有“姓名”和“学号”两项数据。假如我们希望实现“输入一个学号，返回对应的姓名”的查询功能\n\n![haxi.png](/images/haxi.png)\n\n## **哈希表简单实现**\n\n### 除留余数法（Modulo Method）\n\n- 哈希值通过将键除以哈希表的大小，然后取余数得到。\n- 哈希函数形式：`hash(key) = key % table_size`\n- 简单但容易产生冲突，尤其是在键的分布不均匀时。\n\n```jsx\nclass Pair {\n  constructor(key, val) {\n    this.key = key;\n    this.val = val;\n  }\n}\nclass ArrayHashMap {\n  buckets;\n  len;\n  constructor(len = 100) {\n    this.buckets = new Array(len).fill(null);\n    this.len = len;\n  }\n  hashFunc(key) {\n    return key % this.len;\n  }\n  set(key, val) {\n    this.buckets[this.hashFunc(key)] = new Pair(key, val);\n  }\n  get(key) {\n    let index = this.hashFunc(key);\n    let pair = this.buckets[index];\n    if (pair === null) return null;\n    return pair.val;\n  }\n  delect(key) {\n    let index = this.hashFunc(key);\n    let pair = this.buckets[index];\n    if (pair === null) return null;\n    this.buckets[index] = null;\n    return pair.val;\n  }\n  keys() {\n    let arr = [];\n    for (let i = 0; i < this.buckets.length; i++) {\n      if (this.buckets[i] !== null) {\n        arr.push(this.buckets[i].key);\n      }\n    }\n    return arr;\n  }\n  values() {\n    let arr = [];\n    for (let i = 0; i < this.buckets.length; i++) {\n      if (this.buckets[i] !== null) {\n        arr.push(this.buckets[i].val);\n      }\n    }\n    return arr;\n  }\n  size() {\n    return this.buckets.filter((item) => item !== null).length;\n  }\n  has(key) {\n    let index = this.hashFunc(key);\n    let pair = this.buckets[index];\n    if (pair === null) return false;\n    return true;\n  }\n  forEach(callback) {\n    this.buckets.filter((item) => item !== null).forEach(callback);\n  }\n}\n```\n\n## 动态实现\n\n```jsx\nclass Pair {\n  constructor(key, val) {\n    this.key = key;\n    this.val = val;\n  }\n}\nclass HashMapChaining {\n  size; // 键值对数量\n  capacity; // 容量\n  loadThres; // 触发扩容的负载因子阈值\n  extendRatio; // 扩容倍数\n  buckets; // 桶数组\n  constructor() {\n    this.size = 0;\n    this.capacity = 4;\n    this.loadThres = 2.0 / 3.0;\n    this.extendRatio = 2;\n    this.buckets = new Array(this.capacity).fill(null).map((x) => []);\n  }\n  hashFunc(key) {\n    const stringKey = JSON.stringify(key);\n    let hash = 0;\n    for (let i = 0; i < stringKey.length; i++) {\n      hash = (hash + stringKey.charCodeAt(i) * i) % this.capacity;\n    }\n    return hash;\n  }\n  loadFactor() {\n    return this.size / this.capacity;\n  }\n  set(key, val) {\n    if (this.loadFactor() > this.loadThres) {\n      this.extend();\n    }\n    const index = this.hashFunc(key);\n    const bucket = this.buckets[index];\n    for (let pair of bucket) {\n      if (pair.key === key) {\n        pair.val = val;\n        return;\n      }\n    }\n    bucket.push(new Pair(key, val));\n    this.size++;\n  }\n  get(key) {\n    const index = this.hashFunc(key);\n    const bucket = this.buckets[index];\n    for (let pair of bucket) {\n      if (pair.key === key) {\n        return pair.val;\n      }\n    }\n    return null;\n  }\n  extend() {\n    const bucketsTmp = this.buckets;\n    this.capacity *= this.extendRatio;\n    this.buckets = new Array(this.capacity).fill(null).map(() => []);\n    this.size = 0;\n    for (let bucket of bucketsTmp) {\n      for (const pair of bucket) {\n        this.set(pair.key, pair.val);\n      }\n    }\n  }\n  delete(key) {\n    const index = this.hashFunc(key);\n    const bucket = this.buckets[index];\n    for (let i = 0; i < bucket.length; i++) {\n      if (bucket[i].key === key) {\n        bucket.splice(i, 1);\n        this.size--;\n        break;\n      }\n    }\n  }\n  has(key) {\n    return this.get(key) !== null;\n  }\n}\n```\n","slug":"code/haxi/index","published":1,"updated":"2024-12-27T09:18:36.034Z","comments":1,"layout":"post","photos":[],"_id":"cm56jrk0v00053zp93yut2gu2","content":"<p>哈希表（hash table），又称散列表，它通过建立键  <code>key</code>  与值  <code>value</code>  之间的映射，实现高效的元素查询。具体而言，我们向哈希表中输入一个键  <code>key</code> ，则可以在  O(1)  时间内获取对应的值  <code>value</code> 。</p>\n<p>如图 6-1 所示，给定  n  个学生，每个学生都有“姓名”和“学号”两项数据。假如我们希望实现“输入一个学号，返回对应的姓名”的查询功能</p>\n<p><img src=\"/images/haxi.png\" alt=\"haxi.png\"></p>\n<h2 id=\"哈希表简单实现\"><a href=\"#哈希表简单实现\" class=\"headerlink\" title=\"哈希表简单实现\"></a><strong>哈希表简单实现</strong></h2><h3 id=\"除留余数法（Modulo-Method）\"><a href=\"#除留余数法（Modulo-Method）\" class=\"headerlink\" title=\"除留余数法（Modulo Method）\"></a>除留余数法（Modulo Method）</h3><ul>\n<li>哈希值通过将键除以哈希表的大小，然后取余数得到。</li>\n<li>哈希函数形式：<code>hash(key) = key % table_size</code></li>\n<li>简单但容易产生冲突，尤其是在键的分布不均匀时。</li>\n</ul>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pair</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayHashMap</span> <span class=\"token punctuation\">&#123;</span>\n  buckets<span class=\"token punctuation\">;</span>\n  len<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">len <span class=\"token operator\">=</span> <span class=\"token number\">100</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>len <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> key <span class=\"token operator\">%</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>len<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> pair <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pair <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> pair<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">delect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> pair <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pair <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> pair<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> pair <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pair <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"动态实现\"><a href=\"#动态实现\" class=\"headerlink\" title=\"动态实现\"></a>动态实现</h2><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pair</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HashMapChaining</span> <span class=\"token punctuation\">&#123;</span>\n  size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 键值对数量</span>\n  capacity<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 容量</span>\n  loadThres<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 触发扩容的负载因子阈值</span>\n  extendRatio<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 扩容倍数</span>\n  buckets<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 桶数组</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadThres <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>extendRatio <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> stringKey <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> stringKey<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">+</span> stringKey<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">loadFactor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">/</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadFactor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadThres<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> bucket <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> pair <span class=\"token keyword\">of</span> bucket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        pair<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    bucket<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> bucket <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> pair <span class=\"token keyword\">of</span> bucket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> pair<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> bucketsTmp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">*=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>extendRatio<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> bucket <span class=\"token keyword\">of</span> bucketsTmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair <span class=\"token keyword\">of</span> bucket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> pair<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> bucket <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bucket<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        bucket<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","excerpt":"","more":"<p>哈希表（hash table），又称散列表，它通过建立键  <code>key</code>  与值  <code>value</code>  之间的映射，实现高效的元素查询。具体而言，我们向哈希表中输入一个键  <code>key</code> ，则可以在  O(1)  时间内获取对应的值  <code>value</code> 。</p>\n<p>如图 6-1 所示，给定  n  个学生，每个学生都有“姓名”和“学号”两项数据。假如我们希望实现“输入一个学号，返回对应的姓名”的查询功能</p>\n<p><img src=\"/images/haxi.png\" alt=\"haxi.png\"></p>\n<h2 id=\"哈希表简单实现\"><a href=\"#哈希表简单实现\" class=\"headerlink\" title=\"哈希表简单实现\"></a><strong>哈希表简单实现</strong></h2><h3 id=\"除留余数法（Modulo-Method）\"><a href=\"#除留余数法（Modulo-Method）\" class=\"headerlink\" title=\"除留余数法（Modulo Method）\"></a>除留余数法（Modulo Method）</h3><ul>\n<li>哈希值通过将键除以哈希表的大小，然后取余数得到。</li>\n<li>哈希函数形式：<code>hash(key) = key % table_size</code></li>\n<li>简单但容易产生冲突，尤其是在键的分布不均匀时。</li>\n</ul>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pair</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayHashMap</span> <span class=\"token punctuation\">&#123;</span>\n  buckets<span class=\"token punctuation\">;</span>\n  len<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">len <span class=\"token operator\">=</span> <span class=\"token number\">100</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>len <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> key <span class=\"token operator\">%</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>len<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> pair <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pair <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> pair<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">delect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> pair <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pair <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> pair<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> pair <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pair <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"动态实现\"><a href=\"#动态实现\" class=\"headerlink\" title=\"动态实现\"></a>动态实现</h2><pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pair</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HashMapChaining</span> <span class=\"token punctuation\">&#123;</span>\n  size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 键值对数量</span>\n  capacity<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 容量</span>\n  loadThres<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 触发扩容的负载因子阈值</span>\n  extendRatio<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 扩容倍数</span>\n  buckets<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 桶数组</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadThres <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>extendRatio <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> stringKey <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> stringKey<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">+</span> stringKey<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">loadFactor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">/</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadFactor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadThres<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> bucket <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> pair <span class=\"token keyword\">of</span> bucket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        pair<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    bucket<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> bucket <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> pair <span class=\"token keyword\">of</span> bucket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> pair<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> bucketsTmp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">*=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>extendRatio<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> bucket <span class=\"token keyword\">of</span> bucketsTmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> pair <span class=\"token keyword\">of</span> bucket<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> pair<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashFunc</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> bucket <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bucket<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        bucket<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"说说对React中类组件和函数组件的理解？有什么区别？","date":"2024-11-17T16:00:00.000Z","_content":"\n## 类组件\n\n顾名思义，使用`es6`类的方式去编写组件,该类必须继承`React.Component`\n\n```javascript\nclass Welcome extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n```\n\n## 函数组件\n\n通过函数编写的形式去实现一个 `React` 组件，是 `React` 中定义组件最简单的方式\n\n```javascript\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n```\n\n## 区别\n\n| 类别     | 类组件                                                                                           | 函数组件                                                                                                                                                                   |\n| -------- | ------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 定义方式 | 使用 ES6 类语法                                                                                  | 使用函数表达式                                                                                                                                                             |\n| 生命周期 | 支持生命周期,如 `componentDidMount`, `componentDidUpdate`, `componentWillUnmount` 等             | 没有直接的生命周期<br />通常使用 `useEffect` 和 `useReducer` 等 React Hooks 来代替类组件中的生命周期钩子                                                                   |\n| 状态管理 | 可以使用 `this.state` 来管理内部状态。更适合需要复杂状态管理或需要对生命周期有更细粒度控制的场景 | 使用 `useState` 和 `useReducer` 等 React Hooks 来管理内部状态。                                                                                                            |\n| 其他     | 类组件有更好继承性和扩展性的                                                                     | 函数组件是更简洁、更轻量的实现方式<br />优化了性能，因为它们本质上是无状态的。 <br /><br /> 函数组件可以直接使用 React Hooks，使得状态管理和副作用处理变得更加简洁和灵活。 |\n\n## 总结\n\n**类组件**：更适合复杂状态管理或需要使用生命周期钩子的场景。\n**函数组件**：简洁、无状态，更推荐用于简单组件和现代 React 应用。\n","source":"_posts/code/react/class组件和函数组件的区别.md","raw":"---\ntitle: 说说对React中类组件和函数组件的理解？有什么区别？\ndate: 2024-11-18\ntags:\n  - javascript\n  - react\n  - 基础\ncategories:\n  - 技术\n  - 学习\n---\n\n## 类组件\n\n顾名思义，使用`es6`类的方式去编写组件,该类必须继承`React.Component`\n\n```javascript\nclass Welcome extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n```\n\n## 函数组件\n\n通过函数编写的形式去实现一个 `React` 组件，是 `React` 中定义组件最简单的方式\n\n```javascript\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n```\n\n## 区别\n\n| 类别     | 类组件                                                                                           | 函数组件                                                                                                                                                                   |\n| -------- | ------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 定义方式 | 使用 ES6 类语法                                                                                  | 使用函数表达式                                                                                                                                                             |\n| 生命周期 | 支持生命周期,如 `componentDidMount`, `componentDidUpdate`, `componentWillUnmount` 等             | 没有直接的生命周期<br />通常使用 `useEffect` 和 `useReducer` 等 React Hooks 来代替类组件中的生命周期钩子                                                                   |\n| 状态管理 | 可以使用 `this.state` 来管理内部状态。更适合需要复杂状态管理或需要对生命周期有更细粒度控制的场景 | 使用 `useState` 和 `useReducer` 等 React Hooks 来管理内部状态。                                                                                                            |\n| 其他     | 类组件有更好继承性和扩展性的                                                                     | 函数组件是更简洁、更轻量的实现方式<br />优化了性能，因为它们本质上是无状态的。 <br /><br /> 函数组件可以直接使用 React Hooks，使得状态管理和副作用处理变得更加简洁和灵活。 |\n\n## 总结\n\n**类组件**：更适合复杂状态管理或需要使用生命周期钩子的场景。\n**函数组件**：简洁、无状态，更推荐用于简单组件和现代 React 应用。\n","slug":"code/react/class组件和函数组件的区别","published":1,"updated":"2024-12-27T09:18:36.033Z","comments":1,"layout":"post","photos":[],"_id":"cm56jrk0x00093zp972ay2ab1","content":"<h2 id=\"类组件\"><a href=\"#类组件\" class=\"headerlink\" title=\"类组件\"></a>类组件</h2><p>顾名思义，使用<code>es6</code>类的方式去编写组件,该类必须继承<code>React.Component</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Welcome</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"函数组件\"><a href=\"#函数组件\" class=\"headerlink\" title=\"函数组件\"></a>函数组件</h2><p>通过函数编写的形式去实现一个 <code>React</code> 组件，是 <code>React</code> 中定义组件最简单的方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><table>\n<thead>\n<tr>\n<th>类别</th>\n<th>类组件</th>\n<th>函数组件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>定义方式</td>\n<td>使用 ES6 类语法</td>\n<td>使用函数表达式</td>\n</tr>\n<tr>\n<td>生命周期</td>\n<td>支持生命周期,如 <code>componentDidMount</code>, <code>componentDidUpdate</code>, <code>componentWillUnmount</code> 等</td>\n<td>没有直接的生命周期<br />通常使用 <code>useEffect</code> 和 <code>useReducer</code> 等 React Hooks 来代替类组件中的生命周期钩子</td>\n</tr>\n<tr>\n<td>状态管理</td>\n<td>可以使用 <code>this.state</code> 来管理内部状态。更适合需要复杂状态管理或需要对生命周期有更细粒度控制的场景</td>\n<td>使用 <code>useState</code> 和 <code>useReducer</code> 等 React Hooks 来管理内部状态。</td>\n</tr>\n<tr>\n<td>其他</td>\n<td>类组件有更好继承性和扩展性的</td>\n<td>函数组件是更简洁、更轻量的实现方式<br />优化了性能，因为它们本质上是无状态的。 <br /><br /> 函数组件可以直接使用 React Hooks，使得状态管理和副作用处理变得更加简洁和灵活。</td>\n</tr>\n</tbody></table>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>类组件</strong>：更适合复杂状态管理或需要使用生命周期钩子的场景。<br><strong>函数组件</strong>：简洁、无状态，更推荐用于简单组件和现代 React 应用。</p>\n","excerpt":"","more":"<h2 id=\"类组件\"><a href=\"#类组件\" class=\"headerlink\" title=\"类组件\"></a>类组件</h2><p>顾名思义，使用<code>es6</code>类的方式去编写组件,该类必须继承<code>React.Component</code></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Welcome</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"函数组件\"><a href=\"#函数组件\" class=\"headerlink\" title=\"函数组件\"></a>函数组件</h2><p>通过函数编写的形式去实现一个 <code>React</code> 组件，是 <code>React</code> 中定义组件最简单的方式</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><table>\n<thead>\n<tr>\n<th>类别</th>\n<th>类组件</th>\n<th>函数组件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>定义方式</td>\n<td>使用 ES6 类语法</td>\n<td>使用函数表达式</td>\n</tr>\n<tr>\n<td>生命周期</td>\n<td>支持生命周期,如 <code>componentDidMount</code>, <code>componentDidUpdate</code>, <code>componentWillUnmount</code> 等</td>\n<td>没有直接的生命周期<br />通常使用 <code>useEffect</code> 和 <code>useReducer</code> 等 React Hooks 来代替类组件中的生命周期钩子</td>\n</tr>\n<tr>\n<td>状态管理</td>\n<td>可以使用 <code>this.state</code> 来管理内部状态。更适合需要复杂状态管理或需要对生命周期有更细粒度控制的场景</td>\n<td>使用 <code>useState</code> 和 <code>useReducer</code> 等 React Hooks 来管理内部状态。</td>\n</tr>\n<tr>\n<td>其他</td>\n<td>类组件有更好继承性和扩展性的</td>\n<td>函数组件是更简洁、更轻量的实现方式<br />优化了性能，因为它们本质上是无状态的。 <br /><br /> 函数组件可以直接使用 React Hooks，使得状态管理和副作用处理变得更加简洁和灵活。</td>\n</tr>\n</tbody></table>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>类组件</strong>：更适合复杂状态管理或需要使用生命周期钩子的场景。<br><strong>函数组件</strong>：简洁、无状态，更推荐用于简单组件和现代 React 应用。</p>\n"},{"title":"React 18 更新内容","_content":"\nReact 18 是 React 框架的一个重要版本更新，为开发者带来了诸多新的功能和优化，特别是在并发渲染、性能提升和用户体验方面的改进。本文将为您全面解析 React 18 的更新要点，包括并发特性、新的 API、服务端渲染增强以及性能改进，帮助您更好地理解并使用这些新特性。\n\n---\n\n### 1. 并发特性：提升渲染体验和性能\n\nReact 18 引入了并发特性（Concurrent Features），使得 React 能够更智能地处理 UI 更新，避免阻塞主线程，实现更顺畅的用户体验。\n\n- **自动批量更新**：在 React 18 中，所有的状态更新都会自动进行批量处理，无论是事件处理器内部还是异步回调函数中的更新。这项改进能够减少渲染次数，从而提升性能。例如，以前在异步代码中更新多个状态会触发多次渲染，而现在这些更新将合并成一次渲染。\n- **`startTransition` API**：这个新 API 使开发者能够区分“紧急”和“非紧急”更新。在不需要立刻完成的更新（如页面内容加载等）中，可以使用 `startTransition` 将其标记为非紧急，允许 React 在有空闲时间时再执行这些更新，从而避免阻塞用户操作。\n\n### 2. 新的 `useId` Hook\n\nReact 18 引入了一个新的 Hook：`useId`，用于生成唯一的 ID。该功能尤其适用于在 SSR 和客户端渲染中保持 ID 的一致性，比如表单元素的 `id` 属性、ARIA 属性等场景。通过 `useId`，开发者可以避免手动管理 ID，减少冲突风险，增强代码的可维护性。\n\n### 3. `Suspense` 的服务端渲染改进\n\n`Suspense` 是 React 中实现异步组件加载的重要工具，而在 React 18 中，其功能得到了进一步增强：\n\n- **服务端渲染支持**：React 18 允许 `Suspense` 在服务端渲染（SSR）时处理异步数据。这意味着开发者可以使用 `Suspense` 直接控制组件的数据加载和显示顺序，服务器将自动生成更流畅的内容加载体验。这一改进能够显著减少白屏时间，提高页面响应速度。\n\n### 4. 新的流式服务器端渲染 API（Streaming Server Rendering）\n\nReact 18 提供了新的流式服务器端渲染方法。通过分块传输内容，服务器可以在部分内容渲染完毕后就将其发送到客户端，使得应用可以更早地展示内容。相比之前的 SSR 模式，这种流式渲染方式能够提升初始加载速度，为用户带来更加流畅的浏览体验。\n\n### 5. 新的 Hooks：`useTransition` 和 `useDeferredValue`\n\n- **`useTransition`**：这是 React 18 中另一个用于处理并发更新的 Hook，可以搭配 `startTransition` 使用。通过将一些低优先级的更新（如数据加载）放入 `useTransition` 中，React 可以推迟这些更新的执行，从而保证页面的流畅性，特别适合在复杂交互场景下使用。\n- **`useDeferredValue`**：此 Hook 允许将某些更新延迟到后续的空闲时间再处理。对于那些需要频繁交互的组件（例如输入框、搜索框等），`useDeferredValue` 能够有效减少重新渲染的次数，避免卡顿。\n\n### 6. 严格模式中的双重渲染\n\nReact 18 加强了开发环境下的严格模式（Strict Mode），在首次渲染组件时会触发两次渲染。这一机制帮助开发者更容易检测副作用，确保组件的行为稳定。虽然双重渲染仅在开发模式下启用，但它能有效帮助开发者找到隐藏的依赖和潜在问题，提高代码质量。\n\n### 7. 全新的 `createRoot` API\n\n在 React 18 中，`createRoot` API 取代了 `ReactDOM.render`。使用 `createRoot` 可以启用并发特性，进一步提升渲染性能。开发者需要注意，React 18 的 `createRoot` 是启用并发渲染的必要步骤，在挂载根组件时必须使用。例如：\n\n```jsx\nimport { createRoot } from \"react-dom/client\";\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n```\n\n### 8. 全局错误处理与新的错误恢复机制\n\nReact 18 中改进了全局错误处理和恢复机制，增强了应用的稳定性。例如，部分组件在遇到错误时会自动重新渲染，而无需刷新整个应用，这样的增强使得应用在面对意外错误时可以更平稳地恢复。\n","source":"_posts/code/react/react18-d.md","raw":"---\ntitle: React 18 更新内容\ntags:\n  - javascript\n  - react\n  - 基础\ncategories:\n  - 技术\n  - 学习\n---\n\nReact 18 是 React 框架的一个重要版本更新，为开发者带来了诸多新的功能和优化，特别是在并发渲染、性能提升和用户体验方面的改进。本文将为您全面解析 React 18 的更新要点，包括并发特性、新的 API、服务端渲染增强以及性能改进，帮助您更好地理解并使用这些新特性。\n\n---\n\n### 1. 并发特性：提升渲染体验和性能\n\nReact 18 引入了并发特性（Concurrent Features），使得 React 能够更智能地处理 UI 更新，避免阻塞主线程，实现更顺畅的用户体验。\n\n- **自动批量更新**：在 React 18 中，所有的状态更新都会自动进行批量处理，无论是事件处理器内部还是异步回调函数中的更新。这项改进能够减少渲染次数，从而提升性能。例如，以前在异步代码中更新多个状态会触发多次渲染，而现在这些更新将合并成一次渲染。\n- **`startTransition` API**：这个新 API 使开发者能够区分“紧急”和“非紧急”更新。在不需要立刻完成的更新（如页面内容加载等）中，可以使用 `startTransition` 将其标记为非紧急，允许 React 在有空闲时间时再执行这些更新，从而避免阻塞用户操作。\n\n### 2. 新的 `useId` Hook\n\nReact 18 引入了一个新的 Hook：`useId`，用于生成唯一的 ID。该功能尤其适用于在 SSR 和客户端渲染中保持 ID 的一致性，比如表单元素的 `id` 属性、ARIA 属性等场景。通过 `useId`，开发者可以避免手动管理 ID，减少冲突风险，增强代码的可维护性。\n\n### 3. `Suspense` 的服务端渲染改进\n\n`Suspense` 是 React 中实现异步组件加载的重要工具，而在 React 18 中，其功能得到了进一步增强：\n\n- **服务端渲染支持**：React 18 允许 `Suspense` 在服务端渲染（SSR）时处理异步数据。这意味着开发者可以使用 `Suspense` 直接控制组件的数据加载和显示顺序，服务器将自动生成更流畅的内容加载体验。这一改进能够显著减少白屏时间，提高页面响应速度。\n\n### 4. 新的流式服务器端渲染 API（Streaming Server Rendering）\n\nReact 18 提供了新的流式服务器端渲染方法。通过分块传输内容，服务器可以在部分内容渲染完毕后就将其发送到客户端，使得应用可以更早地展示内容。相比之前的 SSR 模式，这种流式渲染方式能够提升初始加载速度，为用户带来更加流畅的浏览体验。\n\n### 5. 新的 Hooks：`useTransition` 和 `useDeferredValue`\n\n- **`useTransition`**：这是 React 18 中另一个用于处理并发更新的 Hook，可以搭配 `startTransition` 使用。通过将一些低优先级的更新（如数据加载）放入 `useTransition` 中，React 可以推迟这些更新的执行，从而保证页面的流畅性，特别适合在复杂交互场景下使用。\n- **`useDeferredValue`**：此 Hook 允许将某些更新延迟到后续的空闲时间再处理。对于那些需要频繁交互的组件（例如输入框、搜索框等），`useDeferredValue` 能够有效减少重新渲染的次数，避免卡顿。\n\n### 6. 严格模式中的双重渲染\n\nReact 18 加强了开发环境下的严格模式（Strict Mode），在首次渲染组件时会触发两次渲染。这一机制帮助开发者更容易检测副作用，确保组件的行为稳定。虽然双重渲染仅在开发模式下启用，但它能有效帮助开发者找到隐藏的依赖和潜在问题，提高代码质量。\n\n### 7. 全新的 `createRoot` API\n\n在 React 18 中，`createRoot` API 取代了 `ReactDOM.render`。使用 `createRoot` 可以启用并发特性，进一步提升渲染性能。开发者需要注意，React 18 的 `createRoot` 是启用并发渲染的必要步骤，在挂载根组件时必须使用。例如：\n\n```jsx\nimport { createRoot } from \"react-dom/client\";\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n```\n\n### 8. 全局错误处理与新的错误恢复机制\n\nReact 18 中改进了全局错误处理和恢复机制，增强了应用的稳定性。例如，部分组件在遇到错误时会自动重新渲染，而无需刷新整个应用，这样的增强使得应用在面对意外错误时可以更平稳地恢复。\n","slug":"code/react/react18-d","published":1,"date":"2024-12-27T09:18:36.034Z","updated":"2024-12-27T09:18:36.034Z","comments":1,"layout":"post","photos":[],"_id":"cm56jrk0y000c3zp96po88dum","content":"<p>React 18 是 React 框架的一个重要版本更新，为开发者带来了诸多新的功能和优化，特别是在并发渲染、性能提升和用户体验方面的改进。本文将为您全面解析 React 18 的更新要点，包括并发特性、新的 API、服务端渲染增强以及性能改进，帮助您更好地理解并使用这些新特性。</p>\n<hr>\n<h3 id=\"1-并发特性：提升渲染体验和性能\"><a href=\"#1-并发特性：提升渲染体验和性能\" class=\"headerlink\" title=\"1. 并发特性：提升渲染体验和性能\"></a>1. 并发特性：提升渲染体验和性能</h3><p>React 18 引入了并发特性（Concurrent Features），使得 React 能够更智能地处理 UI 更新，避免阻塞主线程，实现更顺畅的用户体验。</p>\n<ul>\n<li><strong>自动批量更新</strong>：在 React 18 中，所有的状态更新都会自动进行批量处理，无论是事件处理器内部还是异步回调函数中的更新。这项改进能够减少渲染次数，从而提升性能。例如，以前在异步代码中更新多个状态会触发多次渲染，而现在这些更新将合并成一次渲染。</li>\n<li><strong><code>startTransition</code> API</strong>：这个新 API 使开发者能够区分“紧急”和“非紧急”更新。在不需要立刻完成的更新（如页面内容加载等）中，可以使用 <code>startTransition</code> 将其标记为非紧急，允许 React 在有空闲时间时再执行这些更新，从而避免阻塞用户操作。</li>\n</ul>\n<h3 id=\"2-新的-useId-Hook\"><a href=\"#2-新的-useId-Hook\" class=\"headerlink\" title=\"2. 新的 useId Hook\"></a>2. 新的 <code>useId</code> Hook</h3><p>React 18 引入了一个新的 Hook：<code>useId</code>，用于生成唯一的 ID。该功能尤其适用于在 SSR 和客户端渲染中保持 ID 的一致性，比如表单元素的 <code>id</code> 属性、ARIA 属性等场景。通过 <code>useId</code>，开发者可以避免手动管理 ID，减少冲突风险，增强代码的可维护性。</p>\n<h3 id=\"3-Suspense-的服务端渲染改进\"><a href=\"#3-Suspense-的服务端渲染改进\" class=\"headerlink\" title=\"3. Suspense 的服务端渲染改进\"></a>3. <code>Suspense</code> 的服务端渲染改进</h3><p><code>Suspense</code> 是 React 中实现异步组件加载的重要工具，而在 React 18 中，其功能得到了进一步增强：</p>\n<ul>\n<li><strong>服务端渲染支持</strong>：React 18 允许 <code>Suspense</code> 在服务端渲染（SSR）时处理异步数据。这意味着开发者可以使用 <code>Suspense</code> 直接控制组件的数据加载和显示顺序，服务器将自动生成更流畅的内容加载体验。这一改进能够显著减少白屏时间，提高页面响应速度。</li>\n</ul>\n<h3 id=\"4-新的流式服务器端渲染-API（Streaming-Server-Rendering）\"><a href=\"#4-新的流式服务器端渲染-API（Streaming-Server-Rendering）\" class=\"headerlink\" title=\"4. 新的流式服务器端渲染 API（Streaming Server Rendering）\"></a>4. 新的流式服务器端渲染 API（Streaming Server Rendering）</h3><p>React 18 提供了新的流式服务器端渲染方法。通过分块传输内容，服务器可以在部分内容渲染完毕后就将其发送到客户端，使得应用可以更早地展示内容。相比之前的 SSR 模式，这种流式渲染方式能够提升初始加载速度，为用户带来更加流畅的浏览体验。</p>\n<h3 id=\"5-新的-Hooks：useTransition-和-useDeferredValue\"><a href=\"#5-新的-Hooks：useTransition-和-useDeferredValue\" class=\"headerlink\" title=\"5. 新的 Hooks：useTransition 和 useDeferredValue\"></a>5. 新的 Hooks：<code>useTransition</code> 和 <code>useDeferredValue</code></h3><ul>\n<li>**<code>useTransition</code>**：这是 React 18 中另一个用于处理并发更新的 Hook，可以搭配 <code>startTransition</code> 使用。通过将一些低优先级的更新（如数据加载）放入 <code>useTransition</code> 中，React 可以推迟这些更新的执行，从而保证页面的流畅性，特别适合在复杂交互场景下使用。</li>\n<li>**<code>useDeferredValue</code>**：此 Hook 允许将某些更新延迟到后续的空闲时间再处理。对于那些需要频繁交互的组件（例如输入框、搜索框等），<code>useDeferredValue</code> 能够有效减少重新渲染的次数，避免卡顿。</li>\n</ul>\n<h3 id=\"6-严格模式中的双重渲染\"><a href=\"#6-严格模式中的双重渲染\" class=\"headerlink\" title=\"6. 严格模式中的双重渲染\"></a>6. 严格模式中的双重渲染</h3><p>React 18 加强了开发环境下的严格模式（Strict Mode），在首次渲染组件时会触发两次渲染。这一机制帮助开发者更容易检测副作用，确保组件的行为稳定。虽然双重渲染仅在开发模式下启用，但它能有效帮助开发者找到隐藏的依赖和潜在问题，提高代码质量。</p>\n<h3 id=\"7-全新的-createRoot-API\"><a href=\"#7-全新的-createRoot-API\" class=\"headerlink\" title=\"7. 全新的 createRoot API\"></a>7. 全新的 <code>createRoot</code> API</h3><p>在 React 18 中，<code>createRoot</code> API 取代了 <code>ReactDOM.render</code>。使用 <code>createRoot</code> 可以启用并发特性，进一步提升渲染性能。开发者需要注意，React 18 的 <code>createRoot</code> 是启用并发渲染的必要步骤，在挂载根组件时必须使用。例如：</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRoot <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/client\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"8-全局错误处理与新的错误恢复机制\"><a href=\"#8-全局错误处理与新的错误恢复机制\" class=\"headerlink\" title=\"8. 全局错误处理与新的错误恢复机制\"></a>8. 全局错误处理与新的错误恢复机制</h3><p>React 18 中改进了全局错误处理和恢复机制，增强了应用的稳定性。例如，部分组件在遇到错误时会自动重新渲染，而无需刷新整个应用，这样的增强使得应用在面对意外错误时可以更平稳地恢复。</p>\n","excerpt":"","more":"<p>React 18 是 React 框架的一个重要版本更新，为开发者带来了诸多新的功能和优化，特别是在并发渲染、性能提升和用户体验方面的改进。本文将为您全面解析 React 18 的更新要点，包括并发特性、新的 API、服务端渲染增强以及性能改进，帮助您更好地理解并使用这些新特性。</p>\n<hr>\n<h3 id=\"1-并发特性：提升渲染体验和性能\"><a href=\"#1-并发特性：提升渲染体验和性能\" class=\"headerlink\" title=\"1. 并发特性：提升渲染体验和性能\"></a>1. 并发特性：提升渲染体验和性能</h3><p>React 18 引入了并发特性（Concurrent Features），使得 React 能够更智能地处理 UI 更新，避免阻塞主线程，实现更顺畅的用户体验。</p>\n<ul>\n<li><strong>自动批量更新</strong>：在 React 18 中，所有的状态更新都会自动进行批量处理，无论是事件处理器内部还是异步回调函数中的更新。这项改进能够减少渲染次数，从而提升性能。例如，以前在异步代码中更新多个状态会触发多次渲染，而现在这些更新将合并成一次渲染。</li>\n<li><strong><code>startTransition</code> API</strong>：这个新 API 使开发者能够区分“紧急”和“非紧急”更新。在不需要立刻完成的更新（如页面内容加载等）中，可以使用 <code>startTransition</code> 将其标记为非紧急，允许 React 在有空闲时间时再执行这些更新，从而避免阻塞用户操作。</li>\n</ul>\n<h3 id=\"2-新的-useId-Hook\"><a href=\"#2-新的-useId-Hook\" class=\"headerlink\" title=\"2. 新的 useId Hook\"></a>2. 新的 <code>useId</code> Hook</h3><p>React 18 引入了一个新的 Hook：<code>useId</code>，用于生成唯一的 ID。该功能尤其适用于在 SSR 和客户端渲染中保持 ID 的一致性，比如表单元素的 <code>id</code> 属性、ARIA 属性等场景。通过 <code>useId</code>，开发者可以避免手动管理 ID，减少冲突风险，增强代码的可维护性。</p>\n<h3 id=\"3-Suspense-的服务端渲染改进\"><a href=\"#3-Suspense-的服务端渲染改进\" class=\"headerlink\" title=\"3. Suspense 的服务端渲染改进\"></a>3. <code>Suspense</code> 的服务端渲染改进</h3><p><code>Suspense</code> 是 React 中实现异步组件加载的重要工具，而在 React 18 中，其功能得到了进一步增强：</p>\n<ul>\n<li><strong>服务端渲染支持</strong>：React 18 允许 <code>Suspense</code> 在服务端渲染（SSR）时处理异步数据。这意味着开发者可以使用 <code>Suspense</code> 直接控制组件的数据加载和显示顺序，服务器将自动生成更流畅的内容加载体验。这一改进能够显著减少白屏时间，提高页面响应速度。</li>\n</ul>\n<h3 id=\"4-新的流式服务器端渲染-API（Streaming-Server-Rendering）\"><a href=\"#4-新的流式服务器端渲染-API（Streaming-Server-Rendering）\" class=\"headerlink\" title=\"4. 新的流式服务器端渲染 API（Streaming Server Rendering）\"></a>4. 新的流式服务器端渲染 API（Streaming Server Rendering）</h3><p>React 18 提供了新的流式服务器端渲染方法。通过分块传输内容，服务器可以在部分内容渲染完毕后就将其发送到客户端，使得应用可以更早地展示内容。相比之前的 SSR 模式，这种流式渲染方式能够提升初始加载速度，为用户带来更加流畅的浏览体验。</p>\n<h3 id=\"5-新的-Hooks：useTransition-和-useDeferredValue\"><a href=\"#5-新的-Hooks：useTransition-和-useDeferredValue\" class=\"headerlink\" title=\"5. 新的 Hooks：useTransition 和 useDeferredValue\"></a>5. 新的 Hooks：<code>useTransition</code> 和 <code>useDeferredValue</code></h3><ul>\n<li>**<code>useTransition</code>**：这是 React 18 中另一个用于处理并发更新的 Hook，可以搭配 <code>startTransition</code> 使用。通过将一些低优先级的更新（如数据加载）放入 <code>useTransition</code> 中，React 可以推迟这些更新的执行，从而保证页面的流畅性，特别适合在复杂交互场景下使用。</li>\n<li>**<code>useDeferredValue</code>**：此 Hook 允许将某些更新延迟到后续的空闲时间再处理。对于那些需要频繁交互的组件（例如输入框、搜索框等），<code>useDeferredValue</code> 能够有效减少重新渲染的次数，避免卡顿。</li>\n</ul>\n<h3 id=\"6-严格模式中的双重渲染\"><a href=\"#6-严格模式中的双重渲染\" class=\"headerlink\" title=\"6. 严格模式中的双重渲染\"></a>6. 严格模式中的双重渲染</h3><p>React 18 加强了开发环境下的严格模式（Strict Mode），在首次渲染组件时会触发两次渲染。这一机制帮助开发者更容易检测副作用，确保组件的行为稳定。虽然双重渲染仅在开发模式下启用，但它能有效帮助开发者找到隐藏的依赖和潜在问题，提高代码质量。</p>\n<h3 id=\"7-全新的-createRoot-API\"><a href=\"#7-全新的-createRoot-API\" class=\"headerlink\" title=\"7. 全新的 createRoot API\"></a>7. 全新的 <code>createRoot</code> API</h3><p>在 React 18 中，<code>createRoot</code> API 取代了 <code>ReactDOM.render</code>。使用 <code>createRoot</code> 可以启用并发特性，进一步提升渲染性能。开发者需要注意，React 18 的 <code>createRoot</code> 是启用并发渲染的必要步骤，在挂载根组件时必须使用。例如：</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRoot <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom/client\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> <span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"8-全局错误处理与新的错误恢复机制\"><a href=\"#8-全局错误处理与新的错误恢复机制\" class=\"headerlink\" title=\"8. 全局错误处理与新的错误恢复机制\"></a>8. 全局错误处理与新的错误恢复机制</h3><p>React 18 中改进了全局错误处理和恢复机制，增强了应用的稳定性。例如，部分组件在遇到错误时会自动重新渲染，而无需刷新整个应用，这样的增强使得应用在面对意外错误时可以更平稳地恢复。</p>\n"},{"title":"CSS 预编译和后编译的区别","date":"2024-05-14T13:20:00.000Z","_content":"\n### CSS 预编译和后编译的区别\n\n在现代前端开发中，CSS 的处理方式已经远远超出了简单的静态样式表。为了更高效地管理和优化 CSS，我们可以使用预编译（Pre-compilation）和后编译（Post-compilation）技术。本文将详细介绍这两者的区别，并讨论它们各自的优缺点及适用场景。\n\n### 一、CSS 预编译（Pre-compilation）\n\nCSS 预编译是指在开发阶段使用 CSS 预处理器（如 Sass、LESS、Stylus 等）将编写的预处理语言转换成标准的 CSS 文件。这些预处理语言提供了更强大的功能，如变量、嵌套规则、混合（mixins）和继承等，使 CSS 的编写更加简洁和可维护。\n\n### 常见的 CSS 预处理器：\n\n1. **Sass/SCSS**：\n\n   ```scss\n   $primary-color: #333;\n\n   body {\n     color: $primary-color;\n     .container {\n       margin: 0 auto;\n     }\n   }\n   ```\n\n2. **LESS**：\n\n   ```less\n   @primary-color: #333;\n\n   body {\n     color: @primary-color;\n     .container {\n       margin: 0 auto;\n     }\n   }\n   ```\n\n3. **Stylus**：\n\n   ```\n   primary-color = #333\n\n   body\n     color primary-color\n     .container\n       margin 0 auto\n\n   ```\n\n### 优点：\n\n- **增强的功能**：支持变量、嵌套、混合、继承等高级功能，使 CSS 更加灵活和易于维护。\n- **代码可读性和可维护性高**：模块化的写法使得代码结构更清晰，易于管理。\n- **提高开发效率**：简化了重复性的代码书写，通过预处理器可以自动生成复杂的 CSS。\n\n### 缺点：\n\n- **需要编译步骤**：需要在开发过程中编译成标准的 CSS，增加了构建步骤和工具配置的复杂性。\n- **学习成本**：开发者需要学习预处理语言的语法和使用方法。\n\n### 二、CSS 后编译（Post-compilation）\n\nCSS 后编译指的是在开发和构建阶段使用工具（如 PostCSS）对已经编写好的 CSS 文件进行进一步处理和优化。这些工具可以执行诸如自动添加浏览器前缀、压缩 CSS、转译现代 CSS 特性、分割和合并文件等任务。\n\n### 常见的后编译工具和插件：\n\n1. **PostCSS**：一个强大的工具，支持多种插件来处理和优化 CSS。\n   - **Autoprefixer**：自动添加不同浏览器的前缀。\n     ```jsx\n     const autoprefixer = require(\"autoprefixer\");\n     postcss([autoprefixer])\n       .process(css)\n       .then((result) => {\n         fs.writeFileSync(\"output.css\", result.css);\n       });\n     ```\n   - **cssnano**：压缩和优化 CSS 文件。\n     ```jsx\n     const cssnano = require(\"cssnano\");\n     postcss([cssnano])\n       .process(css)\n       .then((result) => {\n         fs.writeFileSync(\"output.min.css\", result.css);\n       });\n     ```\n\n### 优点：\n\n- **代码优化**：可以自动化地优化和压缩 CSS，减少文件大小，提高加载速度。\n- **提高兼容性**：通过插件如 Autoprefixer 自动添加必要的浏览器前缀，确保跨浏览器兼容性。\n- **现代特性支持**：可以使用插件转译最新的 CSS 特性，使其兼容旧版浏览器。\n\n### 缺点：\n\n- **依赖工具链**：需要配置和维护相应的工具链，增加了项目的复杂性。\n- **调试复杂性**：生成的代码可能难以直接调试，需要额外的映射文件（source maps）来帮助调试。\n\n### 三、应用场景及选择\n\n1. **小型项目**：对于小型项目，可以选择使用 CSS 预编译。预处理器的简洁语法和增强功能可以显著提高开发效率和代码的可维护性。\n2. **大型项目**：对于大型项目，建议结合使用预编译和后编译。预处理器用于编写结构化和模块化的 CSS，而后编译工具则用于最终的优化和兼容性处理。\n3. **团队协作**：在团队开发中，预编译和后编译工具的结合使用可以确保代码的一致性和质量。预处理器帮助团队成员保持统一的编码风格，而后编译工具则确保生成的 CSS 具备最佳性能和兼容性。\n\n### 结论\n\nCSS 预编译和后编译在现代前端开发中各自扮演着重要的角色。预编译通过提供更强大的语言特性和结构化的代码组织，提升了开发效率和代码的可维护性；后编译则通过自动化优化和兼容性处理，确保生成的 CSS 文件具备最佳性能和广泛的浏览器支持。在实际开发中，根据项目需求和团队情况，选择合适的技术或结合使用，可以最大化地发挥它们的优势。\n","source":"_posts/code/javascript/CSS 预编译和后编译的区别.md","raw":"---\ntitle: CSS 预编译和后编译的区别\ndate: 2024-5-14 21:20\ntags:\n  - css\ncategories:\n  - 技术\n  - 学习\n---\n\n### CSS 预编译和后编译的区别\n\n在现代前端开发中，CSS 的处理方式已经远远超出了简单的静态样式表。为了更高效地管理和优化 CSS，我们可以使用预编译（Pre-compilation）和后编译（Post-compilation）技术。本文将详细介绍这两者的区别，并讨论它们各自的优缺点及适用场景。\n\n### 一、CSS 预编译（Pre-compilation）\n\nCSS 预编译是指在开发阶段使用 CSS 预处理器（如 Sass、LESS、Stylus 等）将编写的预处理语言转换成标准的 CSS 文件。这些预处理语言提供了更强大的功能，如变量、嵌套规则、混合（mixins）和继承等，使 CSS 的编写更加简洁和可维护。\n\n### 常见的 CSS 预处理器：\n\n1. **Sass/SCSS**：\n\n   ```scss\n   $primary-color: #333;\n\n   body {\n     color: $primary-color;\n     .container {\n       margin: 0 auto;\n     }\n   }\n   ```\n\n2. **LESS**：\n\n   ```less\n   @primary-color: #333;\n\n   body {\n     color: @primary-color;\n     .container {\n       margin: 0 auto;\n     }\n   }\n   ```\n\n3. **Stylus**：\n\n   ```\n   primary-color = #333\n\n   body\n     color primary-color\n     .container\n       margin 0 auto\n\n   ```\n\n### 优点：\n\n- **增强的功能**：支持变量、嵌套、混合、继承等高级功能，使 CSS 更加灵活和易于维护。\n- **代码可读性和可维护性高**：模块化的写法使得代码结构更清晰，易于管理。\n- **提高开发效率**：简化了重复性的代码书写，通过预处理器可以自动生成复杂的 CSS。\n\n### 缺点：\n\n- **需要编译步骤**：需要在开发过程中编译成标准的 CSS，增加了构建步骤和工具配置的复杂性。\n- **学习成本**：开发者需要学习预处理语言的语法和使用方法。\n\n### 二、CSS 后编译（Post-compilation）\n\nCSS 后编译指的是在开发和构建阶段使用工具（如 PostCSS）对已经编写好的 CSS 文件进行进一步处理和优化。这些工具可以执行诸如自动添加浏览器前缀、压缩 CSS、转译现代 CSS 特性、分割和合并文件等任务。\n\n### 常见的后编译工具和插件：\n\n1. **PostCSS**：一个强大的工具，支持多种插件来处理和优化 CSS。\n   - **Autoprefixer**：自动添加不同浏览器的前缀。\n     ```jsx\n     const autoprefixer = require(\"autoprefixer\");\n     postcss([autoprefixer])\n       .process(css)\n       .then((result) => {\n         fs.writeFileSync(\"output.css\", result.css);\n       });\n     ```\n   - **cssnano**：压缩和优化 CSS 文件。\n     ```jsx\n     const cssnano = require(\"cssnano\");\n     postcss([cssnano])\n       .process(css)\n       .then((result) => {\n         fs.writeFileSync(\"output.min.css\", result.css);\n       });\n     ```\n\n### 优点：\n\n- **代码优化**：可以自动化地优化和压缩 CSS，减少文件大小，提高加载速度。\n- **提高兼容性**：通过插件如 Autoprefixer 自动添加必要的浏览器前缀，确保跨浏览器兼容性。\n- **现代特性支持**：可以使用插件转译最新的 CSS 特性，使其兼容旧版浏览器。\n\n### 缺点：\n\n- **依赖工具链**：需要配置和维护相应的工具链，增加了项目的复杂性。\n- **调试复杂性**：生成的代码可能难以直接调试，需要额外的映射文件（source maps）来帮助调试。\n\n### 三、应用场景及选择\n\n1. **小型项目**：对于小型项目，可以选择使用 CSS 预编译。预处理器的简洁语法和增强功能可以显著提高开发效率和代码的可维护性。\n2. **大型项目**：对于大型项目，建议结合使用预编译和后编译。预处理器用于编写结构化和模块化的 CSS，而后编译工具则用于最终的优化和兼容性处理。\n3. **团队协作**：在团队开发中，预编译和后编译工具的结合使用可以确保代码的一致性和质量。预处理器帮助团队成员保持统一的编码风格，而后编译工具则确保生成的 CSS 具备最佳性能和兼容性。\n\n### 结论\n\nCSS 预编译和后编译在现代前端开发中各自扮演着重要的角色。预编译通过提供更强大的语言特性和结构化的代码组织，提升了开发效率和代码的可维护性；后编译则通过自动化优化和兼容性处理，确保生成的 CSS 文件具备最佳性能和广泛的浏览器支持。在实际开发中，根据项目需求和团队情况，选择合适的技术或结合使用，可以最大化地发挥它们的优势。\n","slug":"code/javascript/CSS 预编译和后编译的区别","published":1,"updated":"2024-12-27T09:18:36.033Z","comments":1,"layout":"post","photos":[],"_id":"cm56jrk0y000f3zp92ercfc2r","content":"<h3 id=\"CSS-预编译和后编译的区别\"><a href=\"#CSS-预编译和后编译的区别\" class=\"headerlink\" title=\"CSS 预编译和后编译的区别\"></a>CSS 预编译和后编译的区别</h3><p>在现代前端开发中，CSS 的处理方式已经远远超出了简单的静态样式表。为了更高效地管理和优化 CSS，我们可以使用预编译（Pre-compilation）和后编译（Post-compilation）技术。本文将详细介绍这两者的区别，并讨论它们各自的优缺点及适用场景。</p>\n<h3 id=\"一、CSS-预编译（Pre-compilation）\"><a href=\"#一、CSS-预编译（Pre-compilation）\" class=\"headerlink\" title=\"一、CSS 预编译（Pre-compilation）\"></a>一、CSS 预编译（Pre-compilation）</h3><p>CSS 预编译是指在开发阶段使用 CSS 预处理器（如 Sass、LESS、Stylus 等）将编写的预处理语言转换成标准的 CSS 文件。这些预处理语言提供了更强大的功能，如变量、嵌套规则、混合（mixins）和继承等，使 CSS 的编写更加简洁和可维护。</p>\n<h3 id=\"常见的-CSS-预处理器：\"><a href=\"#常见的-CSS-预处理器：\" class=\"headerlink\" title=\"常见的 CSS 预处理器：\"></a>常见的 CSS 预处理器：</h3><ol>\n<li><p><strong>Sass&#x2F;SCSS</strong>：</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$primary-color</span></span><span class=\"token punctuation\">:</span> #333<span class=\"token punctuation\">;</span>\n\n<span class=\"token selector\">body </span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$primary-color</span><span class=\"token punctuation\">;</span>\n  <span class=\"token selector\">.container </span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>LESS</strong>：</p>\n<pre class=\"line-numbers language-less\" data-language=\"less\"><code class=\"language-less\"><span class=\"token variable\">@primary-color<span class=\"token punctuation\">:</span></span> #333<span class=\"token punctuation\">;</span>\n\n<span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">@primary-color</span><span class=\"token punctuation\">;</span>\n  <span class=\"token selector\">.container</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>Stylus</strong>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">primary-color &#x3D; #333\n\nbody\n  color primary-color\n  .container\n    margin 0 auto\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h3><ul>\n<li><strong>增强的功能</strong>：支持变量、嵌套、混合、继承等高级功能，使 CSS 更加灵活和易于维护。</li>\n<li><strong>代码可读性和可维护性高</strong>：模块化的写法使得代码结构更清晰，易于管理。</li>\n<li><strong>提高开发效率</strong>：简化了重复性的代码书写，通过预处理器可以自动生成复杂的 CSS。</li>\n</ul>\n<h3 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h3><ul>\n<li><strong>需要编译步骤</strong>：需要在开发过程中编译成标准的 CSS，增加了构建步骤和工具配置的复杂性。</li>\n<li><strong>学习成本</strong>：开发者需要学习预处理语言的语法和使用方法。</li>\n</ul>\n<h3 id=\"二、CSS-后编译（Post-compilation）\"><a href=\"#二、CSS-后编译（Post-compilation）\" class=\"headerlink\" title=\"二、CSS 后编译（Post-compilation）\"></a>二、CSS 后编译（Post-compilation）</h3><p>CSS 后编译指的是在开发和构建阶段使用工具（如 PostCSS）对已经编写好的 CSS 文件进行进一步处理和优化。这些工具可以执行诸如自动添加浏览器前缀、压缩 CSS、转译现代 CSS 特性、分割和合并文件等任务。</p>\n<h3 id=\"常见的后编译工具和插件：\"><a href=\"#常见的后编译工具和插件：\" class=\"headerlink\" title=\"常见的后编译工具和插件：\"></a>常见的后编译工具和插件：</h3><ol>\n<li><strong>PostCSS</strong>：一个强大的工具，支持多种插件来处理和优化 CSS。<ul>\n<li><strong>Autoprefixer</strong>：自动添加不同浏览器的前缀。<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> autoprefixer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"autoprefixer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">postcss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>autoprefixer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>css<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output.css\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>css<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><strong>cssnano</strong>：压缩和优化 CSS 文件。<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> cssnano <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cssnano\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">postcss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>cssnano<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>css<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output.min.css\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>css<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"优点：-1\"><a href=\"#优点：-1\" class=\"headerlink\" title=\"优点：\"></a>优点：</h3><ul>\n<li><strong>代码优化</strong>：可以自动化地优化和压缩 CSS，减少文件大小，提高加载速度。</li>\n<li><strong>提高兼容性</strong>：通过插件如 Autoprefixer 自动添加必要的浏览器前缀，确保跨浏览器兼容性。</li>\n<li><strong>现代特性支持</strong>：可以使用插件转译最新的 CSS 特性，使其兼容旧版浏览器。</li>\n</ul>\n<h3 id=\"缺点：-1\"><a href=\"#缺点：-1\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h3><ul>\n<li><strong>依赖工具链</strong>：需要配置和维护相应的工具链，增加了项目的复杂性。</li>\n<li><strong>调试复杂性</strong>：生成的代码可能难以直接调试，需要额外的映射文件（source maps）来帮助调试。</li>\n</ul>\n<h3 id=\"三、应用场景及选择\"><a href=\"#三、应用场景及选择\" class=\"headerlink\" title=\"三、应用场景及选择\"></a>三、应用场景及选择</h3><ol>\n<li><strong>小型项目</strong>：对于小型项目，可以选择使用 CSS 预编译。预处理器的简洁语法和增强功能可以显著提高开发效率和代码的可维护性。</li>\n<li><strong>大型项目</strong>：对于大型项目，建议结合使用预编译和后编译。预处理器用于编写结构化和模块化的 CSS，而后编译工具则用于最终的优化和兼容性处理。</li>\n<li><strong>团队协作</strong>：在团队开发中，预编译和后编译工具的结合使用可以确保代码的一致性和质量。预处理器帮助团队成员保持统一的编码风格，而后编译工具则确保生成的 CSS 具备最佳性能和兼容性。</li>\n</ol>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>CSS 预编译和后编译在现代前端开发中各自扮演着重要的角色。预编译通过提供更强大的语言特性和结构化的代码组织，提升了开发效率和代码的可维护性；后编译则通过自动化优化和兼容性处理，确保生成的 CSS 文件具备最佳性能和广泛的浏览器支持。在实际开发中，根据项目需求和团队情况，选择合适的技术或结合使用，可以最大化地发挥它们的优势。</p>\n","excerpt":"","more":"<h3 id=\"CSS-预编译和后编译的区别\"><a href=\"#CSS-预编译和后编译的区别\" class=\"headerlink\" title=\"CSS 预编译和后编译的区别\"></a>CSS 预编译和后编译的区别</h3><p>在现代前端开发中，CSS 的处理方式已经远远超出了简单的静态样式表。为了更高效地管理和优化 CSS，我们可以使用预编译（Pre-compilation）和后编译（Post-compilation）技术。本文将详细介绍这两者的区别，并讨论它们各自的优缺点及适用场景。</p>\n<h3 id=\"一、CSS-预编译（Pre-compilation）\"><a href=\"#一、CSS-预编译（Pre-compilation）\" class=\"headerlink\" title=\"一、CSS 预编译（Pre-compilation）\"></a>一、CSS 预编译（Pre-compilation）</h3><p>CSS 预编译是指在开发阶段使用 CSS 预处理器（如 Sass、LESS、Stylus 等）将编写的预处理语言转换成标准的 CSS 文件。这些预处理语言提供了更强大的功能，如变量、嵌套规则、混合（mixins）和继承等，使 CSS 的编写更加简洁和可维护。</p>\n<h3 id=\"常见的-CSS-预处理器：\"><a href=\"#常见的-CSS-预处理器：\" class=\"headerlink\" title=\"常见的 CSS 预处理器：\"></a>常见的 CSS 预处理器：</h3><ol>\n<li><p><strong>Sass&#x2F;SCSS</strong>：</p>\n<pre class=\"line-numbers language-scss\" data-language=\"scss\"><code class=\"language-scss\"><span class=\"token property\"><span class=\"token variable\">$primary-color</span></span><span class=\"token punctuation\">:</span> #333<span class=\"token punctuation\">;</span>\n\n<span class=\"token selector\">body </span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$primary-color</span><span class=\"token punctuation\">;</span>\n  <span class=\"token selector\">.container </span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>LESS</strong>：</p>\n<pre class=\"line-numbers language-less\" data-language=\"less\"><code class=\"language-less\"><span class=\"token variable\">@primary-color<span class=\"token punctuation\">:</span></span> #333<span class=\"token punctuation\">;</span>\n\n<span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">@primary-color</span><span class=\"token punctuation\">;</span>\n  <span class=\"token selector\">.container</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p><strong>Stylus</strong>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">primary-color &#x3D; #333\n\nbody\n  color primary-color\n  .container\n    margin 0 auto\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h3><ul>\n<li><strong>增强的功能</strong>：支持变量、嵌套、混合、继承等高级功能，使 CSS 更加灵活和易于维护。</li>\n<li><strong>代码可读性和可维护性高</strong>：模块化的写法使得代码结构更清晰，易于管理。</li>\n<li><strong>提高开发效率</strong>：简化了重复性的代码书写，通过预处理器可以自动生成复杂的 CSS。</li>\n</ul>\n<h3 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h3><ul>\n<li><strong>需要编译步骤</strong>：需要在开发过程中编译成标准的 CSS，增加了构建步骤和工具配置的复杂性。</li>\n<li><strong>学习成本</strong>：开发者需要学习预处理语言的语法和使用方法。</li>\n</ul>\n<h3 id=\"二、CSS-后编译（Post-compilation）\"><a href=\"#二、CSS-后编译（Post-compilation）\" class=\"headerlink\" title=\"二、CSS 后编译（Post-compilation）\"></a>二、CSS 后编译（Post-compilation）</h3><p>CSS 后编译指的是在开发和构建阶段使用工具（如 PostCSS）对已经编写好的 CSS 文件进行进一步处理和优化。这些工具可以执行诸如自动添加浏览器前缀、压缩 CSS、转译现代 CSS 特性、分割和合并文件等任务。</p>\n<h3 id=\"常见的后编译工具和插件：\"><a href=\"#常见的后编译工具和插件：\" class=\"headerlink\" title=\"常见的后编译工具和插件：\"></a>常见的后编译工具和插件：</h3><ol>\n<li><strong>PostCSS</strong>：一个强大的工具，支持多种插件来处理和优化 CSS。<ul>\n<li><strong>Autoprefixer</strong>：自动添加不同浏览器的前缀。<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> autoprefixer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"autoprefixer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">postcss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>autoprefixer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>css<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output.css\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>css<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><strong>cssnano</strong>：压缩和优化 CSS 文件。<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> cssnano <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cssnano\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">postcss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>cssnano<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>css<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output.min.css\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>css<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"优点：-1\"><a href=\"#优点：-1\" class=\"headerlink\" title=\"优点：\"></a>优点：</h3><ul>\n<li><strong>代码优化</strong>：可以自动化地优化和压缩 CSS，减少文件大小，提高加载速度。</li>\n<li><strong>提高兼容性</strong>：通过插件如 Autoprefixer 自动添加必要的浏览器前缀，确保跨浏览器兼容性。</li>\n<li><strong>现代特性支持</strong>：可以使用插件转译最新的 CSS 特性，使其兼容旧版浏览器。</li>\n</ul>\n<h3 id=\"缺点：-1\"><a href=\"#缺点：-1\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h3><ul>\n<li><strong>依赖工具链</strong>：需要配置和维护相应的工具链，增加了项目的复杂性。</li>\n<li><strong>调试复杂性</strong>：生成的代码可能难以直接调试，需要额外的映射文件（source maps）来帮助调试。</li>\n</ul>\n<h3 id=\"三、应用场景及选择\"><a href=\"#三、应用场景及选择\" class=\"headerlink\" title=\"三、应用场景及选择\"></a>三、应用场景及选择</h3><ol>\n<li><strong>小型项目</strong>：对于小型项目，可以选择使用 CSS 预编译。预处理器的简洁语法和增强功能可以显著提高开发效率和代码的可维护性。</li>\n<li><strong>大型项目</strong>：对于大型项目，建议结合使用预编译和后编译。预处理器用于编写结构化和模块化的 CSS，而后编译工具则用于最终的优化和兼容性处理。</li>\n<li><strong>团队协作</strong>：在团队开发中，预编译和后编译工具的结合使用可以确保代码的一致性和质量。预处理器帮助团队成员保持统一的编码风格，而后编译工具则确保生成的 CSS 具备最佳性能和兼容性。</li>\n</ol>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>CSS 预编译和后编译在现代前端开发中各自扮演着重要的角色。预编译通过提供更强大的语言特性和结构化的代码组织，提升了开发效率和代码的可维护性；后编译则通过自动化优化和兼容性处理，确保生成的 CSS 文件具备最佳性能和广泛的浏览器支持。在实际开发中，根据项目需求和团队情况，选择合适的技术或结合使用，可以最大化地发挥它们的优势。</p>\n"},{"title":"for in 与 for of","date":"2024-02-28T13:20:00.000Z","_content":"\n## **`for...in` 迭代对象的属性：**\n\n- **`for...in`** 循环用于迭代对象的可枚举属性，包括继承的可枚举属性。\n- 在迭代过程中，它会遍历对象的所有可枚举属性名称，而不仅限于数组或类似数组的对象的索引。\n- 注意：**`for...in`** 不建议用于迭代数组，因为它会枚举数组的所有可枚举属性，包括原型链上的属性，而且迭代顺序不一定是按照数组的顺序。\n\n```jsx\nconst obj = { a: 1, b: 2, c: 3 };\n\nfor (let prop in obj) {\n  console.log(prop); // 输出：a, b, c\n}\n```\n\n## **`for...of` 迭代可迭代对象的值：**\n\n- **`for...of`** 循环用于迭代可迭代对象（如数组、Map、Set、字符串等）的元素值。\n- 在迭代过程中，它会遍历对象的值，而不是键或索引。\n- 对于普通的对象，它并不适用，因为普通对象不是可迭代的。\n\n```jsx\nconst arr = [1, 2, 3];\n\nfor (let value of arr) {\n  console.log(value); // 输出：1, 2, 3\n}\n```\n\n总的来说，**`for...in`** 用于迭代对象的属性，而 **`for...of`** 用于迭代可迭代对象的值。\n","source":"_posts/code/javascript/for in 与 for of.md","raw":"---\ntitle: for in 与 for of\ndate: 2024-2-28 21:20\ntags:\n  - javascript\ncategories:\n  - 技术\n  - 学习\n---\n\n## **`for...in` 迭代对象的属性：**\n\n- **`for...in`** 循环用于迭代对象的可枚举属性，包括继承的可枚举属性。\n- 在迭代过程中，它会遍历对象的所有可枚举属性名称，而不仅限于数组或类似数组的对象的索引。\n- 注意：**`for...in`** 不建议用于迭代数组，因为它会枚举数组的所有可枚举属性，包括原型链上的属性，而且迭代顺序不一定是按照数组的顺序。\n\n```jsx\nconst obj = { a: 1, b: 2, c: 3 };\n\nfor (let prop in obj) {\n  console.log(prop); // 输出：a, b, c\n}\n```\n\n## **`for...of` 迭代可迭代对象的值：**\n\n- **`for...of`** 循环用于迭代可迭代对象（如数组、Map、Set、字符串等）的元素值。\n- 在迭代过程中，它会遍历对象的值，而不是键或索引。\n- 对于普通的对象，它并不适用，因为普通对象不是可迭代的。\n\n```jsx\nconst arr = [1, 2, 3];\n\nfor (let value of arr) {\n  console.log(value); // 输出：1, 2, 3\n}\n```\n\n总的来说，**`for...in`** 用于迭代对象的属性，而 **`for...of`** 用于迭代可迭代对象的值。\n","slug":"code/javascript/for in 与 for of","published":1,"updated":"2024-12-27T09:18:36.033Z","comments":1,"layout":"post","photos":[],"_id":"cm56jrk0z000i3zp94kq89xku","content":"<h2 id=\"for-in-迭代对象的属性：\"><a href=\"#for-in-迭代对象的属性：\" class=\"headerlink\" title=\"for...in 迭代对象的属性：\"></a><strong><code>for...in</code> 迭代对象的属性：</strong></h2><ul>\n<li><strong><code>for...in</code></strong> 循环用于迭代对象的可枚举属性，包括继承的可枚举属性。</li>\n<li>在迭代过程中，它会遍历对象的所有可枚举属性名称，而不仅限于数组或类似数组的对象的索引。</li>\n<li>注意：**<code>for...in</code>** 不建议用于迭代数组，因为它会枚举数组的所有可枚举属性，包括原型链上的属性，而且迭代顺序不一定是按照数组的顺序。</li>\n</ul>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> prop <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：a, b, c</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"for-of-迭代可迭代对象的值：\"><a href=\"#for-of-迭代可迭代对象的值：\" class=\"headerlink\" title=\"for...of 迭代可迭代对象的值：\"></a><strong><code>for...of</code> 迭代可迭代对象的值：</strong></h2><ul>\n<li><strong><code>for...of</code></strong> 循环用于迭代可迭代对象（如数组、Map、Set、字符串等）的元素值。</li>\n<li>在迭代过程中，它会遍历对象的值，而不是键或索引。</li>\n<li>对于普通的对象，它并不适用，因为普通对象不是可迭代的。</li>\n</ul>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：1, 2, 3</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>总的来说，**<code>for...in</code>** 用于迭代对象的属性，而 <strong><code>for...of</code></strong> 用于迭代可迭代对象的值。</p>\n","excerpt":"","more":"<h2 id=\"for-in-迭代对象的属性：\"><a href=\"#for-in-迭代对象的属性：\" class=\"headerlink\" title=\"for...in 迭代对象的属性：\"></a><strong><code>for...in</code> 迭代对象的属性：</strong></h2><ul>\n<li><strong><code>for...in</code></strong> 循环用于迭代对象的可枚举属性，包括继承的可枚举属性。</li>\n<li>在迭代过程中，它会遍历对象的所有可枚举属性名称，而不仅限于数组或类似数组的对象的索引。</li>\n<li>注意：**<code>for...in</code>** 不建议用于迭代数组，因为它会枚举数组的所有可枚举属性，包括原型链上的属性，而且迭代顺序不一定是按照数组的顺序。</li>\n</ul>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> prop <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：a, b, c</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"for-of-迭代可迭代对象的值：\"><a href=\"#for-of-迭代可迭代对象的值：\" class=\"headerlink\" title=\"for...of 迭代可迭代对象的值：\"></a><strong><code>for...of</code> 迭代可迭代对象的值：</strong></h2><ul>\n<li><strong><code>for...of</code></strong> 循环用于迭代可迭代对象（如数组、Map、Set、字符串等）的元素值。</li>\n<li>在迭代过程中，它会遍历对象的值，而不是键或索引。</li>\n<li>对于普通的对象，它并不适用，因为普通对象不是可迭代的。</li>\n</ul>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出：1, 2, 3</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>总的来说，**<code>for...in</code>** 用于迭代对象的属性，而 <strong><code>for...of</code></strong> 用于迭代可迭代对象的值。</p>\n"},{"title":"闭包","date":"2024-03-27T13:20:00.000Z","_content":"\nJavaScript 中闭包是一种重要的编程概念，具有许多优点和一些缺点：\n\n**优点：**\n\n1. **保持状态：** 闭包可以捕获并保持其所在作用域的状态，即使函数执行完毕后，闭包仍然可以访问和修改其所捕获的变量，从而在后续调用中保持状态。\n2. **数据封装和隐藏：** 闭包允许将函数内部的数据隐藏在函数作用域内，从而实现了数据封装和隐藏。这有助于防止外部代码直接访问和修改内部数据，提高了程序的安全性和可维护性。\n3. **实现模块化：** 闭包可以用于实现模块化的代码结构，通过将一些函数和变量封装在闭包中，可以减少全局命名空间的污染，提高代码的可重用性和可维护性。\n4. **实现私有变量和方法：** 闭包可以用于模拟私有变量和方法，通过将变量和方法封装在闭包内部，外部代码无法直接访问，从而实现了一定程度的信息隐藏和封装。\n\n**缺点：**\n\n1. **内存泄漏：** 闭包会持有对其所在作用域的引用，如果闭包中包含对大量对象的引用，并且闭包没有被正确释放，就可能导致内存泄漏的问题，使得不再需要的对象无法被垃圾回收。\n2. **性能开销：** 由于闭包需要捕获外部作用域的状态，因此在创建和执行闭包时可能会产生一些额外的性能开销，特别是在嵌套的闭包中或者捕获大量变量时。\n3. **作用域链的影响：** 闭包的作用域链可能会影响代码的性能和可读性，尤其是在处理嵌套闭包时，需要小心避免作用域链过长导致的性能问题。\n\n综上所述，JavaScript 中的闭包是一种强大的编程特性，可以带来许多优点，但同时也需要注意一些潜在的缺点，合理地使用闭包可以提高代码的灵活性和可维护性。\n","source":"_posts/code/javascript/闭包.md","raw":"---\ntitle: 闭包\ndate: 2024-3-27 21:20\ntags:\n  - javascript\ncategories:\n  - 技术\n  - 学习\n---\n\nJavaScript 中闭包是一种重要的编程概念，具有许多优点和一些缺点：\n\n**优点：**\n\n1. **保持状态：** 闭包可以捕获并保持其所在作用域的状态，即使函数执行完毕后，闭包仍然可以访问和修改其所捕获的变量，从而在后续调用中保持状态。\n2. **数据封装和隐藏：** 闭包允许将函数内部的数据隐藏在函数作用域内，从而实现了数据封装和隐藏。这有助于防止外部代码直接访问和修改内部数据，提高了程序的安全性和可维护性。\n3. **实现模块化：** 闭包可以用于实现模块化的代码结构，通过将一些函数和变量封装在闭包中，可以减少全局命名空间的污染，提高代码的可重用性和可维护性。\n4. **实现私有变量和方法：** 闭包可以用于模拟私有变量和方法，通过将变量和方法封装在闭包内部，外部代码无法直接访问，从而实现了一定程度的信息隐藏和封装。\n\n**缺点：**\n\n1. **内存泄漏：** 闭包会持有对其所在作用域的引用，如果闭包中包含对大量对象的引用，并且闭包没有被正确释放，就可能导致内存泄漏的问题，使得不再需要的对象无法被垃圾回收。\n2. **性能开销：** 由于闭包需要捕获外部作用域的状态，因此在创建和执行闭包时可能会产生一些额外的性能开销，特别是在嵌套的闭包中或者捕获大量变量时。\n3. **作用域链的影响：** 闭包的作用域链可能会影响代码的性能和可读性，尤其是在处理嵌套闭包时，需要小心避免作用域链过长导致的性能问题。\n\n综上所述，JavaScript 中的闭包是一种强大的编程特性，可以带来许多优点，但同时也需要注意一些潜在的缺点，合理地使用闭包可以提高代码的灵活性和可维护性。\n","slug":"code/javascript/闭包","published":1,"updated":"2024-12-27T09:18:36.034Z","comments":1,"layout":"post","photos":[],"_id":"cm56jrk1200143zp9asvx6l2x","content":"<p>JavaScript 中闭包是一种重要的编程概念，具有许多优点和一些缺点：</p>\n<p><strong>优点：</strong></p>\n<ol>\n<li><strong>保持状态：</strong> 闭包可以捕获并保持其所在作用域的状态，即使函数执行完毕后，闭包仍然可以访问和修改其所捕获的变量，从而在后续调用中保持状态。</li>\n<li><strong>数据封装和隐藏：</strong> 闭包允许将函数内部的数据隐藏在函数作用域内，从而实现了数据封装和隐藏。这有助于防止外部代码直接访问和修改内部数据，提高了程序的安全性和可维护性。</li>\n<li><strong>实现模块化：</strong> 闭包可以用于实现模块化的代码结构，通过将一些函数和变量封装在闭包中，可以减少全局命名空间的污染，提高代码的可重用性和可维护性。</li>\n<li><strong>实现私有变量和方法：</strong> 闭包可以用于模拟私有变量和方法，通过将变量和方法封装在闭包内部，外部代码无法直接访问，从而实现了一定程度的信息隐藏和封装。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li><strong>内存泄漏：</strong> 闭包会持有对其所在作用域的引用，如果闭包中包含对大量对象的引用，并且闭包没有被正确释放，就可能导致内存泄漏的问题，使得不再需要的对象无法被垃圾回收。</li>\n<li><strong>性能开销：</strong> 由于闭包需要捕获外部作用域的状态，因此在创建和执行闭包时可能会产生一些额外的性能开销，特别是在嵌套的闭包中或者捕获大量变量时。</li>\n<li><strong>作用域链的影响：</strong> 闭包的作用域链可能会影响代码的性能和可读性，尤其是在处理嵌套闭包时，需要小心避免作用域链过长导致的性能问题。</li>\n</ol>\n<p>综上所述，JavaScript 中的闭包是一种强大的编程特性，可以带来许多优点，但同时也需要注意一些潜在的缺点，合理地使用闭包可以提高代码的灵活性和可维护性。</p>\n","excerpt":"","more":"<p>JavaScript 中闭包是一种重要的编程概念，具有许多优点和一些缺点：</p>\n<p><strong>优点：</strong></p>\n<ol>\n<li><strong>保持状态：</strong> 闭包可以捕获并保持其所在作用域的状态，即使函数执行完毕后，闭包仍然可以访问和修改其所捕获的变量，从而在后续调用中保持状态。</li>\n<li><strong>数据封装和隐藏：</strong> 闭包允许将函数内部的数据隐藏在函数作用域内，从而实现了数据封装和隐藏。这有助于防止外部代码直接访问和修改内部数据，提高了程序的安全性和可维护性。</li>\n<li><strong>实现模块化：</strong> 闭包可以用于实现模块化的代码结构，通过将一些函数和变量封装在闭包中，可以减少全局命名空间的污染，提高代码的可重用性和可维护性。</li>\n<li><strong>实现私有变量和方法：</strong> 闭包可以用于模拟私有变量和方法，通过将变量和方法封装在闭包内部，外部代码无法直接访问，从而实现了一定程度的信息隐藏和封装。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li><strong>内存泄漏：</strong> 闭包会持有对其所在作用域的引用，如果闭包中包含对大量对象的引用，并且闭包没有被正确释放，就可能导致内存泄漏的问题，使得不再需要的对象无法被垃圾回收。</li>\n<li><strong>性能开销：</strong> 由于闭包需要捕获外部作用域的状态，因此在创建和执行闭包时可能会产生一些额外的性能开销，特别是在嵌套的闭包中或者捕获大量变量时。</li>\n<li><strong>作用域链的影响：</strong> 闭包的作用域链可能会影响代码的性能和可读性，尤其是在处理嵌套闭包时，需要小心避免作用域链过长导致的性能问题。</li>\n</ol>\n<p>综上所述，JavaScript 中的闭包是一种强大的编程特性，可以带来许多优点，但同时也需要注意一些潜在的缺点，合理地使用闭包可以提高代码的灵活性和可维护性。</p>\n"},{"title":"常用的react hooks","date":"2024-02-22T16:00:00.000Z","_content":"\nReact Hooks 提供了一系列常用的 API，这些 API 可以让你在函数组件中使用状态(state)、生命周期方法、上下文(context)等 React 特性。以下是一些常用的 React Hooks API：\n\n1. **useState**: 用于在函数组件中添加状态。它返回一个包含状态值和更新状态值的函数。\n\n```javascript\nconst [state, setState] = useState(initialState);\n```\n\n2. **useEffect**: 用于在组件渲染后执行副作用操作，如数据获取、订阅、手动 DOM 操作等。它在每次渲染后都会执行。\n\n```javascript\nuseEffect(() => {\n  // effect code\n  return () => {\n    // cleanup code\n  };\n}, [dependencies]);\n```\n\n3. **useContext**: 用于在函数组件中访问 React 上下文。\n\n```javascript\nconst value = useContext(MyContext);\n```\n\n4. **useReducer**: 用于在函数组件中管理复杂的状态逻辑。它类似于 Redux 中的 reducer。\n\n```javascript\nconst [state, dispatch] = useReducer(reducer, initialState);\n```\n\n5. **useCallback**: 用于缓存回调函数，以便在依赖项不变时不重新创建该函数。\n\n```javascript\nconst memoizedCallback = useCallback(() => {\n  // callback code\n}, [dependencies]);\n```\n\n6. **useMemo**: 用于缓存计算结果，以便在依赖项不变时不重新计算。\n\n```jsx\nconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n```\n\n7. **useRef**: 用于在函数组件之间保存可变值的引用，类似于 class 组件中的实例变量。\n\n```jsx\nconst refContainer = useRef(initialValue);\n```\n\n8. **useImperativeHandle**: 用于自定义暴露给父组件的实例值\n\n```jsx\nuseImperativeHandle(\n  ref,\n  () => ({\n    // exposed instance methods/properties\n  }),\n  [dependencies]\n);\n```\n\n9. **useLayoutEffect**: 类似于 useEffect，但会在所有 DOM 变更后同步调用 effect。它会在浏览器完成布局与绘制之后，但在任何新的渲染之前执行。\n\n```jsx\nuseLayoutEffect(() => {\n  // effect code\n}, [dependencies]);\n```\n","source":"_posts/code/react/常用的react hooks.md","raw":"---\ntitle: 常用的react hooks\ndate: 2024-02-23\ntags:\n  - javascript\n  - react\n  - 基础\ncategories:\n  - 技术\n  - 学习\n---\n\nReact Hooks 提供了一系列常用的 API，这些 API 可以让你在函数组件中使用状态(state)、生命周期方法、上下文(context)等 React 特性。以下是一些常用的 React Hooks API：\n\n1. **useState**: 用于在函数组件中添加状态。它返回一个包含状态值和更新状态值的函数。\n\n```javascript\nconst [state, setState] = useState(initialState);\n```\n\n2. **useEffect**: 用于在组件渲染后执行副作用操作，如数据获取、订阅、手动 DOM 操作等。它在每次渲染后都会执行。\n\n```javascript\nuseEffect(() => {\n  // effect code\n  return () => {\n    // cleanup code\n  };\n}, [dependencies]);\n```\n\n3. **useContext**: 用于在函数组件中访问 React 上下文。\n\n```javascript\nconst value = useContext(MyContext);\n```\n\n4. **useReducer**: 用于在函数组件中管理复杂的状态逻辑。它类似于 Redux 中的 reducer。\n\n```javascript\nconst [state, dispatch] = useReducer(reducer, initialState);\n```\n\n5. **useCallback**: 用于缓存回调函数，以便在依赖项不变时不重新创建该函数。\n\n```javascript\nconst memoizedCallback = useCallback(() => {\n  // callback code\n}, [dependencies]);\n```\n\n6. **useMemo**: 用于缓存计算结果，以便在依赖项不变时不重新计算。\n\n```jsx\nconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n```\n\n7. **useRef**: 用于在函数组件之间保存可变值的引用，类似于 class 组件中的实例变量。\n\n```jsx\nconst refContainer = useRef(initialValue);\n```\n\n8. **useImperativeHandle**: 用于自定义暴露给父组件的实例值\n\n```jsx\nuseImperativeHandle(\n  ref,\n  () => ({\n    // exposed instance methods/properties\n  }),\n  [dependencies]\n);\n```\n\n9. **useLayoutEffect**: 类似于 useEffect，但会在所有 DOM 变更后同步调用 effect。它会在浏览器完成布局与绘制之后，但在任何新的渲染之前执行。\n\n```jsx\nuseLayoutEffect(() => {\n  // effect code\n}, [dependencies]);\n```\n","slug":"code/react/常用的react hooks","published":1,"updated":"2024-12-27T09:51:22.031Z","_id":"cm56kcwci00183zp91ffr1zhe","comments":1,"layout":"post","photos":[],"content":"<p>React Hooks 提供了一系列常用的 API，这些 API 可以让你在函数组件中使用状态(state)、生命周期方法、上下文(context)等 React 特性。以下是一些常用的 React Hooks API：</p>\n<ol>\n<li><strong>useState</strong>: 用于在函数组件中添加状态。它返回一个包含状态值和更新状态值的函数。</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li><strong>useEffect</strong>: 用于在组件渲染后执行副作用操作，如数据获取、订阅、手动 DOM 操作等。它在每次渲染后都会执行。</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// effect code</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// cleanup code</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dependencies<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li><strong>useContext</strong>: 用于在函数组件中访问 React 上下文。</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>MyContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol start=\"4\">\n<li><strong>useReducer</strong>: 用于在函数组件中管理复杂的状态逻辑。它类似于 Redux 中的 reducer。</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol start=\"5\">\n<li><strong>useCallback</strong>: 用于缓存回调函数，以便在依赖项不变时不重新创建该函数。</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// callback code</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dependencies<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"6\">\n<li><strong>useMemo</strong>: 用于缓存计算结果，以便在依赖项不变时不重新计算。</li>\n</ol>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> memoizedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">computeExpensiveValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol start=\"7\">\n<li><strong>useRef</strong>: 用于在函数组件之间保存可变值的引用，类似于 class 组件中的实例变量。</li>\n</ol>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> refContainer <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol start=\"8\">\n<li><strong>useImperativeHandle</strong>: 用于自定义暴露给父组件的实例值</li>\n</ol>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>\n  ref<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// exposed instance methods/properties</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>dependencies<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"9\">\n<li><strong>useLayoutEffect</strong>: 类似于 useEffect，但会在所有 DOM 变更后同步调用 effect。它会在浏览器完成布局与绘制之后，但在任何新的渲染之前执行。</li>\n</ol>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// effect code</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dependencies<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n","excerpt":"","more":"<p>React Hooks 提供了一系列常用的 API，这些 API 可以让你在函数组件中使用状态(state)、生命周期方法、上下文(context)等 React 特性。以下是一些常用的 React Hooks API：</p>\n<ol>\n<li><strong>useState</strong>: 用于在函数组件中添加状态。它返回一个包含状态值和更新状态值的函数。</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li><strong>useEffect</strong>: 用于在组件渲染后执行副作用操作，如数据获取、订阅、手动 DOM 操作等。它在每次渲染后都会执行。</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// effect code</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// cleanup code</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dependencies<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li><strong>useContext</strong>: 用于在函数组件中访问 React 上下文。</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>MyContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol start=\"4\">\n<li><strong>useReducer</strong>: 用于在函数组件中管理复杂的状态逻辑。它类似于 Redux 中的 reducer。</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol start=\"5\">\n<li><strong>useCallback</strong>: 用于缓存回调函数，以便在依赖项不变时不重新创建该函数。</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// callback code</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dependencies<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"6\">\n<li><strong>useMemo</strong>: 用于缓存计算结果，以便在依赖项不变时不重新计算。</li>\n</ol>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> memoizedValue <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">computeExpensiveValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol start=\"7\">\n<li><strong>useRef</strong>: 用于在函数组件之间保存可变值的引用，类似于 class 组件中的实例变量。</li>\n</ol>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> refContainer <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol start=\"8\">\n<li><strong>useImperativeHandle</strong>: 用于自定义暴露给父组件的实例值</li>\n</ol>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>\n  ref<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// exposed instance methods/properties</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>dependencies<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"9\">\n<li><strong>useLayoutEffect</strong>: 类似于 useEffect，但会在所有 DOM 变更后同步调用 effect。它会在浏览器完成布局与绘制之后，但在任何新的渲染之前执行。</li>\n</ol>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// effect code</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dependencies<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n"},{"title":"typescript的高阶用法","date":"2024-05-19T16:00:00.000Z","_content":"\n记录和学习一些常用或需要了解的用法,下面是一些 TypeScript 的高级用法及其示例：\n\n### 1. 泛型 (Generics)\n\n泛型允许你定义函数、类或接口时，不指定具体的类型，而是使用类型参数。这样可以使代码更加灵活和可重用。\n\n```typescript\nfunction identity<T>(arg: T): T {\n  return arg;\n}\n\nlet output1 = identity<string>(\"Hello TypeScript\");\nlet output2 = identity<number>(42);\n```\n\n### 2. 交叉类型 (Intersection Types)\n\n交叉类型用于将多个类型合并为一个类型，表示一个对象可以同时拥有这些类型的所有成员。\n\n```typescript\ninterface Person {\n  name: string;\n}\n\ninterface Employee {\n  employeeId: number;\n}\n\ntype EmployeePerson = Person & Employee;\n\nlet employee: EmployeePerson = {\n  name: \"John\",\n  employeeId: 1234,\n};\n```\n\n### 3. 联合类型 (Union Types)\n\n联合类型允许一个值可以是几种类型之一。\n\n```tsx\nfunction format(input: string | number): string {\n  if (typeof input === \"string\") {\n    return input.toUpperCase();\n  } else {\n    return input.toFixed(2);\n  }\n}\n```\n\n### 4. 类型守卫 (Type Guards)\n\n类型守卫用于在运行时判断变量的类型，从而在代码中使用特定类型的方法和属性。\n\n```tsx\nfunction isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n\nfunction example(input: string | number) {\n  if (isString(input)) {\n    console.log(input.toUpperCase());\n  } else {\n    console.log(input.toFixed(2));\n  }\n}\n```\n\n### 5. 映射类型 (Mapped Types)\n\n映射类型允许你基于已有类型创建新类型，常用于转换对象属性的类型。\n\n```tsx\ntype ReadOnly<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\ninterface Person {\n  name: string;\n  age: number;\n}\n\ntype ReadOnlyPerson = ReadOnly<Person>;\n\nlet person: ReadOnlyPerson = { name: \"Alice\", age: 30 };\n// person.age = 31; // Error: Cannot assign to 'age' because it is a read-only property.\n```\n\n### 6. 条件类型 (Conditional Types)\n\n条件类型根据条件表达式选择一种类型。\n\n```tsx\ntype TypeName<T> = T extends string\n  ? \"string\"\n  : T extends number\n  ? \"number\"\n  : T extends boolean\n  ? \"boolean\"\n  : \"object\";\n\ntype T0 = TypeName<string>; // \"string\"\ntype T1 = TypeName<number>; // \"number\"\ntype T2 = TypeName<boolean>; // \"boolean\"\ntype T3 = TypeName<object>; // \"object\"\n```\n\n### 7. 高级类型推断\n\nTypeScript 的类型推断能力非常强大，可以根据上下文自动推断出复杂类型。\n\n```tsx\nfunction makeTuple<T, U>(first: T, second: U) {\n  return [first, second] as [T, U];\n}\n\nlet tuple = makeTuple(\"hello\", 42); // [string, number]\n```\n\n### 8. 模板字面量类型 (Template Literal Types)\n\n模板字面量类型允许通过模板字符串创建类型。\n\n```tsx\ntype Color = \"red\" | \"green\" | \"blue\";\ntype Brightness = \"light\" | \"dark\";\n\ntype Theme = `${Color}-${Brightness}`;\n\nlet theme: Theme;\ntheme = \"red-light\"; // valid\ntheme = \"blue-dark\"; // valid\n// theme = \"yellow-light\"; // Error\n```\n\n### 9. 索引类型和查找类型\n\n索引类型用于访问另一种类型的属性。\n\n```tsx\ninterface Person {\n  name: string;\n  age: number;\n}\n\ntype PersonName = Person[\"name\"]; // string\ntype PersonProperties = keyof Person; // \"name\" | \"age\"\n```\n\n### 10. Utility Types\n\nTypeScript 提供了一些内置的实用类型，可以简化常见的类型操作。\n\n```tsx\ninterface Person {\n  name: string;\n  age: number;\n  address: string;\n}\n\n// Partial: 将所有属性设为可选\ntype PartialPerson = Partial<Person>;\n\n// Required: 将所有属性设为必需\ntype RequiredPerson = Required<Person>;\n\n// Readonly: 将所有属性设为只读\ntype ReadonlyPerson = Readonly<Person>;\n\n// Pick: 选择特定属性\ntype PersonNameAndAge = Pick<Person, \"name\" | \"age\">;\n```\n\n这些高级用法使得 TypeScript 能够表达更复杂的类型逻辑，增强类型检查的能力，从而提高代码的安全性和可维护性。\n","source":"_posts/code/typescript的高阶用法.md","raw":"---\ntitle: typescript的高阶用法\ndate: 2024-05-20\ntags:\n  - typescript\n  - javascript\ncategories:\n  - 技术\n  - 学习\n---\n\n记录和学习一些常用或需要了解的用法,下面是一些 TypeScript 的高级用法及其示例：\n\n### 1. 泛型 (Generics)\n\n泛型允许你定义函数、类或接口时，不指定具体的类型，而是使用类型参数。这样可以使代码更加灵活和可重用。\n\n```typescript\nfunction identity<T>(arg: T): T {\n  return arg;\n}\n\nlet output1 = identity<string>(\"Hello TypeScript\");\nlet output2 = identity<number>(42);\n```\n\n### 2. 交叉类型 (Intersection Types)\n\n交叉类型用于将多个类型合并为一个类型，表示一个对象可以同时拥有这些类型的所有成员。\n\n```typescript\ninterface Person {\n  name: string;\n}\n\ninterface Employee {\n  employeeId: number;\n}\n\ntype EmployeePerson = Person & Employee;\n\nlet employee: EmployeePerson = {\n  name: \"John\",\n  employeeId: 1234,\n};\n```\n\n### 3. 联合类型 (Union Types)\n\n联合类型允许一个值可以是几种类型之一。\n\n```tsx\nfunction format(input: string | number): string {\n  if (typeof input === \"string\") {\n    return input.toUpperCase();\n  } else {\n    return input.toFixed(2);\n  }\n}\n```\n\n### 4. 类型守卫 (Type Guards)\n\n类型守卫用于在运行时判断变量的类型，从而在代码中使用特定类型的方法和属性。\n\n```tsx\nfunction isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n\nfunction example(input: string | number) {\n  if (isString(input)) {\n    console.log(input.toUpperCase());\n  } else {\n    console.log(input.toFixed(2));\n  }\n}\n```\n\n### 5. 映射类型 (Mapped Types)\n\n映射类型允许你基于已有类型创建新类型，常用于转换对象属性的类型。\n\n```tsx\ntype ReadOnly<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\ninterface Person {\n  name: string;\n  age: number;\n}\n\ntype ReadOnlyPerson = ReadOnly<Person>;\n\nlet person: ReadOnlyPerson = { name: \"Alice\", age: 30 };\n// person.age = 31; // Error: Cannot assign to 'age' because it is a read-only property.\n```\n\n### 6. 条件类型 (Conditional Types)\n\n条件类型根据条件表达式选择一种类型。\n\n```tsx\ntype TypeName<T> = T extends string\n  ? \"string\"\n  : T extends number\n  ? \"number\"\n  : T extends boolean\n  ? \"boolean\"\n  : \"object\";\n\ntype T0 = TypeName<string>; // \"string\"\ntype T1 = TypeName<number>; // \"number\"\ntype T2 = TypeName<boolean>; // \"boolean\"\ntype T3 = TypeName<object>; // \"object\"\n```\n\n### 7. 高级类型推断\n\nTypeScript 的类型推断能力非常强大，可以根据上下文自动推断出复杂类型。\n\n```tsx\nfunction makeTuple<T, U>(first: T, second: U) {\n  return [first, second] as [T, U];\n}\n\nlet tuple = makeTuple(\"hello\", 42); // [string, number]\n```\n\n### 8. 模板字面量类型 (Template Literal Types)\n\n模板字面量类型允许通过模板字符串创建类型。\n\n```tsx\ntype Color = \"red\" | \"green\" | \"blue\";\ntype Brightness = \"light\" | \"dark\";\n\ntype Theme = `${Color}-${Brightness}`;\n\nlet theme: Theme;\ntheme = \"red-light\"; // valid\ntheme = \"blue-dark\"; // valid\n// theme = \"yellow-light\"; // Error\n```\n\n### 9. 索引类型和查找类型\n\n索引类型用于访问另一种类型的属性。\n\n```tsx\ninterface Person {\n  name: string;\n  age: number;\n}\n\ntype PersonName = Person[\"name\"]; // string\ntype PersonProperties = keyof Person; // \"name\" | \"age\"\n```\n\n### 10. Utility Types\n\nTypeScript 提供了一些内置的实用类型，可以简化常见的类型操作。\n\n```tsx\ninterface Person {\n  name: string;\n  age: number;\n  address: string;\n}\n\n// Partial: 将所有属性设为可选\ntype PartialPerson = Partial<Person>;\n\n// Required: 将所有属性设为必需\ntype RequiredPerson = Required<Person>;\n\n// Readonly: 将所有属性设为只读\ntype ReadonlyPerson = Readonly<Person>;\n\n// Pick: 选择特定属性\ntype PersonNameAndAge = Pick<Person, \"name\" | \"age\">;\n```\n\n这些高级用法使得 TypeScript 能够表达更复杂的类型逻辑，增强类型检查的能力，从而提高代码的安全性和可维护性。\n","slug":"code/typescript的高阶用法","published":1,"updated":"2024-12-27T10:01:51.279Z","comments":1,"layout":"post","photos":[],"_id":"cm5978rb10000b9p99voa3g0m","content":"<p>记录和学习一些常用或需要了解的用法,下面是一些 TypeScript 的高级用法及其示例：</p>\n<h3 id=\"1-泛型-Generics\"><a href=\"#1-泛型-Generics\" class=\"headerlink\" title=\"1. 泛型 (Generics)\"></a>1. 泛型 (Generics)</h3><p>泛型允许你定义函数、类或接口时，不指定具体的类型，而是使用类型参数。这样可以使代码更加灵活和可重用。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> output1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello TypeScript\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> output2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-交叉类型-Intersection-Types\"><a href=\"#2-交叉类型-Intersection-Types\" class=\"headerlink\" title=\"2. 交叉类型 (Intersection Types)\"></a>2. 交叉类型 (Intersection Types)</h3><p>交叉类型用于将多个类型合并为一个类型，表示一个对象可以同时拥有这些类型的所有成员。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">&#123;</span>\n  employeeId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">EmployeePerson</span> <span class=\"token operator\">=</span> Person <span class=\"token operator\">&amp;</span> Employee<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> employee<span class=\"token operator\">:</span> EmployeePerson <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n  employeeId<span class=\"token operator\">:</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-联合类型-Union-Types\"><a href=\"#3-联合类型-Union-Types\" class=\"headerlink\" title=\"3. 联合类型 (Union Types)\"></a>3. 联合类型 (Union Types)</h3><p>联合类型允许一个值可以是几种类型之一。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> input <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-类型守卫-Type-Guards\"><a href=\"#4-类型守卫-Type-Guards\" class=\"headerlink\" title=\"4. 类型守卫 (Type Guards)\"></a>4. 类型守卫 (Type Guards)</h3><p>类型守卫用于在运行时判断变量的类型，从而在代码中使用特定类型的方法和属性。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> value <span class=\"token keyword\">is</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">example</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-映射类型-Mapped-Types\"><a href=\"#5-映射类型-Mapped-Types\" class=\"headerlink\" title=\"5. 映射类型 (Mapped Types)\"></a>5. 映射类型 (Mapped Types)</h3><p>映射类型允许你基于已有类型创建新类型，常用于转换对象属性的类型。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ReadOnly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ReadOnlyPerson</span> <span class=\"token operator\">=</span> ReadOnly<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> person<span class=\"token operator\">:</span> ReadOnlyPerson <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// person.age = 31; // Error: Cannot assign to 'age' because it is a read-only property.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-条件类型-Conditional-Types\"><a href=\"#6-条件类型-Conditional-Types\" class=\"headerlink\" title=\"6. 条件类型 (Conditional Types)\"></a>6. 条件类型 (Conditional Types)</h3><p>条件类型根据条件表达式选择一种类型。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TypeName<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">string</span></span>\n  <span class=\"token operator\">?</span> <span class=\"token string\">\"string\"</span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">number</span></span>\n  <span class=\"token operator\">?</span> <span class=\"token string\">\"number\"</span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">boolean</span></span>\n  <span class=\"token operator\">?</span> <span class=\"token string\">\"boolean\"</span>\n  <span class=\"token operator\">:</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"number\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T2</span></span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"boolean\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T3</span></span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span>object<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-高级类型推断\"><a href=\"#7-高级类型推断\" class=\"headerlink\" title=\"7. 高级类型推断\"></a>7. 高级类型推断</h3><p>TypeScript 的类型推断能力非常强大，可以根据上下文自动推断出复杂类型。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">makeTuple</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> second<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> tuple <span class=\"token operator\">=</span> <span class=\"token function\">makeTuple</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [string, number]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"8-模板字面量类型-Template-Literal-Types\"><a href=\"#8-模板字面量类型-Template-Literal-Types\" class=\"headerlink\" title=\"8. 模板字面量类型 (Template Literal Types)\"></a>8. 模板字面量类型 (Template Literal Types)</h3><p>模板字面量类型允许通过模板字符串创建类型。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Color</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"green\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Brightness</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"light\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"dark\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Theme</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>Color<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>Brightness<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> theme<span class=\"token operator\">:</span> Theme<span class=\"token punctuation\">;</span>\ntheme <span class=\"token operator\">=</span> <span class=\"token string\">\"red-light\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// valid</span>\ntheme <span class=\"token operator\">=</span> <span class=\"token string\">\"blue-dark\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// valid</span>\n<span class=\"token comment\">// theme = \"yellow-light\"; // Error</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"9-索引类型和查找类型\"><a href=\"#9-索引类型和查找类型\" class=\"headerlink\" title=\"9. 索引类型和查找类型\"></a>9. 索引类型和查找类型</h3><p>索引类型用于访问另一种类型的属性。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonName</span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonProperties</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> Person<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"name\" | \"age\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"10-Utility-Types\"><a href=\"#10-Utility-Types\" class=\"headerlink\" title=\"10. Utility Types\"></a>10. Utility Types</h3><p>TypeScript 提供了一些内置的实用类型，可以简化常见的类型操作。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  address<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Partial: 将所有属性设为可选</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PartialPerson</span> <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Required: 将所有属性设为必需</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">RequiredPerson</span> <span class=\"token operator\">=</span> Required<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Readonly: 将所有属性设为只读</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ReadonlyPerson</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Pick: 选择特定属性</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonNameAndAge</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Person<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"age\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这些高级用法使得 TypeScript 能够表达更复杂的类型逻辑，增强类型检查的能力，从而提高代码的安全性和可维护性。</p>\n","excerpt":"","more":"<p>记录和学习一些常用或需要了解的用法,下面是一些 TypeScript 的高级用法及其示例：</p>\n<h3 id=\"1-泛型-Generics\"><a href=\"#1-泛型-Generics\" class=\"headerlink\" title=\"1. 泛型 (Generics)\"></a>1. 泛型 (Generics)</h3><p>泛型允许你定义函数、类或接口时，不指定具体的类型，而是使用类型参数。这样可以使代码更加灵活和可重用。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> output1 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello TypeScript\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> output2 <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-交叉类型-Intersection-Types\"><a href=\"#2-交叉类型-Intersection-Types\" class=\"headerlink\" title=\"2. 交叉类型 (Intersection Types)\"></a>2. 交叉类型 (Intersection Types)</h3><p>交叉类型用于将多个类型合并为一个类型，表示一个对象可以同时拥有这些类型的所有成员。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">&#123;</span>\n  employeeId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">EmployeePerson</span> <span class=\"token operator\">=</span> Person <span class=\"token operator\">&amp;</span> Employee<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> employee<span class=\"token operator\">:</span> EmployeePerson <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n  employeeId<span class=\"token operator\">:</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-联合类型-Union-Types\"><a href=\"#3-联合类型-Union-Types\" class=\"headerlink\" title=\"3. 联合类型 (Union Types)\"></a>3. 联合类型 (Union Types)</h3><p>联合类型允许一个值可以是几种类型之一。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> input <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-类型守卫-Type-Guards\"><a href=\"#4-类型守卫-Type-Guards\" class=\"headerlink\" title=\"4. 类型守卫 (Type Guards)\"></a>4. 类型守卫 (Type Guards)</h3><p>类型守卫用于在运行时判断变量的类型，从而在代码中使用特定类型的方法和属性。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> value <span class=\"token keyword\">is</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">example</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-映射类型-Mapped-Types\"><a href=\"#5-映射类型-Mapped-Types\" class=\"headerlink\" title=\"5. 映射类型 (Mapped Types)\"></a>5. 映射类型 (Mapped Types)</h3><p>映射类型允许你基于已有类型创建新类型，常用于转换对象属性的类型。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ReadOnly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ReadOnlyPerson</span> <span class=\"token operator\">=</span> ReadOnly<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> person<span class=\"token operator\">:</span> ReadOnlyPerson <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// person.age = 31; // Error: Cannot assign to 'age' because it is a read-only property.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"6-条件类型-Conditional-Types\"><a href=\"#6-条件类型-Conditional-Types\" class=\"headerlink\" title=\"6. 条件类型 (Conditional Types)\"></a>6. 条件类型 (Conditional Types)</h3><p>条件类型根据条件表达式选择一种类型。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TypeName<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">string</span></span>\n  <span class=\"token operator\">?</span> <span class=\"token string\">\"string\"</span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">number</span></span>\n  <span class=\"token operator\">?</span> <span class=\"token string\">\"number\"</span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">boolean</span></span>\n  <span class=\"token operator\">?</span> <span class=\"token string\">\"boolean\"</span>\n  <span class=\"token operator\">:</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"string\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"number\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T2</span></span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"boolean\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T3</span></span> <span class=\"token operator\">=</span> TypeName<span class=\"token operator\">&lt;</span>object<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"object\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"7-高级类型推断\"><a href=\"#7-高级类型推断\" class=\"headerlink\" title=\"7. 高级类型推断\"></a>7. 高级类型推断</h3><p>TypeScript 的类型推断能力非常强大，可以根据上下文自动推断出复杂类型。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">makeTuple</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> second<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">let</span> tuple <span class=\"token operator\">=</span> <span class=\"token function\">makeTuple</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [string, number]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"8-模板字面量类型-Template-Literal-Types\"><a href=\"#8-模板字面量类型-Template-Literal-Types\" class=\"headerlink\" title=\"8. 模板字面量类型 (Template Literal Types)\"></a>8. 模板字面量类型 (Template Literal Types)</h3><p>模板字面量类型允许通过模板字符串创建类型。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Color</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"red\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"green\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Brightness</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"light\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"dark\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Theme</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>Color<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>Brightness<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> theme<span class=\"token operator\">:</span> Theme<span class=\"token punctuation\">;</span>\ntheme <span class=\"token operator\">=</span> <span class=\"token string\">\"red-light\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// valid</span>\ntheme <span class=\"token operator\">=</span> <span class=\"token string\">\"blue-dark\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// valid</span>\n<span class=\"token comment\">// theme = \"yellow-light\"; // Error</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"9-索引类型和查找类型\"><a href=\"#9-索引类型和查找类型\" class=\"headerlink\" title=\"9. 索引类型和查找类型\"></a>9. 索引类型和查找类型</h3><p>索引类型用于访问另一种类型的属性。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonName</span> <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonProperties</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> Person<span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"name\" | \"age\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"10-Utility-Types\"><a href=\"#10-Utility-Types\" class=\"headerlink\" title=\"10. Utility Types\"></a>10. Utility Types</h3><p>TypeScript 提供了一些内置的实用类型，可以简化常见的类型操作。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  address<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Partial: 将所有属性设为可选</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PartialPerson</span> <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Required: 将所有属性设为必需</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">RequiredPerson</span> <span class=\"token operator\">=</span> Required<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Readonly: 将所有属性设为只读</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ReadonlyPerson</span> <span class=\"token operator\">=</span> Readonly<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Pick: 选择特定属性</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PersonNameAndAge</span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Person<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"age\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这些高级用法使得 TypeScript 能够表达更复杂的类型逻辑，增强类型检查的能力，从而提高代码的安全性和可维护性。</p>\n"},{"title":"js 对象对比是否相等","date":"2020-11-26T01:45:00.000Z","_content":"\nES6 有一个方法来判断两个对象是否相等\n\n```jsx\nconsole.log(Object.is(a, b));\n```\n\n但是这个相等，和我们平时要的相等可能不一样,这个方法判断的是 a 和 b 是不是同一个指针的对象,比如说\n\n```jsx\nvar a = {\n  id: 1,\n};\nvar b = a;\nconsole.log(Object.is(a, b)); //true\n```\n\n但是下面这种情况就不管用了\n\n```jsx\nvar a = {\n  id: 1,\n};\nvar b = {\n  id: 1,\n};\nconsole.log(Object.is(a, b)); //false\n```\n\n当我们只需要两个对象的内容相同的时候，他就没效果了\n\n**思路**\n只要两个对象的名和键值都相同。那么两个对象的内容就相同了\n\n1. 用 Object.getOwnPropertyNames 拿到对象的所以键名数组\n2. 比对键名数组的长度是否相等。否=>false。真=>3\n3. 比对键名对应的键值是否相等\n\n```jsx\nfunction isObjectValueEqual(a, b) {\n  var aProps = Object.getOwnPropertyNames(a);\n  var bProps = Object.getOwnPropertyNames(b);\n\n  if (aProps.length != bProps.length) {\n    return false;\n  }\n\n  for (var i = 0; i < aProps.length; i++) {\n    var propName = aProps[i];\n    var propA = a[propName];\n    var propB = b[propName];\n    if (propA !== propB) {\n      return false;\n    }\n  }\n  return true;\n}\n```\n\n粗略一看没问题,但是细心的同学发现如果键值也是对象的话,那这个方法就不管用了\n\n```jsx\nvar a = {\n  id: 1,\n  name: 2,\n  c: {\n    age: 3,\n  },\n};\nvar b = {\n  id: 1,\n  name: 2,\n  c: {\n    age: 3,\n  },\n};\nconsole.log(isObjectValueEqual(a, b)); //false\n```\n\n这个时候递归一下就可以解决了\n注意，递归的时候要判断 prop 是不是 Object，然后会进入无限递归的死循环\n\n```jsx\nfunction isObjectValueEqual(a, b) {\n  var aProps = Object.getOwnPropertyNames(a);\n  var bProps = Object.getOwnPropertyNames(b);\n  if (aProps.length != bProps.length) {\n    return false;\n  }\n  for (var i = 0; i < aProps.length; i++) {\n    var propName = aProps[i];\n\n    var propA = a[propName];\n    var propB = b[propName];\n    // 2020-11-18更新，这里忽略了值为undefined的情况\n    // 故先判断两边都有相同键名\n    if (!b.hasOwnProperty(propName)) return false;\n    if (typeof propA === \"object\") {\n      if (this.isObjectValueEqual(propA, propB)) {\n        // return true     这里不能return ,后面的对象还没判断\n      } else {\n        return false;\n      }\n    } else if (propA !== propB) {\n      return false;\n    } else {\n    }\n  }\n  return true;\n}\nvar a = {\n  id: 1,\n  name: 2,\n  c: {\n    age: 3,\n  },\n};\nvar b = {\n  id: 1,\n  name: 2,\n  c: {\n    age: 3,\n  },\n};\nconsole.log(isObjectValueEqual(a, b)); //true\n```\n","source":"_posts/code/javascript/js 对象对比是否相等.md","raw":"---\ntitle: js 对象对比是否相等\ndate: 2020-11-26 09:45\ntags:\n  - javascript\ncategories:\n  - 技术\n  - 学习\n---\n\nES6 有一个方法来判断两个对象是否相等\n\n```jsx\nconsole.log(Object.is(a, b));\n```\n\n但是这个相等，和我们平时要的相等可能不一样,这个方法判断的是 a 和 b 是不是同一个指针的对象,比如说\n\n```jsx\nvar a = {\n  id: 1,\n};\nvar b = a;\nconsole.log(Object.is(a, b)); //true\n```\n\n但是下面这种情况就不管用了\n\n```jsx\nvar a = {\n  id: 1,\n};\nvar b = {\n  id: 1,\n};\nconsole.log(Object.is(a, b)); //false\n```\n\n当我们只需要两个对象的内容相同的时候，他就没效果了\n\n**思路**\n只要两个对象的名和键值都相同。那么两个对象的内容就相同了\n\n1. 用 Object.getOwnPropertyNames 拿到对象的所以键名数组\n2. 比对键名数组的长度是否相等。否=>false。真=>3\n3. 比对键名对应的键值是否相等\n\n```jsx\nfunction isObjectValueEqual(a, b) {\n  var aProps = Object.getOwnPropertyNames(a);\n  var bProps = Object.getOwnPropertyNames(b);\n\n  if (aProps.length != bProps.length) {\n    return false;\n  }\n\n  for (var i = 0; i < aProps.length; i++) {\n    var propName = aProps[i];\n    var propA = a[propName];\n    var propB = b[propName];\n    if (propA !== propB) {\n      return false;\n    }\n  }\n  return true;\n}\n```\n\n粗略一看没问题,但是细心的同学发现如果键值也是对象的话,那这个方法就不管用了\n\n```jsx\nvar a = {\n  id: 1,\n  name: 2,\n  c: {\n    age: 3,\n  },\n};\nvar b = {\n  id: 1,\n  name: 2,\n  c: {\n    age: 3,\n  },\n};\nconsole.log(isObjectValueEqual(a, b)); //false\n```\n\n这个时候递归一下就可以解决了\n注意，递归的时候要判断 prop 是不是 Object，然后会进入无限递归的死循环\n\n```jsx\nfunction isObjectValueEqual(a, b) {\n  var aProps = Object.getOwnPropertyNames(a);\n  var bProps = Object.getOwnPropertyNames(b);\n  if (aProps.length != bProps.length) {\n    return false;\n  }\n  for (var i = 0; i < aProps.length; i++) {\n    var propName = aProps[i];\n\n    var propA = a[propName];\n    var propB = b[propName];\n    // 2020-11-18更新，这里忽略了值为undefined的情况\n    // 故先判断两边都有相同键名\n    if (!b.hasOwnProperty(propName)) return false;\n    if (typeof propA === \"object\") {\n      if (this.isObjectValueEqual(propA, propB)) {\n        // return true     这里不能return ,后面的对象还没判断\n      } else {\n        return false;\n      }\n    } else if (propA !== propB) {\n      return false;\n    } else {\n    }\n  }\n  return true;\n}\nvar a = {\n  id: 1,\n  name: 2,\n  c: {\n    age: 3,\n  },\n};\nvar b = {\n  id: 1,\n  name: 2,\n  c: {\n    age: 3,\n  },\n};\nconsole.log(isObjectValueEqual(a, b)); //true\n```\n","slug":"code/javascript/js 对象对比是否相等","published":1,"updated":"2024-12-27T10:22:31.570Z","comments":1,"layout":"post","photos":[],"_id":"cm5978rb30001b9p9b3aa7yag","content":"<p>ES6 有一个方法来判断两个对象是否相等</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>但是这个相等，和我们平时要的相等可能不一样,这个方法判断的是 a 和 b 是不是同一个指针的对象,比如说</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是下面这种情况就不管用了</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当我们只需要两个对象的内容相同的时候，他就没效果了</p>\n<p><strong>思路</strong><br>只要两个对象的名和键值都相同。那么两个对象的内容就相同了</p>\n<ol>\n<li>用 Object.getOwnPropertyNames 拿到对象的所以键名数组</li>\n<li>比对键名数组的长度是否相等。否&#x3D;&gt;false。真&#x3D;&gt;3</li>\n<li>比对键名对应的键值是否相等</li>\n</ol>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">isObjectValueEqual</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> aProps <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> bProps <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aProps<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> bProps<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> aProps<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> propName <span class=\"token operator\">=</span> aProps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> propA <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> propB <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propA <span class=\"token operator\">!==</span> propB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>粗略一看没问题,但是细心的同学发现如果键值也是对象的话,那这个方法就不管用了</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isObjectValueEqual</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个时候递归一下就可以解决了<br>注意，递归的时候要判断 prop 是不是 Object，然后会进入无限递归的死循环</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">isObjectValueEqual</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> aProps <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> bProps <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aProps<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> bProps<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> aProps<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> propName <span class=\"token operator\">=</span> aProps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> propA <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> propB <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2020-11-18更新，这里忽略了值为undefined的情况</span>\n    <span class=\"token comment\">// 故先判断两边都有相同键名</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> propA <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isObjectValueEqual</span><span class=\"token punctuation\">(</span>propA<span class=\"token punctuation\">,</span> propB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// return true     这里不能return ,后面的对象还没判断</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propA <span class=\"token operator\">!==</span> propB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isObjectValueEqual</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","excerpt":"","more":"<p>ES6 有一个方法来判断两个对象是否相等</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>但是这个相等，和我们平时要的相等可能不一样,这个方法判断的是 a 和 b 是不是同一个指针的对象,比如说</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是下面这种情况就不管用了</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当我们只需要两个对象的内容相同的时候，他就没效果了</p>\n<p><strong>思路</strong><br>只要两个对象的名和键值都相同。那么两个对象的内容就相同了</p>\n<ol>\n<li>用 Object.getOwnPropertyNames 拿到对象的所以键名数组</li>\n<li>比对键名数组的长度是否相等。否&#x3D;&gt;false。真&#x3D;&gt;3</li>\n<li>比对键名对应的键值是否相等</li>\n</ol>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">isObjectValueEqual</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> aProps <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> bProps <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aProps<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> bProps<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> aProps<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> propName <span class=\"token operator\">=</span> aProps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> propA <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> propB <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propA <span class=\"token operator\">!==</span> propB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>粗略一看没问题,但是细心的同学发现如果键值也是对象的话,那这个方法就不管用了</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isObjectValueEqual</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个时候递归一下就可以解决了<br>注意，递归的时候要判断 prop 是不是 Object，然后会进入无限递归的死循环</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">isObjectValueEqual</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> aProps <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> bProps <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aProps<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> bProps<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> aProps<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> propName <span class=\"token operator\">=</span> aProps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> propA <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> propB <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 2020-11-18更新，这里忽略了值为undefined的情况</span>\n    <span class=\"token comment\">// 故先判断两边都有相同键名</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> propA <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isObjectValueEqual</span><span class=\"token punctuation\">(</span>propA<span class=\"token punctuation\">,</span> propB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// return true     这里不能return ,后面的对象还没判断</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propA <span class=\"token operator\">!==</span> propB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isObjectValueEqual</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"react生命周期和执行顺序","date":"2020-11-30T16:00:00.000Z","_content":"\n![周期.png](/images/react/zhouqi.jpeg)\n\n## 挂载和销毁阶段\n\n### constructor()\n\nconstructor()中完成了 react 数据的初始化,它接受两个参数:props 和 content\n\n### componentWillMount()\n\n在渲染前调用,在客户端也在服务端。它代表的过程是组件已经经历了 constructor()初始化数据后，但是还未渲染 DOM 时。\n\n### componentDidMount()\n\n组件第一次渲染完成,此时 dom 节点已经生成\n\n### componentWillUnmount()\n\n组件卸载和数据的销毁\n\n## 更新阶段\n\n### componentWillReceiveProps(nextProps)\n\n在接受父组件改变后的 props 需要重新渲染组件时用的比较多\n\n接受一个参数 nextProps;\n\n通过对比 nextProps 和 this.props,将 nextProps 的 state 为组件的 state,从而重新渲染组件\n\n### componentWillUpdate(nextProps,nextState)\n\n组件进入重新渲染的流程,这里同样能拿到 nextProps 和 nextState\n\n### componentDidUpdate(prevProps,PrevState)\n\n组件更新完毕后,react 只会在第一次初始化成功会进入 componentDidMount(),之后每次渲染都会进入这个生命周期\n\n## 新增生命周期\n\n### getDerivcedStateFromProps(nextProps,nextState)\n\n代替 componentWillProps(),就是在根据当前的 props 来更新组件的 state，而不是去做其他一些让组件自身状态变得更加不可预测的事情。\n\n### getSnapshotBeforeUpdate(prevProps,PrevState)\n\n代替 componentWillUpdate()\n\ncomponentDidUpdate()和 componentWillUpdate()中读取的 dom 元素状态不是安全的,因为这个值很可能失效了\n\ngetSnapshotBeforeUpdate 会在最终的 render 前调用,也就是是说在 getSnapshotBeforeUpdate 中读取的 dom 元素状态和 componentDidUpdate 是一致的\n\n此生命周期返回的任何值都将作为参数传递给 componentDidUpdate\n","source":"_posts/code/react/react生命周期和执行顺序.md","raw":"---\ntitle: react生命周期和执行顺序\ndate: 2020-12-01\ntags:\n  - javascript\n  - react\n  - 基础\ncategories:\n  - 技术\n  - 学习\n---\n\n![周期.png](/images/react/zhouqi.jpeg)\n\n## 挂载和销毁阶段\n\n### constructor()\n\nconstructor()中完成了 react 数据的初始化,它接受两个参数:props 和 content\n\n### componentWillMount()\n\n在渲染前调用,在客户端也在服务端。它代表的过程是组件已经经历了 constructor()初始化数据后，但是还未渲染 DOM 时。\n\n### componentDidMount()\n\n组件第一次渲染完成,此时 dom 节点已经生成\n\n### componentWillUnmount()\n\n组件卸载和数据的销毁\n\n## 更新阶段\n\n### componentWillReceiveProps(nextProps)\n\n在接受父组件改变后的 props 需要重新渲染组件时用的比较多\n\n接受一个参数 nextProps;\n\n通过对比 nextProps 和 this.props,将 nextProps 的 state 为组件的 state,从而重新渲染组件\n\n### componentWillUpdate(nextProps,nextState)\n\n组件进入重新渲染的流程,这里同样能拿到 nextProps 和 nextState\n\n### componentDidUpdate(prevProps,PrevState)\n\n组件更新完毕后,react 只会在第一次初始化成功会进入 componentDidMount(),之后每次渲染都会进入这个生命周期\n\n## 新增生命周期\n\n### getDerivcedStateFromProps(nextProps,nextState)\n\n代替 componentWillProps(),就是在根据当前的 props 来更新组件的 state，而不是去做其他一些让组件自身状态变得更加不可预测的事情。\n\n### getSnapshotBeforeUpdate(prevProps,PrevState)\n\n代替 componentWillUpdate()\n\ncomponentDidUpdate()和 componentWillUpdate()中读取的 dom 元素状态不是安全的,因为这个值很可能失效了\n\ngetSnapshotBeforeUpdate 会在最终的 render 前调用,也就是是说在 getSnapshotBeforeUpdate 中读取的 dom 元素状态和 componentDidUpdate 是一致的\n\n此生命周期返回的任何值都将作为参数传递给 componentDidUpdate\n","slug":"code/react/react生命周期和执行顺序","published":1,"updated":"2024-12-29T05:59:16.096Z","_id":"cm5978rb50003b9p99ymgf8xj","comments":1,"layout":"post","photos":[],"content":"<p><img src=\"/images/react/zhouqi.jpeg\" alt=\"周期.png\"></p>\n<h2 id=\"挂载和销毁阶段\"><a href=\"#挂载和销毁阶段\" class=\"headerlink\" title=\"挂载和销毁阶段\"></a>挂载和销毁阶段</h2><h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor()\"></a>constructor()</h3><p>constructor()中完成了 react 数据的初始化,它接受两个参数:props 和 content</p>\n<h3 id=\"componentWillMount\"><a href=\"#componentWillMount\" class=\"headerlink\" title=\"componentWillMount()\"></a>componentWillMount()</h3><p>在渲染前调用,在客户端也在服务端。它代表的过程是组件已经经历了 constructor()初始化数据后，但是还未渲染 DOM 时。</p>\n<h3 id=\"componentDidMount\"><a href=\"#componentDidMount\" class=\"headerlink\" title=\"componentDidMount()\"></a>componentDidMount()</h3><p>组件第一次渲染完成,此时 dom 节点已经生成</p>\n<h3 id=\"componentWillUnmount\"><a href=\"#componentWillUnmount\" class=\"headerlink\" title=\"componentWillUnmount()\"></a>componentWillUnmount()</h3><p>组件卸载和数据的销毁</p>\n<h2 id=\"更新阶段\"><a href=\"#更新阶段\" class=\"headerlink\" title=\"更新阶段\"></a>更新阶段</h2><h3 id=\"componentWillReceiveProps-nextProps\"><a href=\"#componentWillReceiveProps-nextProps\" class=\"headerlink\" title=\"componentWillReceiveProps(nextProps)\"></a>componentWillReceiveProps(nextProps)</h3><p>在接受父组件改变后的 props 需要重新渲染组件时用的比较多</p>\n<p>接受一个参数 nextProps;</p>\n<p>通过对比 nextProps 和 this.props,将 nextProps 的 state 为组件的 state,从而重新渲染组件</p>\n<h3 id=\"componentWillUpdate-nextProps-nextState\"><a href=\"#componentWillUpdate-nextProps-nextState\" class=\"headerlink\" title=\"componentWillUpdate(nextProps,nextState)\"></a>componentWillUpdate(nextProps,nextState)</h3><p>组件进入重新渲染的流程,这里同样能拿到 nextProps 和 nextState</p>\n<h3 id=\"componentDidUpdate-prevProps-PrevState\"><a href=\"#componentDidUpdate-prevProps-PrevState\" class=\"headerlink\" title=\"componentDidUpdate(prevProps,PrevState)\"></a>componentDidUpdate(prevProps,PrevState)</h3><p>组件更新完毕后,react 只会在第一次初始化成功会进入 componentDidMount(),之后每次渲染都会进入这个生命周期</p>\n<h2 id=\"新增生命周期\"><a href=\"#新增生命周期\" class=\"headerlink\" title=\"新增生命周期\"></a>新增生命周期</h2><h3 id=\"getDerivcedStateFromProps-nextProps-nextState\"><a href=\"#getDerivcedStateFromProps-nextProps-nextState\" class=\"headerlink\" title=\"getDerivcedStateFromProps(nextProps,nextState)\"></a>getDerivcedStateFromProps(nextProps,nextState)</h3><p>代替 componentWillProps(),就是在根据当前的 props 来更新组件的 state，而不是去做其他一些让组件自身状态变得更加不可预测的事情。</p>\n<h3 id=\"getSnapshotBeforeUpdate-prevProps-PrevState\"><a href=\"#getSnapshotBeforeUpdate-prevProps-PrevState\" class=\"headerlink\" title=\"getSnapshotBeforeUpdate(prevProps,PrevState)\"></a>getSnapshotBeforeUpdate(prevProps,PrevState)</h3><p>代替 componentWillUpdate()</p>\n<p>componentDidUpdate()和 componentWillUpdate()中读取的 dom 元素状态不是安全的,因为这个值很可能失效了</p>\n<p>getSnapshotBeforeUpdate 会在最终的 render 前调用,也就是是说在 getSnapshotBeforeUpdate 中读取的 dom 元素状态和 componentDidUpdate 是一致的</p>\n<p>此生命周期返回的任何值都将作为参数传递给 componentDidUpdate</p>\n","excerpt":"","more":"<p><img src=\"/images/react/zhouqi.jpeg\" alt=\"周期.png\"></p>\n<h2 id=\"挂载和销毁阶段\"><a href=\"#挂载和销毁阶段\" class=\"headerlink\" title=\"挂载和销毁阶段\"></a>挂载和销毁阶段</h2><h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor()\"></a>constructor()</h3><p>constructor()中完成了 react 数据的初始化,它接受两个参数:props 和 content</p>\n<h3 id=\"componentWillMount\"><a href=\"#componentWillMount\" class=\"headerlink\" title=\"componentWillMount()\"></a>componentWillMount()</h3><p>在渲染前调用,在客户端也在服务端。它代表的过程是组件已经经历了 constructor()初始化数据后，但是还未渲染 DOM 时。</p>\n<h3 id=\"componentDidMount\"><a href=\"#componentDidMount\" class=\"headerlink\" title=\"componentDidMount()\"></a>componentDidMount()</h3><p>组件第一次渲染完成,此时 dom 节点已经生成</p>\n<h3 id=\"componentWillUnmount\"><a href=\"#componentWillUnmount\" class=\"headerlink\" title=\"componentWillUnmount()\"></a>componentWillUnmount()</h3><p>组件卸载和数据的销毁</p>\n<h2 id=\"更新阶段\"><a href=\"#更新阶段\" class=\"headerlink\" title=\"更新阶段\"></a>更新阶段</h2><h3 id=\"componentWillReceiveProps-nextProps\"><a href=\"#componentWillReceiveProps-nextProps\" class=\"headerlink\" title=\"componentWillReceiveProps(nextProps)\"></a>componentWillReceiveProps(nextProps)</h3><p>在接受父组件改变后的 props 需要重新渲染组件时用的比较多</p>\n<p>接受一个参数 nextProps;</p>\n<p>通过对比 nextProps 和 this.props,将 nextProps 的 state 为组件的 state,从而重新渲染组件</p>\n<h3 id=\"componentWillUpdate-nextProps-nextState\"><a href=\"#componentWillUpdate-nextProps-nextState\" class=\"headerlink\" title=\"componentWillUpdate(nextProps,nextState)\"></a>componentWillUpdate(nextProps,nextState)</h3><p>组件进入重新渲染的流程,这里同样能拿到 nextProps 和 nextState</p>\n<h3 id=\"componentDidUpdate-prevProps-PrevState\"><a href=\"#componentDidUpdate-prevProps-PrevState\" class=\"headerlink\" title=\"componentDidUpdate(prevProps,PrevState)\"></a>componentDidUpdate(prevProps,PrevState)</h3><p>组件更新完毕后,react 只会在第一次初始化成功会进入 componentDidMount(),之后每次渲染都会进入这个生命周期</p>\n<h2 id=\"新增生命周期\"><a href=\"#新增生命周期\" class=\"headerlink\" title=\"新增生命周期\"></a>新增生命周期</h2><h3 id=\"getDerivcedStateFromProps-nextProps-nextState\"><a href=\"#getDerivcedStateFromProps-nextProps-nextState\" class=\"headerlink\" title=\"getDerivcedStateFromProps(nextProps,nextState)\"></a>getDerivcedStateFromProps(nextProps,nextState)</h3><p>代替 componentWillProps(),就是在根据当前的 props 来更新组件的 state，而不是去做其他一些让组件自身状态变得更加不可预测的事情。</p>\n<h3 id=\"getSnapshotBeforeUpdate-prevProps-PrevState\"><a href=\"#getSnapshotBeforeUpdate-prevProps-PrevState\" class=\"headerlink\" title=\"getSnapshotBeforeUpdate(prevProps,PrevState)\"></a>getSnapshotBeforeUpdate(prevProps,PrevState)</h3><p>代替 componentWillUpdate()</p>\n<p>componentDidUpdate()和 componentWillUpdate()中读取的 dom 元素状态不是安全的,因为这个值很可能失效了</p>\n<p>getSnapshotBeforeUpdate 会在最终的 render 前调用,也就是是说在 getSnapshotBeforeUpdate 中读取的 dom 元素状态和 componentDidUpdate 是一致的</p>\n<p>此生命周期返回的任何值都将作为参数传递给 componentDidUpdate</p>\n"},{"title":"react组件传参方式","date":"2020-11-30T16:00:00.000Z","_content":"\n在 React 中，组件之间传递参数有几种常见的方式：\n\n**Props 传递：** 这是 React 中最常见的方式。你可以通过在组件的声明中传递 props 属性来传递参数。父组件可以向子组件传递数据，子组件通过 props 对象接收这些数据。例如：\n\n```jsx\n// ParentComponent.js\nimport ChildComponent from \"./ChildComponent\";\n\nfunction ParentComponent() {\n  return <ChildComponent name=\"John\" age={30} />;\n}\n\n// ChildComponent.js\nfunction ChildComponent(props) {\n  return (\n    <div>\n      <p>Name: {props.name}</p>\n      <p>Age: {props.age}</p>\n    </div>\n  );\n}\n```\n\n1. **State 管理：** 你可以在组件内部使用 **`state`** 来管理数据，并通过 **`props`** 将这些数据传递给子组件。当父组件的状态发生变化时，会重新渲染子组件。这在需要在父组件中修改数据并通知子组件更新时很有用。\n2. **Context API：** 当组件嵌套较深，但多个组件需要访问相同的数据时，可以使用 Context API。Context 允许您将数据传递给组件树中的所有组件，而无需手动传递 props。这在跨多个层次的组件传递参数时很有用。\n3. **Redux 或其他状态管理库：** 当应用的状态变得更加复杂时，可以使用状态管理库（如 Redux）来管理应用的状态。Redux 允许您将应用程序的状态存储在一个单一的 store 中，并允许您以一种统一的方式在组件之间共享状态和派发操作。\n\n这些是 React 中常用的组件传递参数的方式，选择哪种方式取决于你的具体需求和应用程序的复杂性。\n","source":"_posts/code/react/react组件传参方式.md","raw":"---\ntitle: react组件传参方式\ndate: 2020-12-01\ntags:\n  - javascript\n  - react\n  - 基础\ncategories:\n  - 技术\n  - 学习\n---\n\n在 React 中，组件之间传递参数有几种常见的方式：\n\n**Props 传递：** 这是 React 中最常见的方式。你可以通过在组件的声明中传递 props 属性来传递参数。父组件可以向子组件传递数据，子组件通过 props 对象接收这些数据。例如：\n\n```jsx\n// ParentComponent.js\nimport ChildComponent from \"./ChildComponent\";\n\nfunction ParentComponent() {\n  return <ChildComponent name=\"John\" age={30} />;\n}\n\n// ChildComponent.js\nfunction ChildComponent(props) {\n  return (\n    <div>\n      <p>Name: {props.name}</p>\n      <p>Age: {props.age}</p>\n    </div>\n  );\n}\n```\n\n1. **State 管理：** 你可以在组件内部使用 **`state`** 来管理数据，并通过 **`props`** 将这些数据传递给子组件。当父组件的状态发生变化时，会重新渲染子组件。这在需要在父组件中修改数据并通知子组件更新时很有用。\n2. **Context API：** 当组件嵌套较深，但多个组件需要访问相同的数据时，可以使用 Context API。Context 允许您将数据传递给组件树中的所有组件，而无需手动传递 props。这在跨多个层次的组件传递参数时很有用。\n3. **Redux 或其他状态管理库：** 当应用的状态变得更加复杂时，可以使用状态管理库（如 Redux）来管理应用的状态。Redux 允许您将应用程序的状态存储在一个单一的 store 中，并允许您以一种统一的方式在组件之间共享状态和派发操作。\n\n这些是 React 中常用的组件传递参数的方式，选择哪种方式取决于你的具体需求和应用程序的复杂性。\n","slug":"code/react/react组件传参方式","published":1,"updated":"2024-12-29T06:01:07.872Z","_id":"cm597bcf4000gb9p9765ja2qd","comments":1,"layout":"post","photos":[],"content":"<p>在 React 中，组件之间传递参数有几种常见的方式：</p>\n<p><strong>Props 传递：</strong> 这是 React 中最常见的方式。你可以通过在组件的声明中传递 props 属性来传递参数。父组件可以向子组件传递数据，子组件通过 props 对象接收这些数据。例如：</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ParentComponent.js</span>\n<span class=\"token keyword\">import</span> ChildComponent <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ChildComponent\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ParentComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildComponent</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>John<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">age</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// ChildComponent.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ChildComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Name: </span><span class=\"token punctuation\">&#123;</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Age: </span><span class=\"token punctuation\">&#123;</span>props<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li><strong>State 管理：</strong> 你可以在组件内部使用 <strong><code>state</code></strong> 来管理数据，并通过 <strong><code>props</code></strong> 将这些数据传递给子组件。当父组件的状态发生变化时，会重新渲染子组件。这在需要在父组件中修改数据并通知子组件更新时很有用。</li>\n<li><strong>Context API：</strong> 当组件嵌套较深，但多个组件需要访问相同的数据时，可以使用 Context API。Context 允许您将数据传递给组件树中的所有组件，而无需手动传递 props。这在跨多个层次的组件传递参数时很有用。</li>\n<li><strong>Redux 或其他状态管理库：</strong> 当应用的状态变得更加复杂时，可以使用状态管理库（如 Redux）来管理应用的状态。Redux 允许您将应用程序的状态存储在一个单一的 store 中，并允许您以一种统一的方式在组件之间共享状态和派发操作。</li>\n</ol>\n<p>这些是 React 中常用的组件传递参数的方式，选择哪种方式取决于你的具体需求和应用程序的复杂性。</p>\n","excerpt":"","more":"<p>在 React 中，组件之间传递参数有几种常见的方式：</p>\n<p><strong>Props 传递：</strong> 这是 React 中最常见的方式。你可以通过在组件的声明中传递 props 属性来传递参数。父组件可以向子组件传递数据，子组件通过 props 对象接收这些数据。例如：</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// ParentComponent.js</span>\n<span class=\"token keyword\">import</span> ChildComponent <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ChildComponent\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ParentComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ChildComponent</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>John<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">age</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// ChildComponent.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ChildComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Name: </span><span class=\"token punctuation\">&#123;</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Age: </span><span class=\"token punctuation\">&#123;</span>props<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li><strong>State 管理：</strong> 你可以在组件内部使用 <strong><code>state</code></strong> 来管理数据，并通过 <strong><code>props</code></strong> 将这些数据传递给子组件。当父组件的状态发生变化时，会重新渲染子组件。这在需要在父组件中修改数据并通知子组件更新时很有用。</li>\n<li><strong>Context API：</strong> 当组件嵌套较深，但多个组件需要访问相同的数据时，可以使用 Context API。Context 允许您将数据传递给组件树中的所有组件，而无需手动传递 props。这在跨多个层次的组件传递参数时很有用。</li>\n<li><strong>Redux 或其他状态管理库：</strong> 当应用的状态变得更加复杂时，可以使用状态管理库（如 Redux）来管理应用的状态。Redux 允许您将应用程序的状态存储在一个单一的 store 中，并允许您以一种统一的方式在组件之间共享状态和派发操作。</li>\n</ol>\n<p>这些是 React 中常用的组件传递参数的方式，选择哪种方式取决于你的具体需求和应用程序的复杂性。</p>\n"},{"title":"header带有中文参数的问题","date":"2020-11-30T16:00:00.000Z","_content":"\nHTTP 请求可以包含中文参数，但由于 HTTP 协议的设计和传输的标准，中文等非 ASCII 字符需要经过编码处理才能正确传输和解析。这是因为 HTTP 请求中 URL 使用的字符集是 ASCII，直接传递中文字符可能导致服务器无法正确解析，甚至可能引发错误。\n\nHTTP 请求可以包含中文参数，但由于 HTTP 协议的设计和传输的标准，中文等非 ASCII 字符需要经过编码处理才能正确传输和解析。这是因为 HTTP 请求中 URL 使用的字符集是 ASCII，直接传递中文字符可能导致服务器无法正确解析，甚至可能引发错误。\n\n以下是原因和解决方式：\n\n## 原因：\n\n### URL 字符限制：\n\nURL 中的字符通常是基于 ASCII 编码的，而中文属于非 ASCII 字符，直接放入 URL 中可能导致解析问题。\n\n### 传输标准：\n\n在 HTTP 请求中，URL 需要遵循 URI 规范，其中保留的字符（如/、?、=等）具有特定含义，非 ASCII 字符（如中文）需要编码为安全的格式。\n\n### 服务器解析问题：\n\n服务器解析 URL 时，通常会将其解码为指定的编码格式（如 UTF-8）。如果未进行正确的编码处理，可能会出现乱码或错误。\n\n## 解决方案：\n\n### URL 编码：\n\n使用 URL encoding（百分号编码）将中文字符转换为可传输的 ASCII 格式。例如：\n中文字符`你好` → `%E4%BD%A0%E5%A5%BD`\n在前端可以使用 `encodeURIComponent` 进行编码，后端使用相应的解码函数解析。\n\n示例：\n\n```javascript\nconst param = \"你好\";\nconst encodedParam = encodeURIComponent(param); // 输出 \"%E4%BD%A0%E5%A5%BD\"\n```\n\n### 设置字符集：\n\n确保客户端和服务器端使用一致的字符集（如 UTF-8），以避免因编码不匹配导致的问题。\n\n### POST 请求中的 Body 参数：\n\n如果参数包含大量中文，建议使用 POST 方法，将参数放在请求体中，而不是 URL 中。请求体可以直接传递原始字符串，避免编码问题。\n\n### 检查服务器配置：\n\n确保服务器能够正确解析 URL 中的非 ASCII 字符。某些旧版本服务器可能需要额外配置支持 UTF-8 URL。\n","source":"_posts/code/javascript/header带有中文参数的问题.md","raw":"---\ntitle: header带有中文参数的问题\ndate: 2020-12-01\ntags:\n  - javascript\n  - 基础\ncategories:\n  - 技术\n  - 学习\n---\n\nHTTP 请求可以包含中文参数，但由于 HTTP 协议的设计和传输的标准，中文等非 ASCII 字符需要经过编码处理才能正确传输和解析。这是因为 HTTP 请求中 URL 使用的字符集是 ASCII，直接传递中文字符可能导致服务器无法正确解析，甚至可能引发错误。\n\nHTTP 请求可以包含中文参数，但由于 HTTP 协议的设计和传输的标准，中文等非 ASCII 字符需要经过编码处理才能正确传输和解析。这是因为 HTTP 请求中 URL 使用的字符集是 ASCII，直接传递中文字符可能导致服务器无法正确解析，甚至可能引发错误。\n\n以下是原因和解决方式：\n\n## 原因：\n\n### URL 字符限制：\n\nURL 中的字符通常是基于 ASCII 编码的，而中文属于非 ASCII 字符，直接放入 URL 中可能导致解析问题。\n\n### 传输标准：\n\n在 HTTP 请求中，URL 需要遵循 URI 规范，其中保留的字符（如/、?、=等）具有特定含义，非 ASCII 字符（如中文）需要编码为安全的格式。\n\n### 服务器解析问题：\n\n服务器解析 URL 时，通常会将其解码为指定的编码格式（如 UTF-8）。如果未进行正确的编码处理，可能会出现乱码或错误。\n\n## 解决方案：\n\n### URL 编码：\n\n使用 URL encoding（百分号编码）将中文字符转换为可传输的 ASCII 格式。例如：\n中文字符`你好` → `%E4%BD%A0%E5%A5%BD`\n在前端可以使用 `encodeURIComponent` 进行编码，后端使用相应的解码函数解析。\n\n示例：\n\n```javascript\nconst param = \"你好\";\nconst encodedParam = encodeURIComponent(param); // 输出 \"%E4%BD%A0%E5%A5%BD\"\n```\n\n### 设置字符集：\n\n确保客户端和服务器端使用一致的字符集（如 UTF-8），以避免因编码不匹配导致的问题。\n\n### POST 请求中的 Body 参数：\n\n如果参数包含大量中文，建议使用 POST 方法，将参数放在请求体中，而不是 URL 中。请求体可以直接传递原始字符串，避免编码问题。\n\n### 检查服务器配置：\n\n确保服务器能够正确解析 URL 中的非 ASCII 字符。某些旧版本服务器可能需要额外配置支持 UTF-8 URL。\n","slug":"code/javascript/header带有中文参数的问题","published":1,"updated":"2024-12-29T06:09:44.708Z","_id":"cm597h4ay000mb9p963z0b80g","comments":1,"layout":"post","photos":[],"content":"<p>HTTP 请求可以包含中文参数，但由于 HTTP 协议的设计和传输的标准，中文等非 ASCII 字符需要经过编码处理才能正确传输和解析。这是因为 HTTP 请求中 URL 使用的字符集是 ASCII，直接传递中文字符可能导致服务器无法正确解析，甚至可能引发错误。</p>\n<p>HTTP 请求可以包含中文参数，但由于 HTTP 协议的设计和传输的标准，中文等非 ASCII 字符需要经过编码处理才能正确传输和解析。这是因为 HTTP 请求中 URL 使用的字符集是 ASCII，直接传递中文字符可能导致服务器无法正确解析，甚至可能引发错误。</p>\n<p>以下是原因和解决方式：</p>\n<h2 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a>原因：</h2><h3 id=\"URL-字符限制：\"><a href=\"#URL-字符限制：\" class=\"headerlink\" title=\"URL 字符限制：\"></a>URL 字符限制：</h3><p>URL 中的字符通常是基于 ASCII 编码的，而中文属于非 ASCII 字符，直接放入 URL 中可能导致解析问题。</p>\n<h3 id=\"传输标准：\"><a href=\"#传输标准：\" class=\"headerlink\" title=\"传输标准：\"></a>传输标准：</h3><p>在 HTTP 请求中，URL 需要遵循 URI 规范，其中保留的字符（如&#x2F;、?、&#x3D;等）具有特定含义，非 ASCII 字符（如中文）需要编码为安全的格式。</p>\n<h3 id=\"服务器解析问题：\"><a href=\"#服务器解析问题：\" class=\"headerlink\" title=\"服务器解析问题：\"></a>服务器解析问题：</h3><p>服务器解析 URL 时，通常会将其解码为指定的编码格式（如 UTF-8）。如果未进行正确的编码处理，可能会出现乱码或错误。</p>\n<h2 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h2><h3 id=\"URL-编码：\"><a href=\"#URL-编码：\" class=\"headerlink\" title=\"URL 编码：\"></a>URL 编码：</h3><p>使用 URL encoding（百分号编码）将中文字符转换为可传输的 ASCII 格式。例如：<br>中文字符<code>你好</code> → <code>%E4%BD%A0%E5%A5%BD</code><br>在前端可以使用 <code>encodeURIComponent</code> 进行编码，后端使用相应的解码函数解析。</p>\n<p>示例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> param <span class=\"token operator\">=</span> <span class=\"token string\">\"你好\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> encodedParam <span class=\"token operator\">=</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 \"%E4%BD%A0%E5%A5%BD\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"设置字符集：\"><a href=\"#设置字符集：\" class=\"headerlink\" title=\"设置字符集：\"></a>设置字符集：</h3><p>确保客户端和服务器端使用一致的字符集（如 UTF-8），以避免因编码不匹配导致的问题。</p>\n<h3 id=\"POST-请求中的-Body-参数：\"><a href=\"#POST-请求中的-Body-参数：\" class=\"headerlink\" title=\"POST 请求中的 Body 参数：\"></a>POST 请求中的 Body 参数：</h3><p>如果参数包含大量中文，建议使用 POST 方法，将参数放在请求体中，而不是 URL 中。请求体可以直接传递原始字符串，避免编码问题。</p>\n<h3 id=\"检查服务器配置：\"><a href=\"#检查服务器配置：\" class=\"headerlink\" title=\"检查服务器配置：\"></a>检查服务器配置：</h3><p>确保服务器能够正确解析 URL 中的非 ASCII 字符。某些旧版本服务器可能需要额外配置支持 UTF-8 URL。</p>\n","excerpt":"","more":"<p>HTTP 请求可以包含中文参数，但由于 HTTP 协议的设计和传输的标准，中文等非 ASCII 字符需要经过编码处理才能正确传输和解析。这是因为 HTTP 请求中 URL 使用的字符集是 ASCII，直接传递中文字符可能导致服务器无法正确解析，甚至可能引发错误。</p>\n<p>HTTP 请求可以包含中文参数，但由于 HTTP 协议的设计和传输的标准，中文等非 ASCII 字符需要经过编码处理才能正确传输和解析。这是因为 HTTP 请求中 URL 使用的字符集是 ASCII，直接传递中文字符可能导致服务器无法正确解析，甚至可能引发错误。</p>\n<p>以下是原因和解决方式：</p>\n<h2 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a>原因：</h2><h3 id=\"URL-字符限制：\"><a href=\"#URL-字符限制：\" class=\"headerlink\" title=\"URL 字符限制：\"></a>URL 字符限制：</h3><p>URL 中的字符通常是基于 ASCII 编码的，而中文属于非 ASCII 字符，直接放入 URL 中可能导致解析问题。</p>\n<h3 id=\"传输标准：\"><a href=\"#传输标准：\" class=\"headerlink\" title=\"传输标准：\"></a>传输标准：</h3><p>在 HTTP 请求中，URL 需要遵循 URI 规范，其中保留的字符（如&#x2F;、?、&#x3D;等）具有特定含义，非 ASCII 字符（如中文）需要编码为安全的格式。</p>\n<h3 id=\"服务器解析问题：\"><a href=\"#服务器解析问题：\" class=\"headerlink\" title=\"服务器解析问题：\"></a>服务器解析问题：</h3><p>服务器解析 URL 时，通常会将其解码为指定的编码格式（如 UTF-8）。如果未进行正确的编码处理，可能会出现乱码或错误。</p>\n<h2 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h2><h3 id=\"URL-编码：\"><a href=\"#URL-编码：\" class=\"headerlink\" title=\"URL 编码：\"></a>URL 编码：</h3><p>使用 URL encoding（百分号编码）将中文字符转换为可传输的 ASCII 格式。例如：<br>中文字符<code>你好</code> → <code>%E4%BD%A0%E5%A5%BD</code><br>在前端可以使用 <code>encodeURIComponent</code> 进行编码，后端使用相应的解码函数解析。</p>\n<p>示例：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> param <span class=\"token operator\">=</span> <span class=\"token string\">\"你好\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> encodedParam <span class=\"token operator\">=</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 \"%E4%BD%A0%E5%A5%BD\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"设置字符集：\"><a href=\"#设置字符集：\" class=\"headerlink\" title=\"设置字符集：\"></a>设置字符集：</h3><p>确保客户端和服务器端使用一致的字符集（如 UTF-8），以避免因编码不匹配导致的问题。</p>\n<h3 id=\"POST-请求中的-Body-参数：\"><a href=\"#POST-请求中的-Body-参数：\" class=\"headerlink\" title=\"POST 请求中的 Body 参数：\"></a>POST 请求中的 Body 参数：</h3><p>如果参数包含大量中文，建议使用 POST 方法，将参数放在请求体中，而不是 URL 中。请求体可以直接传递原始字符串，避免编码问题。</p>\n<h3 id=\"检查服务器配置：\"><a href=\"#检查服务器配置：\" class=\"headerlink\" title=\"检查服务器配置：\"></a>检查服务器配置：</h3><p>确保服务器能够正确解析 URL 中的非 ASCII 字符。某些旧版本服务器可能需要额外配置支持 UTF-8 URL。</p>\n"},{"title":"中高级前段常见面试题","date":"2025-01-10T16:00:00.000Z","_content":"\n总结常见的中高级面试题\n\n## javascipt\n\n### 什么是作用域?\n","source":"_posts/code/常见面试题.md","raw":"---\ntitle: 中高级前段常见面试题\ndate: 2025-01-11\ntags:\n  - 面试\ncategories:\n  - 技术\n  - 学习\n---\n\n总结常见的中高级面试题\n\n## javascipt\n\n### 什么是作用域?\n","slug":"code/常见面试题","published":1,"updated":"2025-01-11T04:45:24.462Z","comments":1,"layout":"post","photos":[],"_id":"cm5rpdvoo0000ump92v2d1ikg","content":"<p>总结常见的中高级面试题</p>\n<h2 id=\"javascipt\"><a href=\"#javascipt\" class=\"headerlink\" title=\"javascipt\"></a>javascipt</h2><h3 id=\"什么是作用域\"><a href=\"#什么是作用域\" class=\"headerlink\" title=\"什么是作用域?\"></a>什么是作用域?</h3>","excerpt":"","more":"<p>总结常见的中高级面试题</p>\n<h2 id=\"javascipt\"><a href=\"#javascipt\" class=\"headerlink\" title=\"javascipt\"></a>javascipt</h2><h3 id=\"什么是作用域\"><a href=\"#什么是作用域\" class=\"headerlink\" title=\"什么是作用域?\"></a>什么是作用域?</h3>"},{"title":"react fiber","date":"2020-11-30T16:00:00.000Z","_content":"\n## 原因\n\n是大量的同步计算任务阻塞了浏览器的 ui 渲染，默认情况下，js 运算，页面布局和页面绘制都是运行在浏览器的主进程中，他们是互斥的关系。如果 js 运算长时间占用主线程，页面就无法得到及时的更新。当我们调用`setState`更新页面的时候，react 回遍历应用的所有节点，计算出差异，然后更新 UI。整个过程是一气呵成，不能被打断。如果页面元素过多，就容易出现掉帧的现象。\n\n## 解决\n\n解决主线程一直被 js 运算占用这一问题的基本思路，将运算分割为多步骤，分批完成。也就是完成一部分任务之后，将控制权就给浏览器，让浏览器有时间进行页面渲染。等浏览器完成之后，再继续之前未完成的任务\n\n## 原理\n\nreact 框架内部的运作可以为分为三层\n\n- Virtual DOM 层 结构层(描述页面长什么样)，js 结构层\n- Reconciler 层 负责调用组件生命周期方法，进行 DIff 等 调度阶段\n- Renderer 层 渲染层 比较常见的就是`ReactDom`和`ReactNative`\n\nreact 团队重写了 Reconciler 层，即组件生命周期和 diff 算法，react 团队命名为`fiber Reconciler`，建立了自己的组件调用栈，让 diff 计算可打断。\n\nFiber 其实实指的一种数据结构，它可以用一个纯 js 对象来表示:\n\n```jsx\nconst fiber={\n\tstateNode, // 节点实例\n\tchild,     // 子节点\n\tsibing,    // 兄弟节点\n\treturn    // 父节点\n}\n```\n\n为了区分，以前的 Reconiler 被命名为`Stack Reconiler` 。Stack Reconciler 运作的过程是不能被打断的，必须一条道走到黑：\n![示例1.png](https://segmentfault.com/img/bVboIrF?w=1556&h=602)\n而 Fiber Reconiler 每执行一段时间，就会将控制权交回浏览器，可以分端执行：\n\n![示例2.png](https://segmentfault.com/img/bVboJj4?w=1472&h=578)\n","source":"_posts/code/react/react fiber.md","raw":"---\ntitle: react fiber\ndate: 2020-12-01\ntags:\n  - javascript\n  - react\n  - 基础\ncategories:\n  - 技术\n  - 学习\n---\n\n## 原因\n\n是大量的同步计算任务阻塞了浏览器的 ui 渲染，默认情况下，js 运算，页面布局和页面绘制都是运行在浏览器的主进程中，他们是互斥的关系。如果 js 运算长时间占用主线程，页面就无法得到及时的更新。当我们调用`setState`更新页面的时候，react 回遍历应用的所有节点，计算出差异，然后更新 UI。整个过程是一气呵成，不能被打断。如果页面元素过多，就容易出现掉帧的现象。\n\n## 解决\n\n解决主线程一直被 js 运算占用这一问题的基本思路，将运算分割为多步骤，分批完成。也就是完成一部分任务之后，将控制权就给浏览器，让浏览器有时间进行页面渲染。等浏览器完成之后，再继续之前未完成的任务\n\n## 原理\n\nreact 框架内部的运作可以为分为三层\n\n- Virtual DOM 层 结构层(描述页面长什么样)，js 结构层\n- Reconciler 层 负责调用组件生命周期方法，进行 DIff 等 调度阶段\n- Renderer 层 渲染层 比较常见的就是`ReactDom`和`ReactNative`\n\nreact 团队重写了 Reconciler 层，即组件生命周期和 diff 算法，react 团队命名为`fiber Reconciler`，建立了自己的组件调用栈，让 diff 计算可打断。\n\nFiber 其实实指的一种数据结构，它可以用一个纯 js 对象来表示:\n\n```jsx\nconst fiber={\n\tstateNode, // 节点实例\n\tchild,     // 子节点\n\tsibing,    // 兄弟节点\n\treturn    // 父节点\n}\n```\n\n为了区分，以前的 Reconiler 被命名为`Stack Reconiler` 。Stack Reconciler 运作的过程是不能被打断的，必须一条道走到黑：\n![示例1.png](https://segmentfault.com/img/bVboIrF?w=1556&h=602)\n而 Fiber Reconiler 每执行一段时间，就会将控制权交回浏览器，可以分端执行：\n\n![示例2.png](https://segmentfault.com/img/bVboJj4?w=1472&h=578)\n","slug":"code/react/react fiber","published":1,"updated":"2024-12-29T06:17:13.887Z","comments":1,"layout":"post","photos":[],"_id":"cm5rpdvoq0001ump96594ftj4","content":"<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>是大量的同步计算任务阻塞了浏览器的 ui 渲染，默认情况下，js 运算，页面布局和页面绘制都是运行在浏览器的主进程中，他们是互斥的关系。如果 js 运算长时间占用主线程，页面就无法得到及时的更新。当我们调用<code>setState</code>更新页面的时候，react 回遍历应用的所有节点，计算出差异，然后更新 UI。整个过程是一气呵成，不能被打断。如果页面元素过多，就容易出现掉帧的现象。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>解决主线程一直被 js 运算占用这一问题的基本思路，将运算分割为多步骤，分批完成。也就是完成一部分任务之后，将控制权就给浏览器，让浏览器有时间进行页面渲染。等浏览器完成之后，再继续之前未完成的任务</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>react 框架内部的运作可以为分为三层</p>\n<ul>\n<li>Virtual DOM 层 结构层(描述页面长什么样)，js 结构层</li>\n<li>Reconciler 层 负责调用组件生命周期方法，进行 DIff 等 调度阶段</li>\n<li>Renderer 层 渲染层 比较常见的就是<code>ReactDom</code>和<code>ReactNative</code></li>\n</ul>\n<p>react 团队重写了 Reconciler 层，即组件生命周期和 diff 算法，react 团队命名为<code>fiber Reconciler</code>，建立了自己的组件调用栈，让 diff 计算可打断。</p>\n<p>Fiber 其实实指的一种数据结构，它可以用一个纯 js 对象来表示:</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> fiber<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n\tstateNode<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 节点实例</span>\n\tchild<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 子节点</span>\n\tsibing<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 兄弟节点</span>\n\t<span class=\"token keyword\">return</span>    <span class=\"token comment\">// 父节点</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了区分，以前的 Reconiler 被命名为<code>Stack Reconiler</code> 。Stack Reconciler 运作的过程是不能被打断的，必须一条道走到黑：<br><img src=\"https://segmentfault.com/img/bVboIrF?w=1556&h=602\" alt=\"示例1.png\"><br>而 Fiber Reconiler 每执行一段时间，就会将控制权交回浏览器，可以分端执行：</p>\n<p><img src=\"https://segmentfault.com/img/bVboJj4?w=1472&h=578\" alt=\"示例2.png\"></p>\n","excerpt":"","more":"<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>是大量的同步计算任务阻塞了浏览器的 ui 渲染，默认情况下，js 运算，页面布局和页面绘制都是运行在浏览器的主进程中，他们是互斥的关系。如果 js 运算长时间占用主线程，页面就无法得到及时的更新。当我们调用<code>setState</code>更新页面的时候，react 回遍历应用的所有节点，计算出差异，然后更新 UI。整个过程是一气呵成，不能被打断。如果页面元素过多，就容易出现掉帧的现象。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>解决主线程一直被 js 运算占用这一问题的基本思路，将运算分割为多步骤，分批完成。也就是完成一部分任务之后，将控制权就给浏览器，让浏览器有时间进行页面渲染。等浏览器完成之后，再继续之前未完成的任务</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>react 框架内部的运作可以为分为三层</p>\n<ul>\n<li>Virtual DOM 层 结构层(描述页面长什么样)，js 结构层</li>\n<li>Reconciler 层 负责调用组件生命周期方法，进行 DIff 等 调度阶段</li>\n<li>Renderer 层 渲染层 比较常见的就是<code>ReactDom</code>和<code>ReactNative</code></li>\n</ul>\n<p>react 团队重写了 Reconciler 层，即组件生命周期和 diff 算法，react 团队命名为<code>fiber Reconciler</code>，建立了自己的组件调用栈，让 diff 计算可打断。</p>\n<p>Fiber 其实实指的一种数据结构，它可以用一个纯 js 对象来表示:</p>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> fiber<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n\tstateNode<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 节点实例</span>\n\tchild<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 子节点</span>\n\tsibing<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 兄弟节点</span>\n\t<span class=\"token keyword\">return</span>    <span class=\"token comment\">// 父节点</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了区分，以前的 Reconiler 被命名为<code>Stack Reconiler</code> 。Stack Reconciler 运作的过程是不能被打断的，必须一条道走到黑：<br><img src=\"https://segmentfault.com/img/bVboIrF?w=1556&h=602\" alt=\"示例1.png\"><br>而 Fiber Reconiler 每执行一段时间，就会将控制权交回浏览器，可以分端执行：</p>\n<p><img src=\"https://segmentfault.com/img/bVboJj4?w=1472&h=578\" alt=\"示例2.png\"></p>\n"},{"title":"react key的作用","date":"2020-12-07T16:00:00.000Z","_content":"\nkey 的主要作用用来减少没必要的 diff 算法对比,一个元素的 key 不需要在全局唯一,但在列表中需要保持唯一.\n\n---\n\n- **唯一性要求**： **`key`** 属性的值在同一列表中必须是唯一的。这样 React 才能准确地追踪每个列表项的变化。如果列表中的两个元素具有相同的 **`key`** ，React 将无法区分它们，可能会导致意外的行为或错误。\n- **稳定性**： **`key`** 应该是稳定的，即在组件的生命周期内保持不变。在列表中重新排序或添加/删除元素时，React 会根据 **`key`** 来判断哪些元素被修改了。如果 **`key`** 值不稳定，React 可能会错误地重新创建组件，导致组件状态丢失或不一致。\n- **性能优化**：React 使用 **`key`** 来确定何时对列表进行重新排序、添加或删除操作。通过提供稳定的 **`key`** ，React 可以最小化 DOM 操作，并在必要时仅对必要的部分进行更新，从而提高性能。\n- **推荐用法**：通常，使用列表项的唯一标识符作为 **`key`** 是一个好的选择。例如，在从数据库检索的数据中，可以使用每个项的唯一 ID 作为 **`key`** 。如果没有唯一标识符可用，也可以使用列表项的索引作为 **`key`** ，但这种做法可能会导致性能问题，因为 React 需要在重新排序时重新渲染整个列表。\n- **注意事项**：在使用 **`key`** 时，需要避免使用随机生成的 **`key`** ，因为这会导致不稳定的 **`key`** 值。此外，尽量避免在组件中依赖于 **`key`** 属性进行逻辑处理，因为 **`key`** 只是 React 的一个特殊属性，并不会传递给组件。\n","source":"_posts/code/react/react key的作用.md","raw":"---\ntitle: react key的作用\ndate: 2020-12-08\ntags:\n  - javascript\n  - react\n  - 基础\ncategories:\n  - 技术\n  - 学习\n---\n\nkey 的主要作用用来减少没必要的 diff 算法对比,一个元素的 key 不需要在全局唯一,但在列表中需要保持唯一.\n\n---\n\n- **唯一性要求**： **`key`** 属性的值在同一列表中必须是唯一的。这样 React 才能准确地追踪每个列表项的变化。如果列表中的两个元素具有相同的 **`key`** ，React 将无法区分它们，可能会导致意外的行为或错误。\n- **稳定性**： **`key`** 应该是稳定的，即在组件的生命周期内保持不变。在列表中重新排序或添加/删除元素时，React 会根据 **`key`** 来判断哪些元素被修改了。如果 **`key`** 值不稳定，React 可能会错误地重新创建组件，导致组件状态丢失或不一致。\n- **性能优化**：React 使用 **`key`** 来确定何时对列表进行重新排序、添加或删除操作。通过提供稳定的 **`key`** ，React 可以最小化 DOM 操作，并在必要时仅对必要的部分进行更新，从而提高性能。\n- **推荐用法**：通常，使用列表项的唯一标识符作为 **`key`** 是一个好的选择。例如，在从数据库检索的数据中，可以使用每个项的唯一 ID 作为 **`key`** 。如果没有唯一标识符可用，也可以使用列表项的索引作为 **`key`** ，但这种做法可能会导致性能问题，因为 React 需要在重新排序时重新渲染整个列表。\n- **注意事项**：在使用 **`key`** 时，需要避免使用随机生成的 **`key`** ，因为这会导致不稳定的 **`key`** 值。此外，尽量避免在组件中依赖于 **`key`** 属性进行逻辑处理，因为 **`key`** 只是 React 的一个特殊属性，并不会传递给组件。\n","slug":"code/react/react key的作用","published":1,"updated":"2024-12-29T11:05:05.612Z","comments":1,"layout":"post","photos":[],"_id":"cm5rpdvos0003ump9dpskajhr","content":"<p>key 的主要作用用来减少没必要的 diff 算法对比,一个元素的 key 不需要在全局唯一,但在列表中需要保持唯一.</p>\n<hr>\n<ul>\n<li><strong>唯一性要求</strong>： <strong><code>key</code></strong> 属性的值在同一列表中必须是唯一的。这样 React 才能准确地追踪每个列表项的变化。如果列表中的两个元素具有相同的 <strong><code>key</code></strong> ，React 将无法区分它们，可能会导致意外的行为或错误。</li>\n<li><strong>稳定性</strong>： <strong><code>key</code></strong> 应该是稳定的，即在组件的生命周期内保持不变。在列表中重新排序或添加&#x2F;删除元素时，React 会根据 <strong><code>key</code></strong> 来判断哪些元素被修改了。如果 <strong><code>key</code></strong> 值不稳定，React 可能会错误地重新创建组件，导致组件状态丢失或不一致。</li>\n<li><strong>性能优化</strong>：React 使用 <strong><code>key</code></strong> 来确定何时对列表进行重新排序、添加或删除操作。通过提供稳定的 <strong><code>key</code></strong> ，React 可以最小化 DOM 操作，并在必要时仅对必要的部分进行更新，从而提高性能。</li>\n<li><strong>推荐用法</strong>：通常，使用列表项的唯一标识符作为 <strong><code>key</code></strong> 是一个好的选择。例如，在从数据库检索的数据中，可以使用每个项的唯一 ID 作为 <strong><code>key</code></strong> 。如果没有唯一标识符可用，也可以使用列表项的索引作为 <strong><code>key</code></strong> ，但这种做法可能会导致性能问题，因为 React 需要在重新排序时重新渲染整个列表。</li>\n<li><strong>注意事项</strong>：在使用 <strong><code>key</code></strong> 时，需要避免使用随机生成的 <strong><code>key</code></strong> ，因为这会导致不稳定的 <strong><code>key</code></strong> 值。此外，尽量避免在组件中依赖于 <strong><code>key</code></strong> 属性进行逻辑处理，因为 <strong><code>key</code></strong> 只是 React 的一个特殊属性，并不会传递给组件。</li>\n</ul>\n","excerpt":"","more":"<p>key 的主要作用用来减少没必要的 diff 算法对比,一个元素的 key 不需要在全局唯一,但在列表中需要保持唯一.</p>\n<hr>\n<ul>\n<li><strong>唯一性要求</strong>： <strong><code>key</code></strong> 属性的值在同一列表中必须是唯一的。这样 React 才能准确地追踪每个列表项的变化。如果列表中的两个元素具有相同的 <strong><code>key</code></strong> ，React 将无法区分它们，可能会导致意外的行为或错误。</li>\n<li><strong>稳定性</strong>： <strong><code>key</code></strong> 应该是稳定的，即在组件的生命周期内保持不变。在列表中重新排序或添加&#x2F;删除元素时，React 会根据 <strong><code>key</code></strong> 来判断哪些元素被修改了。如果 <strong><code>key</code></strong> 值不稳定，React 可能会错误地重新创建组件，导致组件状态丢失或不一致。</li>\n<li><strong>性能优化</strong>：React 使用 <strong><code>key</code></strong> 来确定何时对列表进行重新排序、添加或删除操作。通过提供稳定的 <strong><code>key</code></strong> ，React 可以最小化 DOM 操作，并在必要时仅对必要的部分进行更新，从而提高性能。</li>\n<li><strong>推荐用法</strong>：通常，使用列表项的唯一标识符作为 <strong><code>key</code></strong> 是一个好的选择。例如，在从数据库检索的数据中，可以使用每个项的唯一 ID 作为 <strong><code>key</code></strong> 。如果没有唯一标识符可用，也可以使用列表项的索引作为 <strong><code>key</code></strong> ，但这种做法可能会导致性能问题，因为 React 需要在重新排序时重新渲染整个列表。</li>\n<li><strong>注意事项</strong>：在使用 <strong><code>key</code></strong> 时，需要避免使用随机生成的 <strong><code>key</code></strong> ，因为这会导致不稳定的 <strong><code>key</code></strong> 值。此外，尽量避免在组件中依赖于 <strong><code>key</code></strong> 属性进行逻辑处理，因为 <strong><code>key</code></strong> 只是 React 的一个特殊属性，并不会传递给组件。</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/CNAME","slug":"","post":"cm56jrk0s00003zp9bgmd18db","modified":0,"renderable":0},{"_id":"source/_posts/code/haxi/image.png","slug":"","post":"cm56jrk0s00003zp9bgmd18db","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cm56jrk0s00003zp9bgmd18db","category_id":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm56jrk0w00063zp952f17sqh"},{"post_id":"cm56jrk0s00003zp9bgmd18db","category_id":"cm4idgztq000iqdu2a37z84c2","_id":"cm56jrk0y000a3zp9gjdybwoo"},{"post_id":"cm56jrk0u00013zp9ckyyf0k7","category_id":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm56jrk0y000d3zp95memeye2"},{"post_id":"cm56jrk0u00013zp9ckyyf0k7","category_id":"cm4idgztq000iqdu2a37z84c2","_id":"cm56jrk0z000g3zp9bh645zwl"},{"post_id":"cm56jrk0v00033zp9bnht93mt","category_id":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm56jrk0z000j3zp91wuqeom3"},{"post_id":"cm56jrk0v00033zp9bnht93mt","category_id":"cm4idgztq000iqdu2a37z84c2","_id":"cm56jrk0z000l3zp9eq9046sv"},{"post_id":"cm56jrk0v00053zp93yut2gu2","category_id":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm56jrk0z000n3zp9ek52c6vg"},{"post_id":"cm56jrk0v00053zp93yut2gu2","category_id":"cm4idgztq000iqdu2a37z84c2","_id":"cm56jrk0z000p3zp9bj8seuwm"},{"post_id":"cm56jrk0x00093zp972ay2ab1","category_id":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm56jrk0z000r3zp96fa44pte"},{"post_id":"cm56jrk0x00093zp972ay2ab1","category_id":"cm4idgztq000iqdu2a37z84c2","_id":"cm56jrk0z000t3zp989nn7z4a"},{"post_id":"cm56jrk0y000c3zp96po88dum","category_id":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm56jrk0z000v3zp90gcl11ga"},{"post_id":"cm56jrk0y000c3zp96po88dum","category_id":"cm4idgztq000iqdu2a37z84c2","_id":"cm56jrk0z000x3zp90vux73zg"},{"post_id":"cm56jrk0y000f3zp92ercfc2r","category_id":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm56jrk0z000z3zp9brnz1zp3"},{"post_id":"cm56jrk0y000f3zp92ercfc2r","category_id":"cm4idgztq000iqdu2a37z84c2","_id":"cm56jrk0z00113zp9d79uhnl4"},{"post_id":"cm56jrk0z000i3zp94kq89xku","category_id":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm56jrk0z00123zp9h0491lw1"},{"post_id":"cm56jrk0z000i3zp94kq89xku","category_id":"cm4idgztq000iqdu2a37z84c2","_id":"cm56jrk0z00133zp9dmmr7uat"},{"post_id":"cm56jrk1200143zp9asvx6l2x","category_id":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm56jrk1300163zp91wjg7yx9"},{"post_id":"cm56jrk1200143zp9asvx6l2x","category_id":"cm4idgztq000iqdu2a37z84c2","_id":"cm56jrk1300173zp97f1bbki4"},{"post_id":"cm56kcwci00183zp91ffr1zhe","category_id":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm56kd2jq001b3zp94y1c1j4p"},{"post_id":"cm56kcwci00183zp91ffr1zhe","category_id":"cm4idgztq000iqdu2a37z84c2","_id":"cm56kd2jq001d3zp95cosgnah"},{"post_id":"cm5978rb10000b9p99voa3g0m","category_id":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm5978rb50005b9p96jd35eue"},{"post_id":"cm5978rb10000b9p99voa3g0m","category_id":"cm4idgztq000iqdu2a37z84c2","_id":"cm5978rb50007b9p90bo36h0m"},{"post_id":"cm5978rb30001b9p9b3aa7yag","category_id":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm5978rb60009b9p92mnrcree"},{"post_id":"cm5978rb30001b9p9b3aa7yag","category_id":"cm4idgztq000iqdu2a37z84c2","_id":"cm5978rb6000bb9p97ot76kkh"},{"post_id":"cm5978rb50003b9p99ymgf8xj","category_id":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm5978rb6000db9p9268t1qoj"},{"post_id":"cm5978rb50003b9p99ymgf8xj","category_id":"cm4idgztq000iqdu2a37z84c2","_id":"cm5978rb6000fb9p9ecvk2ldj"},{"post_id":"cm597bcf4000gb9p9765ja2qd","category_id":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm597bss9000jb9p95xe7gcyl"},{"post_id":"cm597bcf4000gb9p9765ja2qd","category_id":"cm4idgztq000iqdu2a37z84c2","_id":"cm597bssa000lb9p9fpm8gn3s"},{"post_id":"cm597h4ay000mb9p963z0b80g","category_id":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm597hjpy000pb9p9gb5003gw"},{"post_id":"cm597h4ay000mb9p963z0b80g","category_id":"cm4idgztq000iqdu2a37z84c2","_id":"cm597hjpy000rb9p983fm8ag9"},{"post_id":"cm5rpdvoo0000ump92v2d1ikg","category_id":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm5rpdvot0005ump98cie23wm"},{"post_id":"cm5rpdvoo0000ump92v2d1ikg","category_id":"cm4idgztq000iqdu2a37z84c2","_id":"cm5rpdvot0007ump92kuv0wv4"},{"post_id":"cm5rpdvoq0001ump96594ftj4","category_id":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm5rpdvot0009ump9eq4z4rtl"},{"post_id":"cm5rpdvoq0001ump96594ftj4","category_id":"cm4idgztq000iqdu2a37z84c2","_id":"cm5rpdvot000bump9ajyi9yp1"},{"post_id":"cm5rpdvos0003ump9dpskajhr","category_id":"cm4idgztg0004qdu2h4jt3qn1","_id":"cm5rpdvot000dump99k7i0n9g"},{"post_id":"cm5rpdvos0003ump9dpskajhr","category_id":"cm4idgztq000iqdu2a37z84c2","_id":"cm5rpdvot000fump9ghci7amm"}],"PostTag":[{"post_id":"cm56jrk0s00003zp9bgmd18db","tag_id":"cm4idgzti0005qdu2ankp6lob","_id":"cm56jrk0v00023zp953ii0jgb"},{"post_id":"cm56jrk0s00003zp9bgmd18db","tag_id":"cm4idgztm000cqdu28xz0gx1k","_id":"cm56jrk0v00043zp966a4hnrd"},{"post_id":"cm56jrk0u00013zp9ckyyf0k7","tag_id":"cm4idgztr000kqdu20ec99g4p","_id":"cm56jrk0x00083zp9cg8v21jw"},{"post_id":"cm56jrk0u00013zp9ckyyf0k7","tag_id":"cm4idgztm000cqdu28xz0gx1k","_id":"cm56jrk0y000b3zp9a9iehn9k"},{"post_id":"cm56jrk0v00053zp93yut2gu2","tag_id":"cm4idgztv001aqdu2cuxrbws1","_id":"cm56jrk0y000e3zp9gvf79rdl"},{"post_id":"cm56jrk0v00053zp93yut2gu2","tag_id":"cm4idgztw001fqdu2crorcitf","_id":"cm56jrk0z000h3zp95xpj6als"},{"post_id":"cm56jrk0x00093zp972ay2ab1","tag_id":"cm4idgztr000kqdu20ec99g4p","_id":"cm56jrk0z000k3zp9gb6icpz9"},{"post_id":"cm56jrk0x00093zp972ay2ab1","tag_id":"cm4idgztu0011qdu2gcypdyhr","_id":"cm56jrk0z000m3zp9f0ca95jw"},{"post_id":"cm56jrk0x00093zp972ay2ab1","tag_id":"cm4idgztu0015qdu29kd838sw","_id":"cm56jrk0z000o3zp9bk2t2z8z"},{"post_id":"cm56jrk0y000c3zp96po88dum","tag_id":"cm4idgztr000kqdu20ec99g4p","_id":"cm56jrk0z000q3zp9b1n41rg9"},{"post_id":"cm56jrk0y000c3zp96po88dum","tag_id":"cm4idgztu0011qdu2gcypdyhr","_id":"cm56jrk0z000s3zp9go472w14"},{"post_id":"cm56jrk0y000c3zp96po88dum","tag_id":"cm4idgztu0015qdu29kd838sw","_id":"cm56jrk0z000u3zp9307cg1ok"},{"post_id":"cm56jrk0v00033zp9bnht93mt","tag_id":"cm56jrk0w00073zp9cxfaffkb","_id":"cm56jrk0z000w3zp96hvy1o6h"},{"post_id":"cm56jrk0y000f3zp92ercfc2r","tag_id":"cm4idgztp000gqdu29p6hep1j","_id":"cm56jrk0z000y3zp95szg8x7w"},{"post_id":"cm56jrk0z000i3zp94kq89xku","tag_id":"cm4idgztr000kqdu20ec99g4p","_id":"cm56jrk0z00103zp90jyf50yx"},{"post_id":"cm56jrk1200143zp9asvx6l2x","tag_id":"cm4idgztr000kqdu20ec99g4p","_id":"cm56jrk1300153zp94hd34xer"},{"post_id":"cm56kcwci00183zp91ffr1zhe","tag_id":"cm4idgztr000kqdu20ec99g4p","_id":"cm56kd2jq00193zp93my1degg"},{"post_id":"cm56kcwci00183zp91ffr1zhe","tag_id":"cm4idgztu0011qdu2gcypdyhr","_id":"cm56kd2jq001a3zp9guomfrt2"},{"post_id":"cm56kcwci00183zp91ffr1zhe","tag_id":"cm4idgztu0015qdu29kd838sw","_id":"cm56kd2jq001c3zp9f7q52l69"},{"post_id":"cm5978rb30001b9p9b3aa7yag","tag_id":"cm4idgztr000kqdu20ec99g4p","_id":"cm5978rb50004b9p94fsl4hmk"},{"post_id":"cm5978rb50003b9p99ymgf8xj","tag_id":"cm4idgztr000kqdu20ec99g4p","_id":"cm5978rb50006b9p9a8tf4mcg"},{"post_id":"cm5978rb50003b9p99ymgf8xj","tag_id":"cm4idgztu0011qdu2gcypdyhr","_id":"cm5978rb60008b9p97j5aab9w"},{"post_id":"cm5978rb50003b9p99ymgf8xj","tag_id":"cm4idgztu0015qdu29kd838sw","_id":"cm5978rb6000ab9p93x3929s4"},{"post_id":"cm5978rb10000b9p99voa3g0m","tag_id":"cm5978rb40002b9p90s082zwo","_id":"cm5978rb6000cb9p9efbzbpx1"},{"post_id":"cm5978rb10000b9p99voa3g0m","tag_id":"cm4idgztr000kqdu20ec99g4p","_id":"cm5978rb6000eb9p99ekyhyca"},{"post_id":"cm597bcf4000gb9p9765ja2qd","tag_id":"cm4idgztr000kqdu20ec99g4p","_id":"cm597bss9000hb9p9d7lrfhpn"},{"post_id":"cm597bcf4000gb9p9765ja2qd","tag_id":"cm4idgztu0011qdu2gcypdyhr","_id":"cm597bss9000ib9p90z92gnye"},{"post_id":"cm597bcf4000gb9p9765ja2qd","tag_id":"cm4idgztu0015qdu29kd838sw","_id":"cm597bssa000kb9p9d4k47ghv"},{"post_id":"cm597h4ay000mb9p963z0b80g","tag_id":"cm4idgztr000kqdu20ec99g4p","_id":"cm597hjpy000nb9p93ndah2sl"},{"post_id":"cm597h4ay000mb9p963z0b80g","tag_id":"cm4idgztu0015qdu29kd838sw","_id":"cm597hjpy000qb9p90uwr6des"},{"post_id":"cm5rpdvoq0001ump96594ftj4","tag_id":"cm4idgztr000kqdu20ec99g4p","_id":"cm5rpdvot0004ump98oquebj0"},{"post_id":"cm5rpdvoq0001ump96594ftj4","tag_id":"cm4idgztu0011qdu2gcypdyhr","_id":"cm5rpdvot0006ump9f57p70k3"},{"post_id":"cm5rpdvoq0001ump96594ftj4","tag_id":"cm4idgztu0015qdu29kd838sw","_id":"cm5rpdvot0008ump9369x3loh"},{"post_id":"cm5rpdvos0003ump9dpskajhr","tag_id":"cm4idgztr000kqdu20ec99g4p","_id":"cm5rpdvot000aump9henshcdm"},{"post_id":"cm5rpdvos0003ump9dpskajhr","tag_id":"cm4idgztu0011qdu2gcypdyhr","_id":"cm5rpdvot000cump922paafeu"},{"post_id":"cm5rpdvos0003ump9dpskajhr","tag_id":"cm4idgztu0015qdu29kd838sw","_id":"cm5rpdvot000eump9gvhbh3kd"},{"post_id":"cm5rpdvoo0000ump92v2d1ikg","tag_id":"cm5rpdvor0002ump9b40g5055","_id":"cm5rpdvot000gump9h6jzgtg5"}],"Tag":[{"name":"python","_id":"cm4idgzti0005qdu2ankp6lob"},{"name":"库","_id":"cm4idgztm000cqdu28xz0gx1k"},{"name":"css","_id":"cm4idgztp000gqdu29p6hep1j"},{"name":"javascript","_id":"cm4idgztr000kqdu20ec99g4p"},{"name":"react","_id":"cm4idgztu0011qdu2gcypdyhr"},{"name":"基础","_id":"cm4idgztu0015qdu29kd838sw"},{"name":"数据结构","_id":"cm4idgztv001aqdu2cuxrbws1"},{"name":"哈希","_id":"cm4idgztw001fqdu2crorcitf"},{"name":"流程","_id":"cm56jrk0w00073zp9cxfaffkb"},{"name":"typescript","_id":"cm5978rb40002b9p90s082zwo"},{"name":"面试","_id":"cm5rpdvor0002ump9b40g5055"}]}}